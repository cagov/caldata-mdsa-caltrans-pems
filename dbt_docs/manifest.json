{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.6", "generated_at": "2025-08-19T19:33:40.818658Z", "invocation_id": "5302189a-2f4e-4576-9b78-7385be303d8d", "invocation_started_at": "2025-08-19T19:33:37.940532Z", "env": {}, "project_name": "caldata_mdsa_caltrans_pems", "project_id": "799bbe610608f56c5e76f76df542c38a", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}}, "nodes": {"model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_yearly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_yearly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_yearly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_yearly_city"], "alias": "performance__station_metrics_unpivot_agg_yearly_city", "checksum": {"name": "sha256", "checksum": "e7a92f3d37da920db28de3c9c76cac8bb2b75b0183ec657e4dd14d346f265767"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics\nwill measure the yearly delay and lost productivity of the state highway system.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The associated year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "yearly delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the yearly lost productivity that is simply sum up 24 hours\nlost productivity in a given year timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8277633, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_yearly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\nyearlyc as (\r\n    {{ get_city_name('station_yearly_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        sample_year,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                city,\r\n                city_abb,\r\n                city_name,\r\n                sample_year,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                yearlyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    where\r\n        city is not null\r\n    group by\r\n        city, city_abb, city_name, sample_year, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_yearly_city.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\nyearlyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from station_yearly_data as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        city,\n        city_abb,\n        city_name,\n        sample_year,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                yearlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                yearlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                yearlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                yearlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                yearlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_year,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                yearlyc\n            \n        \n    ) as combined_metrics\n    where\n        city is not null\n    group by\n        city, city_abb, city_name, sample_year, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_monthly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_monthly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_monthly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_monthly_district"], "alias": "performance__station_metrics_unpivot_agg_monthly_district", "checksum": {"name": "sha256", "checksum": "e6073dde29969e68523a4b77f650713be2b10dde28eb96b4f7c2ae2bf8853f82"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of delay and lost productivity by district and speed threshold.\n", "columns": {"district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_month": {"name": "sample_month", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_speed": {"name": "target_speed", "description": "Speed threshold for delay/productivity calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delay": {"name": "delay", "description": "Total delay for the district and month at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lost_productivity": {"name": "lost_productivity", "description": "Total lost productivity for the district and month at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8258207, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_monthly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        district,\r\n        sample_month,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                district,\r\n                sample_month,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                station_monthly_data\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        district, sample_month, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_monthly_district.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\nunpivot_combined as (\n    select\n        district,\n        sample_month,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                district,\n                sample_month,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n             union all \n        \n            select\n                district,\n                sample_month,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n             union all \n        \n            select\n                district,\n                sample_month,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n             union all \n        \n            select\n                district,\n                sample_month,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n             union all \n        \n            select\n                district,\n                sample_month,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n             union all \n        \n            select\n                district,\n                sample_month,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                station_monthly_data\n            \n        \n    ) as combined_metrics\n    group by\n        district, sample_month, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_monthly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_monthly"], "alias": "performance__station_metrics_agg_monthly", "checksum": {"name": "sha256", "checksum": "fc3dd0addf860abfa6a4b563fd3541fd07eea7d9be4734b38cdfadd4eaaccc72"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "monthly aggregation of volume,speed, and occupancy along with delays and lost productivity by\nacross all lanes of the station. This metrics will measure the monthly performance\nof the state highway system. This can be used to understand the SHS performance\nfrom month to month.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The starting date of each month of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_SPEED": {"name": "MONTHLY_SPEED", "description": "flow weighted monthly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VOLUME": {"name": "MONTHLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_OCCUPANCY": {"name": "MONTHLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VMT": {"name": "MONTHLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given month of the year and\na given section of the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VHT": {"name": "MONTHLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given month of the year and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given month of the year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TTI": {"name": "MONTHLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time across all the lanes.\nThe free-flow travel time is taken to be the time to traverse the link when traveling at 60MPH.\nFor loop-based performance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_Q_VALUE": {"name": "MONTHLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given month of the year across all the lanes.\nFor a single location its interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8747592, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_monthly", "raw_code": "{{ config(materialized='table') }}\n\nwith monthly as (\n    select\n        station_id,\n        sample_month,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        monthly_volume,\n        monthly_occupancy,\n        monthly_speed,\n        monthly_vmt,\n        monthly_vht,\n        monthly_q_value,\n        monthly_tti,\n        county\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\n),\n\nmonthlyc as (\n    {{ get_county_name('monthly') }}\n),\n\nmonthlycc as (\n    {{ get_city_name('monthlyc') }}\n)\n\nselect * from monthlycc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_monthly.sql", "compiled": true, "compiled_code": "\n\nwith monthly as (\n    select\n        station_id,\n        sample_month,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        monthly_volume,\n        monthly_occupancy,\n        monthly_speed,\n        monthly_vmt,\n        monthly_vht,\n        monthly_q_value,\n        monthly_tti,\n        county\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\nmonthlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            monthly.*,\n            c.county_name,\n            c.county_abb\n        from monthly\n        inner join county as c\n        on monthly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nmonthlycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from monthlyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from monthlycc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_weekly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_weekly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_weekly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_weekly_district"], "alias": "performance__station_metrics_unpivot_agg_weekly_district", "checksum": {"name": "sha256", "checksum": "57f41b21400e805f37af654345778ada44dccaccd59031f664869feca1832468"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly aggregation of delay and lost productivity across all lanes, grouped by district and speed threshold.\nThis model measures the weekly performance of the state highway system at the district level,\nsupporting analysis of congestion and productivity losses across districts.\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "Week of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "Start date of the week associated with the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Speed threshold for delay/productivity calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "Total weekly delay for the district at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "Total weekly lost productivity for the district at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.820554, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_weekly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed weekly level data\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        district,\r\n        sample_week,\r\n        sample_week_start_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                district,\r\n                sample_week,\r\n                sample_week_start_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                station_weekly_data\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        district, sample_week, sample_week_start_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_weekly_district.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed weekly level data\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\nunpivot_combined as (\n    select\n        district,\n        sample_week,\n        sample_week_start_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n             union all \n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n             union all \n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n             union all \n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n             union all \n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n             union all \n        \n            select\n                district,\n                sample_week,\n                sample_week_start_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                station_weekly_data\n            \n        \n    ) as combined_metrics\n    group by\n        district, sample_week, sample_week_start_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_monthly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_monthly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_monthly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_monthly_city"], "alias": "performance__station_metrics_unpivot_agg_monthly_city", "checksum": {"name": "sha256", "checksum": "d019fea10f3c7ef4f0a4420d436ab830516d2deaa62c81383a5d0dde7b0eaf9d"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "monthly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics\nwill measure the monthly delay and lost productivity of the state highway system. This can be used for\nmonthly and monthly aggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The month associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "monthly delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the monthly lost productivity that is simply sum up 24 hours\nlost productivity in a given month timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.822798, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_monthly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\nmonthlyc as (\r\n    {{ get_city_name('station_monthly_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        sample_month,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                city,\r\n                city_abb,\r\n                city_name,\r\n                sample_month,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                monthlyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    where\r\n        city is not null\r\n    group by\r\n        city, city_abb, city_name, sample_month, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_monthly_city.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\nmonthlyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from station_monthly_data as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        city,\n        city_abb,\n        city_name,\n        sample_month,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_month,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                monthlyc\n            \n        \n    ) as combined_metrics\n    where\n        city is not null\n    group by\n        city, city_abb, city_name, sample_month, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_monthly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_monthly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_monthly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_monthly_county"], "alias": "performance__station_metrics_unpivot_agg_monthly_county", "checksum": {"name": "sha256", "checksum": "450fa5d5386eed233e5d498ee9dc7dfd41389f72169460b8c9227e4667da4cda"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of delay and lost productivity across all lanes, grouped by county and speed threshold.\nThis model measures the monthly performance of the state highway system at the county level,\nsupporting analysis of congestion and productivity losses across counties.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "County number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Speed threshold for delay/productivity calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "Total monthly delay for the county at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "Total monthly lost productivity for the county at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.823571, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_monthly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\nmonthlyc as (\r\n    {{ get_county_name('station_monthly_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        county,\r\n        county_abb,\r\n        county_name,\r\n        sample_month,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                county,\r\n                county_abb,\r\n                county_name,\r\n                sample_month,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                monthlyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        county, county_abb, county_name, sample_month, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_monthly_county.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\nmonthlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            station_monthly_data.*,\n            c.county_name,\n            c.county_abb\n        from station_monthly_data\n        inner join county as c\n        on station_monthly_data.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nunpivot_combined as (\n    select\n        county,\n        county_abb,\n        county_name,\n        sample_month,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                monthlyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_month,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                monthlyc\n            \n        \n    ) as combined_metrics\n    group by\n        county, county_abb, county_name, sample_month, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_daily.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_daily"], "alias": "performance__station_metrics_unpivot_agg_daily", "checksum": {"name": "sha256", "checksum": "d36e3e900ba6888d9820a10a1c266a0b92a10673622a70fda861501b9421a112"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "daily aggregation of delays and lost productivity based on different speed thresholds across\nall lanes of the station. This metrics will measure the daily performance of the state highway system.\nThis can be used for weekly and monthly aggregation of PeMS performance metrics across all the lanes\nin a given station.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Threshold of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "daily delay for different target speed thresholds. The Delay performance metric is the amount of\nadditional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the daily lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632023.812639, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_daily", "raw_code": "{{ config(\n    materialized=\"table\",\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\n) }}\n\nwith daily as (\n    select * from {{ ref('int_performance__station_metrics_agg_daily') }}\n),\n\ndailyc as (\n    {{ get_county_name('daily') }}\n),\n\ndailycc as (\n    {{ get_city_name('dailyc') }}\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_date,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_name,\n        county_abb,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        {% for value in var(\"V_t\") %}\n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '{{ value }}' as target_speed,\n                delay_{{ value }}_mph as delay,\n                lost_productivity_{{ value }}_mph as lost_productivity\n            from\n                dailycc\n            {% if not loop.last %} union all {% endif %}\n        {% endfor %}\n    ) as combined_metrics\n    group by\n        sample_date,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_name,\n        county_abb,\n        target_speed\n)\n\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_daily.sql", "compiled": true, "compiled_code": "\n\nwith daily as (\n    select * from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\ndailyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            daily.*,\n            c.county_name,\n            c.county_abb\n        from daily\n        inner join county as c\n        on daily.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ndailycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from dailyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_date,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_name,\n        county_abb,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '35' as target_speed,\n                delay_35_mph as delay,\n                lost_productivity_35_mph as lost_productivity\n            from\n                dailycc\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '40' as target_speed,\n                delay_40_mph as delay,\n                lost_productivity_40_mph as lost_productivity\n            from\n                dailycc\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '45' as target_speed,\n                delay_45_mph as delay,\n                lost_productivity_45_mph as lost_productivity\n            from\n                dailycc\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '50' as target_speed,\n                delay_50_mph as delay,\n                lost_productivity_50_mph as lost_productivity\n            from\n                dailycc\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '55' as target_speed,\n                delay_55_mph as delay,\n                lost_productivity_55_mph as lost_productivity\n            from\n                dailycc\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_name,\n                county_abb,\n                '60' as target_speed,\n                delay_60_mph as delay,\n                lost_productivity_60_mph as lost_productivity\n            from\n                dailycc\n            \n        \n    ) as combined_metrics\n    group by\n        sample_date,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_name,\n        county_abb,\n        target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_aadt_k_value_daily_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_aadt_k_value_daily_county.sql", "original_file_path": "models/marts/performance/performance__station_aadt_k_value_daily_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_aadt_k_value_daily_county"], "alias": "performance__station_aadt_k_value_daily_county", "checksum": {"name": "sha256", "checksum": "65c3676ab9fd3e1f54d89f6bb6824d8e75c096431204e5de84a9d853e6d7492d"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Station level annual average daily traffic and k th highest hour volume in the precceding year.\nThis model only used detector reported observe value and did not impute any missing value to\ncalculate the AADT and k value. More details can be found in the paper \"Using Incomplete Archived\nITS Data to Calculate Annual Average Traffic Statistics\" by Shawn Turner and Eun Sug Park\n(Proceedings of the Transportation Research Board 87th Annual Meeting, Washington, D.C., 2008).\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The name of the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOCATION": {"name": "LOCATION", "description": "The geolocation of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_1": {"name": "AADT_1", "description": "This is simply the average of all daily traffic flows over the entire year. it is known as Arithmetic Mean.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_2": {"name": "AADT_2", "description": "This procedure begins by calculating Monthly Average Days of the Week (MADW) values,\nwhich are the average daily flows for each day of the week and each month of the\nyear (a total of 84 values). From these, 12 Monthly Average Daily Traffic (MADT)\nvalues are calculated as the average of the non-missing MADW values for each month.\nFinally, AADT_2 is computed as the average of all MADT values. This algorithm allows\none or more of the 7 weekday values to be missing for the MADT computation,\nbut none of the 12 MADT values may be missing for the final average. This is known as\nASTM Standard 1442.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_3": {"name": "AADT_3", "description": "This algorithm also starts with the MADW values, computed as described above for AADT_2.\nFrom these, an Annual Average Days of the Week (AADW) value is computed for each day of\nthe week as the average across all 12 months. Finally, AADT_3 is computed as the average\nof these 7 AADW values.Missing data are not imputed; therefore, incomplete days are not\nused in the calculation of MADW values.This is known as Conventional AASHTO Procedures.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_4": {"name": "AADT_4", "description": "This procedure first calculates, across all 12 months, the monthly average flow for each\nhour of the week (MAHW), which results in 24 x 7 = 168 values per month. Then for each month\nand day of the week, the 24 MAHW values are summed to produce a MADW value. Then, just as in\nAADT_3, 7 AADW values are produced as the averages of MADW across 12 months, which are then\naveraged to yield AADT_4.This method is known as Provisional AASHTO Procedures.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_5": {"name": "AADT_5", "description": "For each hour of the day, hourly traffic flow is averaged across all days of the year,\nresulting in 24 annual average hourly values. AADT_5 is computed as the sum of the 24 hourly\nvalues.This method is known as Sum of 24 Annual Average Hourly Traffic Volumes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_6": {"name": "AADT_6", "description": "This procedure is a modified version of AADT_2, in which 1 of the 12 MADT values may be\nmissing for the final AADT calculation. This is the Modified ASTM Standard.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_7": {"name": "AADT_7", "description": "This procedure is a modified version of AADT_3, in which 1 of the 12 MADW values may be\nmissing in the AADW subcomputation, and/or 1 of the 7 AADW values may be missing in the\nfinal AADT_7 computation. This is Modified Conventional AASHTO.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_8": {"name": "AADT_8", "description": "Similarly, this procedure is a modified version of AADT_4, in which 1 of the 12 MADW\nvalues may be missing in the AADW subcomputation, and/or 1 of the 7 AADW values may\nbe missing in the final AADT_8 computation. This is Modified Provisional AASHTO.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_30": {"name": "K_30", "description": "30th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_50": {"name": "K_50", "description": "50th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_100": {"name": "K_100", "description": "100th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_other.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8526342, "relation_name": "ANALYTICS_PRD.performance.performance__station_aadt_k_value_daily_county", "raw_code": "with aadt as (\r\n    select *\r\n    from {{ ref('int_performance__station_aadt_with_K_value') }}\r\n),\r\n\r\naadt_with_county as (\r\n    {{ get_county_name('aadt') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location,\r\n        absolute_postmile\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\naadt_county_geo as (\r\n    select\r\n        aadt_with_county.*,\r\n        geo.absolute_postmile,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        aadt_with_county\r\n    inner join\r\n        geo\r\n        on aadt_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from aadt_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_aadt_with_K_value", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_aadt_k_value_daily_county.sql", "compiled": true, "compiled_code": "with aadt as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_aadt_with_K_value\n),\n\naadt_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            aadt.*,\n            c.county_name,\n            c.county_abb\n        from aadt\n        inner join county as c\n        on aadt.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location,\n        absolute_postmile\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\naadt_county_geo as (\n    select\n        aadt_with_county.*,\n        geo.absolute_postmile,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        aadt_with_county\n    inner join\n        geo\n        on aadt_with_county.station_id = geo.station_id\n)\n\nselect * from aadt_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_yearly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_yearly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_yearly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_yearly"], "alias": "performance__station_metrics_agg_yearly", "checksum": {"name": "sha256", "checksum": "461541c56194566d7fe3e633f794fe0639222c03b744d250eedf9ddbd3b25c77"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume,speed, and occupancy along with delays and lost productivity by\nacross all lanes of the station. This metrics will measure the yearly performance\nof the state highway system. This can be used to understand the SHS performance\nfrom year to year.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The starting date of each year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_SPEED": {"name": "YEARLY_SPEED", "description": "flow weighted yearly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VOLUME": {"name": "YEARLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_OCCUPANCY": {"name": "YEARLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VMT": {"name": "YEARLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given month of the year and\na given section of the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VHT": {"name": "YEARLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given month of the year and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given month of the year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_TTI": {"name": "YEARLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time across all the lanes.\nThe free-flow travel time is taken to be the time to traverse the link when traveling at 60MPH.\nFor loop-based performance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_Q_VALUE": {"name": "YEARLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given month of the year across all the lanes.\nFor a single location its interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8845882, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_yearly", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith yearly as (\r\n    select\r\n        station_id,\r\n        sample_year,\r\n        length,\r\n        station_type,\r\n        district,\r\n        city,\r\n        freeway,\r\n        direction,\r\n        yearly_volume,\r\n        yearly_occupancy,\r\n        yearly_speed,\r\n        yearly_vmt,\r\n        yearly_vht,\r\n        yearly_q_value,\r\n        yearly_tti,\r\n        county\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\nyearlyc as (\r\n    {{ get_county_name('yearly') }}\r\n),\r\n\r\nyearlycc as (\r\n    {{ get_city_name('yearlyc') }}\r\n)\r\n\r\nselect * from yearlycc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_yearly.sql", "compiled": true, "compiled_code": "\n\nwith yearly as (\n    select\n        station_id,\n        sample_year,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        yearly_volume,\n        yearly_occupancy,\n        yearly_speed,\n        yearly_vmt,\n        yearly_vht,\n        yearly_q_value,\n        yearly_tti,\n        county\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\nyearlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            yearly.*,\n            c.county_name,\n            c.county_abb\n        from yearly\n        inner join county as c\n        on yearly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nyearlycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from yearlyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from yearlycc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_monthly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_monthly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_monthly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_monthly_county"], "alias": "performance__station_metrics_agg_monthly_county", "checksum": {"name": "sha256", "checksum": "2de1c9f7b5ec570baf7bf56acc270b2e7f48a5f7c5fb4502e3281a8ce1e8af0d"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of volume, occupancy, speed, VMT, VHT, Q value, and TTI by county.\nThis model measures the monthly performance of the state highway system at the county level,\nsupporting analysis of trends and comparisons across counties.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "County number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "Name of the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "Abbreviation of the county name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VOLUME_SUM": {"name": "MONTHLY_VOLUME_SUM", "description": "Sum of monthly volume for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_OCCUPANCY_AVG": {"name": "MONTHLY_OCCUPANCY_AVG", "description": "Average monthly occupancy for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_SPEED_AVG": {"name": "MONTHLY_SPEED_AVG", "description": "Flow-weighted average monthly speed for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VMT": {"name": "MONTHLY_VMT", "description": "Monthly vehicle miles traveled for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VHT": {"name": "MONTHLY_VHT", "description": "Monthly vehicle hours traveled for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_Q_VALUE": {"name": "MONTHLY_Q_VALUE", "description": "Monthly Q value (average speed) for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TTI": {"name": "MONTHLY_TTI", "description": "Monthly travel time index for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8775783, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_monthly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to monthly\r\nspatial_metrics as (\r\n    select\r\n        county,\r\n        sample_month,\r\n        sum(monthly_volume) as monthly_volume_sum,\r\n        avg(monthly_occupancy) as monthly_occupancy_avg,\r\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\r\n        sum(monthly_vmt) as monthly_vmt,\r\n        sum(monthly_vht) as monthly_vht,\r\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\r\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\r\n    from station_monthly_data\r\n    group by\r\n        county, sample_month\r\n),\r\n\r\nmonthlyc as (\r\n    {{ get_county_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from monthlyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_monthly_county.sql", "compiled": true, "compiled_code": "\n\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\n-- now aggregate daily volume, occupancy and speed to monthly\nspatial_metrics as (\n    select\n        county,\n        sample_month,\n        sum(monthly_volume) as monthly_volume_sum,\n        avg(monthly_occupancy) as monthly_occupancy_avg,\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\n        sum(monthly_vmt) as monthly_vmt,\n        sum(monthly_vht) as monthly_vht,\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\n    from station_monthly_data\n    group by\n        county, sample_month\n),\n\nmonthlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            spatial_metrics.*,\n            c.county_name,\n            c.county_abb\n        from spatial_metrics\n        inner join county as c\n        on spatial_metrics.county = c.county_id\n    )\n\n    select * from station_with_county\n\n)\n\nselect * from monthlyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_daily.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_daily"], "alias": "performance__station_metrics_agg_daily", "checksum": {"name": "sha256", "checksum": "f6b64690af79a5a2807f5359d54299891525a9bdf09eff58be7b937d96aef8ee"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "daily aggregation of volume, occupancy and speed across all lanes of the station. This metrics will\nmeasure the daily performance of the state highway system. This can be used for weekly and monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME": {"name": "DAILY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED": {"name": "DAILY_SPEED", "description": "flow weighted daily speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY": {"name": "DAILY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632023.8601015, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_daily", "raw_code": "{{ config(\n    materialized=\"table\",\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\n) }}\n\nwith daily as (\n    select\n        station_id,\n        sample_date,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        daily_volume,\n        daily_occupancy,\n        daily_speed,\n        daily_vmt,\n        daily_vht,\n        daily_q_value,\n        daily_tti,\n        county\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\n),\n\ndailyc as (\n    {{ get_county_name('daily') }}\n),\n\ndailycc as (\n    {{ get_city_name('dailyc') }}\n)\n\nselect * from dailycc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_daily.sql", "compiled": true, "compiled_code": "\n\nwith daily as (\n    select\n        station_id,\n        sample_date,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        daily_volume,\n        daily_occupancy,\n        daily_speed,\n        daily_vmt,\n        daily_vht,\n        daily_q_value,\n        daily_tti,\n        county\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\ndailyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            daily.*,\n            c.county_name,\n            c.county_abb\n        from daily\n        inner join county as c\n        on daily.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ndailycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from dailyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from dailycc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_unpivot_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_unpivot_agg_weekly.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_unpivot_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_unpivot_agg_weekly"], "alias": "performance__station_bottleneck_unpivot_agg_weekly", "checksum": {"name": "sha256", "checksum": "59de0b10e6aa1c50ebdc9fd3eedfbaa97eaa693e166451d8d3b983b6be91b130"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly bottleneck delay metrics unpivoted by speed threshold.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_week": {"name": "sample_week", "description": "Week of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_speed": {"name": "target_speed", "description": "Speed threshold for delay calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delay": {"name": "delay", "description": "Total delay for the station and week at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8552165, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_unpivot_agg_weekly", "raw_code": "{{ config(\r\n    materialized=\"table\"\r\n) }}\r\n\r\nwith weekly_bottleneck_delay as (\r\n    select * from {{ ref('int_performance__bottleneck_delay_metrics_agg_weekly') }}\r\n),\r\n\r\nunpivot_delay as (\r\n    select\r\n        station_id,\r\n        sample_week,\r\n        time_shift,\r\n        station_type,\r\n        cast(district as int) as district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                station_id,\r\n                sample_week,\r\n                time_shift,\r\n                station_type,\r\n                district,\r\n                freeway,\r\n                direction,\r\n                absolute_postmile,\r\n                county,\r\n                '{{ value }}' as target_speed,\r\n                weekly_time_shift_spatial_delay_{{ value }}_mph as delay\r\n            from\r\n                weekly_bottleneck_delay\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        station_id,\r\n        sample_week,\r\n        time_shift,\r\n        station_type,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('unpivot_delay') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_unpivot_agg_weekly.sql", "compiled": true, "compiled_code": "\n\nwith weekly_bottleneck_delay as (\n    select * from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_weekly\n),\n\nunpivot_delay as (\n    select\n        station_id,\n        sample_week,\n        time_shift,\n        station_type,\n        cast(district as int) as district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay\n    from (\n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '35' as target_speed,\n                weekly_time_shift_spatial_delay_35_mph as delay\n            from\n                weekly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '40' as target_speed,\n                weekly_time_shift_spatial_delay_40_mph as delay\n            from\n                weekly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '45' as target_speed,\n                weekly_time_shift_spatial_delay_45_mph as delay\n            from\n                weekly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '50' as target_speed,\n                weekly_time_shift_spatial_delay_50_mph as delay\n            from\n                weekly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '55' as target_speed,\n                weekly_time_shift_spatial_delay_55_mph as delay\n            from\n                weekly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_week,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '60' as target_speed,\n                weekly_time_shift_spatial_delay_60_mph as delay\n            from\n                weekly_bottleneck_delay\n            \n        \n    ) as combined_metrics\n    group by\n        station_id,\n        sample_week,\n        time_shift,\n        station_type,\n        district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            unpivot_delay.*,\n            c.county_name,\n            c.county_abb\n        from unpivot_delay\n        inner join county as c\n        on unpivot_delay.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_monthly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_monthly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_monthly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_monthly_city"], "alias": "performance__station_metrics_agg_monthly_city", "checksum": {"name": "sha256", "checksum": "a4d4c46b67b5dc35b0cf44e6d06d4456da46c741f9ce1dee78a458ed3cf0cdb9"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "monthly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics will\nmeasure the monthly performance of the state highway system. This can be used for yearly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The month associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VOLUME_SUM": {"name": "MONTHLY_VOLUME_SUM", "description": "The sum of the flow values for a station over the sample period across all the lanes aggregated\n  by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_SPEED_AVG": {"name": "MONTHLY_SPEED_AVG", "description": "flow weighted monthly speed across all the lanes aggregated by cities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_OCCUPANCY_AVG": {"name": "MONTHLY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\n  aggregated by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VMT": {"name": "MONTHLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given month and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VHT": {"name": "MONTHLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given month and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given month.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TTI": {"name": "MONTHLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_Q_VALUE": {"name": "MONTHLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given month across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8766582, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_monthly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        city,\r\n        sample_month,\r\n        sum(monthly_volume) as monthly_volume_sum,\r\n        avg(monthly_occupancy) as monthly_occupancy_avg,\r\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\r\n        sum(monthly_vmt) as monthly_vmt,\r\n        sum(monthly_vht) as monthly_vht,\r\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\r\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\r\n    from station_monthly_data\r\n    where\r\n        city is not null\r\n    group by\r\n        city, sample_month\r\n),\r\n\r\nmonthlyc as (\r\n    {{ get_city_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from monthlyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_monthly_city.sql", "compiled": true, "compiled_code": "\n\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        city,\n        sample_month,\n        sum(monthly_volume) as monthly_volume_sum,\n        avg(monthly_occupancy) as monthly_occupancy_avg,\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\n        sum(monthly_vmt) as monthly_vmt,\n        sum(monthly_vht) as monthly_vht,\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\n    from station_monthly_data\n    where\n        city is not null\n    group by\n        city, sample_month\n),\n\nmonthlyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from spatial_metrics as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from monthlyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_yearly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_yearly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_yearly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_yearly"], "alias": "performance__station_metrics_unpivot_agg_yearly", "checksum": {"name": "sha256", "checksum": "56fc00573b79967c594bae7ae5b5ac449e6b38fc6a180d8ae5fb12e7e1d0da74"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume,speed, and occupancy along with delays and lost productivity by\nacross all lanes of the station. This metrics will measure the yearly performance\nof the state highway system. This can be used to understand the SHS performance\nfrom year to year.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The starting date of each year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "yearly delay for different threshold of congestion speed such as 35, 40, 45, 50, 55 and 60 mph\nacross all the lanes.\nThe Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the yearly lost productivity that is simply sum up all days\nlost productivity in a given month of the year timeperiod across all the lanes.\nThe lost Productivity performance metric is\nthe number of lane-mile-month on the freeway lost due to operating under congested\nconditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.826988, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_yearly", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith yearly as (\r\n    select * from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\nyearlyc as (\r\n    {{ get_county_name('yearly') }}\r\n),\r\n\r\nyearlycc as (\r\n    {{ get_city_name('yearlyc') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        station_id,\r\n        sample_year,\r\n        length,\r\n        station_type,\r\n        district,\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        freeway,\r\n        direction,\r\n        county,\r\n        county_abb,\r\n        county_name,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                station_id,\r\n                sample_year,\r\n                length,\r\n                station_type,\r\n                district,\r\n                city,\r\n                city_abb,\r\n                city_name,\r\n                freeway,\r\n                direction,\r\n                county,\r\n                county_abb,\r\n                county_name,\r\n                '{{ value }}' as target_speed,\r\n                delay_{{ value }}_mph as delay,\r\n                lost_productivity_{{ value }}_mph as lost_productivity\r\n            from\r\n                yearlycc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        sample_year,\r\n        station_id,\r\n        length,\r\n        station_type,\r\n        district,\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        freeway,\r\n        direction,\r\n        county,\r\n        county_abb,\r\n        county_name,\r\n        target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_yearly.sql", "compiled": true, "compiled_code": "\n\nwith yearly as (\n    select * from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\nyearlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            yearly.*,\n            c.county_name,\n            c.county_abb\n        from yearly\n        inner join county as c\n        on yearly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nyearlycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from yearlyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_year,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '35' as target_speed,\n                delay_35_mph as delay,\n                lost_productivity_35_mph as lost_productivity\n            from\n                yearlycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '40' as target_speed,\n                delay_40_mph as delay,\n                lost_productivity_40_mph as lost_productivity\n            from\n                yearlycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '45' as target_speed,\n                delay_45_mph as delay,\n                lost_productivity_45_mph as lost_productivity\n            from\n                yearlycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '50' as target_speed,\n                delay_50_mph as delay,\n                lost_productivity_50_mph as lost_productivity\n            from\n                yearlycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '55' as target_speed,\n                delay_55_mph as delay,\n                lost_productivity_55_mph as lost_productivity\n            from\n                yearlycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '60' as target_speed,\n                delay_60_mph as delay,\n                lost_productivity_60_mph as lost_productivity\n            from\n                yearlycc\n            \n        \n    ) as combined_metrics\n    group by\n        sample_year,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_weekly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_weekly"], "alias": "performance__station_metrics_unpivot_agg_weekly", "checksum": {"name": "sha256", "checksum": "7fe6b3a5e42712452a0d2eb58cdf4b4a6b110e14efe641a675caf000ef4ea5d8"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_week_start_date)))"}, "tags": [], "description": "weekly aggregation of delays and lost productivity based on different speed thresholds across\nall lanes of the station. This metrics will measure the weekly performance of the state highway system.\nThis can be used for monthly aggregation of PeMS performance metrics across all the lanes\nin a given station.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "The first date of each week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Threshold of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "weekly delay for different target speed thresholds. The Delay performance metric is the amount of\nadditional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the weekly lost productivity that is simply sum up 24 hours\nlost productivity in a given time period across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_week_start_date)))\"))"}, "created_at": 1755632023.8181105, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_weekly", "raw_code": "{{ config(\n    materialized=\"table\",\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_week_start_date)))\",\n) }}\n\nwith weekly as (\n    select * from {{ ref('int_performance__station_metrics_agg_weekly') }}\n),\n\nweeklyc as (\n    {{ get_county_name('weekly') }}\n),\n\nweeklycc as (\n    {{ get_city_name('weeklyc') }}\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        {% for value in var(\"V_t\") %}\n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '{{ value }}' as target_speed,\n                delay_{{ value }}_mph as delay,\n                lost_productivity_{{ value }}_mph as lost_productivity\n            from\n                weeklycc\n            {% if not loop.last %} union all {% endif %}\n        {% endfor %}\n    ) as combined_metrics\n    group by\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed\n)\n\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_weekly.sql", "compiled": true, "compiled_code": "\n\nwith weekly as (\n    select * from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\nweeklyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            weekly.*,\n            c.county_name,\n            c.county_abb\n        from weekly\n        inner join county as c\n        on weekly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nweeklycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from weeklyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '35' as target_speed,\n                delay_35_mph as delay,\n                lost_productivity_35_mph as lost_productivity\n            from\n                weeklycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '40' as target_speed,\n                delay_40_mph as delay,\n                lost_productivity_40_mph as lost_productivity\n            from\n                weeklycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '45' as target_speed,\n                delay_45_mph as delay,\n                lost_productivity_45_mph as lost_productivity\n            from\n                weeklycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '50' as target_speed,\n                delay_50_mph as delay,\n                lost_productivity_50_mph as lost_productivity\n            from\n                weeklycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '55' as target_speed,\n                delay_55_mph as delay,\n                lost_productivity_55_mph as lost_productivity\n            from\n                weeklycc\n             union all \n        \n            select\n                station_id,\n                sample_year,\n                sample_week,\n                sample_week_start_date,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '60' as target_speed,\n                delay_60_mph as delay,\n                lost_productivity_60_mph as lost_productivity\n            from\n                weeklycc\n            \n        \n    ) as combined_metrics\n    group by\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_daily_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_daily_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_daily_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_daily_city"], "alias": "performance__station_metrics_unpivot_agg_daily_city", "checksum": {"name": "sha256", "checksum": "536acbfe06fe0744f47f7f10ebf136926665094c87d1b2b0eccb87515064c6a9"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics\nwill measure the daily delay and lost productivity of the state highway system. This can be used for\nweekly and monthly aggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "daily delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the daily lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8144274, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_daily_city", "raw_code": "-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\ndailyc as (\r\n    {{ get_city_name('station_daily_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        sample_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                city,\r\n                city_abb,\r\n                city_name,\r\n                sample_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                dailyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    where\r\n        city is not null\r\n    group by\r\n        city, city_abb, city_name, sample_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_daily_city.sql", "compiled": true, "compiled_code": "-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\ndailyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from station_daily_data as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        city,\n        city_abb,\n        city_name,\n        sample_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                dailyc\n            \n        \n    ) as combined_metrics\n    where\n        city is not null\n    group by\n        city, city_abb, city_name, sample_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_monthly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_monthly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_monthly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_monthly_district"], "alias": "performance__station_metrics_agg_monthly_district", "checksum": {"name": "sha256", "checksum": "ae3c646006ccbeb995a65b91934d47b564bff0ef97e0c5bd303332cf9f7f2ac8"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of volume, occupancy, speed, VMT, VHT, Q value, and TTI by district.\n", "columns": {"district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_month": {"name": "sample_month", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_volume_sum": {"name": "monthly_volume_sum", "description": "Sum of monthly volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_occupancy_avg": {"name": "monthly_occupancy_avg", "description": "Average monthly occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_speed_avg": {"name": "monthly_speed_avg", "description": "Flow-weighted average monthly speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_vmt": {"name": "monthly_vmt", "description": "Monthly vehicle miles traveled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_vht": {"name": "monthly_vht", "description": "Monthly vehicle hours traveled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_q_value": {"name": "monthly_q_value", "description": "Monthly Q value (average speed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_tti": {"name": "monthly_tti", "description": "Monthly travel time index.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8810506, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_monthly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_monthly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        district,\r\n        sample_month,\r\n        sum(monthly_volume) as monthly_volume_sum,\r\n        avg(monthly_occupancy) as monthly_occupancy_avg,\r\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\r\n        sum(monthly_vmt) as monthly_vmt,\r\n        sum(monthly_vht) as monthly_vht,\r\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\r\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\r\n    from station_monthly_data\r\n    group by\r\n        district, sample_month\r\n)\r\n\r\nselect * from spatial_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_monthly_district.sql", "compiled": true, "compiled_code": "\n\nwith station_monthly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        district,\n        sample_month,\n        sum(monthly_volume) as monthly_volume_sum,\n        avg(monthly_occupancy) as monthly_occupancy_avg,\n        sum(monthly_volume * monthly_speed) / nullifzero(sum(monthly_volume)) as monthly_speed_avg,\n        sum(monthly_vmt) as monthly_vmt,\n        sum(monthly_vht) as monthly_vht,\n        sum(monthly_vmt) / nullifzero(sum(monthly_vht)) as monthly_q_value,\n        60 / nullifzero(sum(monthly_q_value)) as monthly_tti\n    from station_monthly_data\n    group by\n        district, sample_month\n)\n\nselect * from spatial_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_daily_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_daily_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_daily_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_daily_county"], "alias": "performance__station_metrics_unpivot_agg_daily_county", "checksum": {"name": "sha256", "checksum": "6ac290b94be7448590768b6c9aadc3462b233fc8c8d3a6b10fb5752b7d67c0c9"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of delay and productivity across all lanes aggregated by counties. This metrics will\nmeasure the daily delay and lost productivity of the state highway system. This can be used for weekly\nand monthly aggregation of PeMS performance metrics across all the couties.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "daily delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the daily lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8152528, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_daily_county", "raw_code": "-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\ndailyc as (\r\n    {{ get_county_name('station_daily_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        county,\r\n        county_abb,\r\n        county_name,\r\n        sample_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                county,\r\n                county_abb,\r\n                county_name,\r\n                sample_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                dailyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        county, county_abb, county_name, sample_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_daily_county.sql", "compiled": true, "compiled_code": "-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\ndailyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            station_daily_data.*,\n            c.county_name,\n            c.county_abb\n        from station_daily_data\n        inner join county as c\n        on station_daily_data.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nunpivot_combined as (\n    select\n        county,\n        county_abb,\n        county_name,\n        sample_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                dailyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                dailyc\n            \n        \n    ) as combined_metrics\n    group by\n        county, county_abb, county_name, sample_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_agg_monthly.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_agg_monthly"], "alias": "performance__station_bottleneck_agg_monthly", "checksum": {"name": "sha256", "checksum": "40d4fe82e9fb18a2f58bd0806fa9733ef7c5f5323070f13191a1d41aef148cbc"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly bottleneck metrics aggregated by station, including location and county.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_month": {"name": "sample_month", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_active_days": {"name": "monthly_active_days", "description": "Number of active days in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_time_shift_duration": {"name": "monthly_time_shift_duration", "description": "Duration of time shift in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_time_shift_extent": {"name": "monthly_time_shift_extent", "description": "Extent of time shift in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8337834, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_agg_monthly", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith monthly_bottleneck as (\r\n    select\r\n        station_id,\r\n        sample_month,\r\n        time_shift,\r\n        cast(district as int) as district,\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        monthly_active_days,\r\n        monthly_time_shift_duration,\r\n        monthly_time_shift_extent,\r\n        county\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_monthly') }}\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('monthly_bottleneck') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_agg_monthly.sql", "compiled": true, "compiled_code": "\n\nwith monthly_bottleneck as (\n    select\n        station_id,\n        sample_month,\n        time_shift,\n        cast(district as int) as district,\n        station_type,\n        freeway,\n        direction,\n        absolute_postmile,\n        monthly_active_days,\n        monthly_time_shift_duration,\n        monthly_time_shift_extent,\n        county\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_monthly\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            monthly_bottleneck.*,\n            c.county_name,\n            c.county_abb\n        from monthly_bottleneck\n        inner join county as c\n        on monthly_bottleneck.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_yearly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_yearly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_yearly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_yearly_county"], "alias": "performance__station_metrics_unpivot_agg_yearly_county", "checksum": {"name": "sha256", "checksum": "bec3854f9bebcef2dd3c9da80a969fba986a509258f23990664630f0594a6310"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of delay and productivity across all lanes aggregated by counties. This metrics will\nmeasure the yearly delay and lost productivity of the state highway system.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The associated year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "yearly delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the yearly lost productivity that is simply sum up 24 hours\nlost productivity in a given year timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.828536, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_yearly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        county,\r\n        sample_year,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph) as delay_{{ value }}_mph,\r\n            sum(lost_productivity_{{ value }}_mph) as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_yearly_data\r\n    group by\r\n        county, sample_year\r\n),\r\n\r\nunpivot_metrics as (\r\n    {{ get_county_name('spatial_metrics') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        county,\r\n        sample_year,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                county,\r\n                sample_year,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                unpivot_metrics\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        county, sample_year, target_speed\r\n),\r\n\r\nunpivot_combinedc as (\r\n    {{ get_county_name('unpivot_combined') }}\r\n)\r\n\r\nselect * from unpivot_combinedc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_yearly_county.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        county,\n        sample_year,\n        \n            sum(delay_35_mph) as delay_35_mph,\n            sum(lost_productivity_35_mph) as lost_productivity_35_mph\n            \n                ,\n            \n        \n            sum(delay_40_mph) as delay_40_mph,\n            sum(lost_productivity_40_mph) as lost_productivity_40_mph\n            \n                ,\n            \n        \n            sum(delay_45_mph) as delay_45_mph,\n            sum(lost_productivity_45_mph) as lost_productivity_45_mph\n            \n                ,\n            \n        \n            sum(delay_50_mph) as delay_50_mph,\n            sum(lost_productivity_50_mph) as lost_productivity_50_mph\n            \n                ,\n            \n        \n            sum(delay_55_mph) as delay_55_mph,\n            sum(lost_productivity_55_mph) as lost_productivity_55_mph\n            \n                ,\n            \n        \n            sum(delay_60_mph) as delay_60_mph,\n            sum(lost_productivity_60_mph) as lost_productivity_60_mph\n            \n        \n    from station_yearly_data\n    group by\n        county, sample_year\n),\n\nunpivot_metrics as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            spatial_metrics.*,\n            c.county_name,\n            c.county_abb\n        from spatial_metrics\n        inner join county as c\n        on spatial_metrics.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nunpivot_combined as (\n    select\n        county,\n        sample_year,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                county,\n                sample_year,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n             union all \n        \n            select\n                county,\n                sample_year,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n             union all \n        \n            select\n                county,\n                sample_year,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n             union all \n        \n            select\n                county,\n                sample_year,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n             union all \n        \n            select\n                county,\n                sample_year,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n             union all \n        \n            select\n                county,\n                sample_year,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                unpivot_metrics\n            \n        \n    ) as combined_metrics\n    group by\n        county, sample_year, target_speed\n),\n\nunpivot_combinedc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            unpivot_combined.*,\n            c.county_name,\n            c.county_abb\n        from unpivot_combined\n        inner join county as c\n        on unpivot_combined.county = c.county_id\n    )\n\n    select * from station_with_county\n\n)\n\nselect * from unpivot_combinedc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_weekly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_weekly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_weekly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_weekly_city"], "alias": "performance__station_metrics_unpivot_agg_weekly_city", "checksum": {"name": "sha256", "checksum": "697e2bc840bfd89636d2df77f07feb57131c72f3fd52c8d88e502c59ea50fac8"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "weekly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics\nwill measure the weekly delay and lost productivity of the state highway system. This can be used for\nmonthly aggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "The first date of each week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "weekly delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the weekly lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.819008, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_weekly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed weekly level data\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\nweeklyc as (\r\n    {{ get_city_name('station_weekly_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        city,\r\n        city_abb,\r\n        city_name,\r\n        sample_week,\r\n        sample_week_start_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                city,\r\n                city_abb,\r\n                city_name,\r\n                sample_week,\r\n                sample_week_start_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                weeklyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    where\r\n        city is not null\r\n    group by\r\n        city, city_abb, city_name, sample_week, sample_week_start_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_weekly_city.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed weekly level data\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\nweeklyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from station_weekly_data as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        city,\n        city_abb,\n        city_name,\n        sample_week,\n        sample_week_start_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                city,\n                city_abb,\n                city_name,\n                sample_week,\n                sample_week_start_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                weeklyc\n            \n        \n    ) as combined_metrics\n    where\n        city is not null\n    group by\n        city, city_abb, city_name, sample_week, sample_week_start_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_daily_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_daily_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_daily_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_daily_district"], "alias": "performance__station_metrics_unpivot_agg_daily_district", "checksum": {"name": "sha256", "checksum": "f0c13d1dcf945daa9f249fe0e6f0f7466632d267e0e3563ac7d135b9cff16f55"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of delay and productivity across all lanes aggregated by districts. This metrics will\nmeasure the daily delay and lost productivity of the state highway system. This can be used for weekly\nand monthly aggregation of PeMS performance metrics across all the couties.\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "The unique number that identifies the district that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "daily delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the daily lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8159742, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_daily_district", "raw_code": "-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        district,\r\n        sample_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                district,\r\n                sample_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                station_daily_data\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        district, sample_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_daily_district.sql", "compiled": true, "compiled_code": "-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\nunpivot_combined as (\n    select\n        district,\n        sample_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                district,\n                sample_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                station_daily_data\n             union all \n        \n            select\n                district,\n                sample_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                station_daily_data\n             union all \n        \n            select\n                district,\n                sample_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                station_daily_data\n             union all \n        \n            select\n                district,\n                sample_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                station_daily_data\n             union all \n        \n            select\n                district,\n                sample_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                station_daily_data\n             union all \n        \n            select\n                district,\n                sample_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                station_daily_data\n            \n        \n    ) as combined_metrics\n    group by\n        district, sample_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_weekly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_weekly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_weekly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_weekly_district"], "alias": "performance__station_metrics_agg_weekly_district", "checksum": {"name": "sha256", "checksum": "6b499151a0cbad98b6db5fffcb75a3173c00467ddeb7b2b3d207dac6ecb95a8c"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly aggregation of volume, occupancy, speed, VMT, VHT, Q value, and TTI by district.\nThis model measures the weekly performance of the state highway system at the district level,\nsupporting analysis of trends and comparisons across districts.\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "Week of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME_SUM": {"name": "WEEKLY_VOLUME_SUM", "description": "Sum of weekly volume for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY_AVG": {"name": "WEEKLY_OCCUPANCY_AVG", "description": "Average weekly occupancy for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_SPEED_AVG": {"name": "WEEKLY_SPEED_AVG", "description": "Flow-weighted average weekly speed for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "Weekly vehicle miles traveled for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Weekly vehicle hours traveled for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Weekly Q value (average speed) for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "Weekly travel time index for the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.871224, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_weekly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        district,\r\n        sample_week,\r\n        sum(weekly_volume) as weekly_volume_sum,\r\n        avg(weekly_occupancy) as weekly_occupancy_avg,\r\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\r\n        sum(weekly_vmt) as weekly_vmt,\r\n        sum(weekly_vht) as weekly_vht,\r\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\r\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\r\n    from station_weekly_data\r\n    group by\r\n        district, sample_week\r\n)\r\n\r\nselect * from spatial_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_weekly_district.sql", "compiled": true, "compiled_code": "\n\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        district,\n        sample_week,\n        sum(weekly_volume) as weekly_volume_sum,\n        avg(weekly_occupancy) as weekly_occupancy_avg,\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\n        sum(weekly_vmt) as weekly_vmt,\n        sum(weekly_vht) as weekly_vht,\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\n    from station_weekly_data\n    group by\n        district, sample_week\n)\n\nselect * from spatial_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_agg_weekly.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_agg_weekly"], "alias": "performance__station_bottleneck_agg_weekly", "checksum": {"name": "sha256", "checksum": "3cf1d627ebe36e5da8bd8dcd60ddca6dcf55df279eb23d25cb48765e8626c38a"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly bottleneck metrics aggregated by station, including location and county.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_week": {"name": "sample_week", "description": "Week of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "weekly_active_days": {"name": "weekly_active_days", "description": "Number of active days in the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "weekly_time_shift_duration": {"name": "weekly_time_shift_duration", "description": "Duration of time shift in the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "weekly_time_shift_extent": {"name": "weekly_time_shift_extent", "description": "Extent of time shift in the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.836343, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_agg_weekly", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith weekly_bottleneck_delay as (\r\n    select\r\n        station_id,\r\n        sample_week,\r\n        time_shift,\r\n        cast(district as int) as district,\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        weekly_time_shift_duration,\r\n        weekly_active_days,\r\n        weekly_time_shift_extent,\r\n        county\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_weekly') }}\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('weekly_bottleneck_delay') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_agg_weekly.sql", "compiled": true, "compiled_code": "\n\nwith weekly_bottleneck_delay as (\n    select\n        station_id,\n        sample_week,\n        time_shift,\n        cast(district as int) as district,\n        station_type,\n        freeway,\n        direction,\n        absolute_postmile,\n        weekly_time_shift_duration,\n        weekly_active_days,\n        weekly_time_shift_extent,\n        county\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_weekly\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            weekly_bottleneck_delay.*,\n            c.county_name,\n            c.county_abb\n        from weekly_bottleneck_delay\n        inner join county as c\n        on weekly_bottleneck_delay.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_agg_recent_one_week", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_agg_recent_one_week.sql", "original_file_path": "models/marts/performance/performance__station_agg_recent_one_week.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_agg_recent_one_week"], "alias": "performance__station_agg_recent_one_week", "checksum": {"name": "sha256", "checksum": "f3b240bc5f9897c015455a7828e48c7e4bd7597258d6755b9a9aaeb4d58ac77a"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Hourly aggregation of volume, vmt, and vht for HOV and mainline pairs for recent one week.\nThis model calculated HOV volume, vmt and vht penetration using corresponding\nmainline station. The corresponding mainline station of HOV station was\ndetermined based on proximity, and direction.\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_CATEGORY": {"name": "HOURLY_CATEGORY", "description": "24-hrs have been catagorized as am peak (6-10 am), am off peak (10 am to 3 pm), pm peak (3 pm to 7 pm) and pm off peak (7 pm to  6am).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_NAME": {"name": "HOV_NAME", "description": "Name of the HOV street.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_STATION_ID": {"name": "HOV_STATION_ID", "description": "An integer value that uniquely indentifies of a HOV station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOUR_DAY": {"name": "HOUR_DAY", "description": "Hour of day varies from 0 to 23.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_LATITUDE": {"name": "HOV_LATITUDE", "description": "latitude of HOV station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_LONGITUDE": {"name": "HOV_LONGITUDE", "description": "longitude of HOV station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_LENGTH_AVG": {"name": "HOV_LENGTH_AVG", "description": "Length of HOV station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_ABSOLUTE_POSTMILE": {"name": "HOV_ABSOLUTE_POSTMILE", "description": "Absolute postmile of HOV station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The sample collection date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_HOUR": {"name": "SAMPLE_HOUR", "description": "The sample collection hour with date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKDAY": {"name": "WEEKDAY", "description": "The day of week when the data was collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKDAY_STATUS": {"name": "WEEKDAY_STATUS", "description": "Identify weather the data was collected in weekday or weekend.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_HOURLY_AVERAGE_VHT": {"name": "HOV_HOURLY_AVERAGE_VHT", "description": "Hourly average HOV station vht.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_HOURLY_AVERAGE_VMT": {"name": "HOV_HOURLY_AVERAGE_VMT", "description": "Hourly average HOV station vmt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_HOURLY_AVERAGE_VOLUME": {"name": "HOV_HOURLY_AVERAGE_VOLUME", "description": "Hourly average HOV station volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HOURLY_AVERAGE_VHT": {"name": "ML_HOURLY_AVERAGE_VHT", "description": "Hourly average mainline station vht.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HOURLY_AVERAGE_VMT": {"name": "ML_HOURLY_AVERAGE_VMT", "description": "Hourly average mainline station vmt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HOURLY_AVERAGE_VOLUME": {"name": "ML_HOURLY_AVERAGE_VOLUME", "description": "Hourly average mainline station volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_VHT_PENETRATION": {"name": "HOV_VHT_PENETRATION", "description": "The ratio of HOV houlry average vht to mainline houlry average vht. it is expressed as percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_VMT_PENETRATION": {"name": "HOV_VMT_PENETRATION", "description": "The ratio of HOV houlry average vmt to mainline houlry average vmt. it is expressed as percentage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOV_VOLUME_PENETRATION": {"name": "HOV_VOLUME_PENETRATION", "description": "The ratio of HOV houlry average volume to mainline houlry average volume. it is expressed as percentage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_other.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.84704, "relation_name": "ANALYTICS_PRD.performance.performance__station_agg_recent_one_week", "raw_code": "with station_meta as (\r\n    select * from {{ ref('int_vds__active_stations') }}\r\n    where active_date >= dateadd('day', -8, current_date())\r\n),\r\n\r\nstation_county as (\r\n    {{ get_county_name('station_meta') }}\r\n),\r\n\r\nstation_pairs as (\r\n    select\r\n        ml.station_id as ml_station_id,\r\n        ml.district,\r\n        ml.city,\r\n        ml.county,\r\n        ml.freeway,\r\n        ml.direction,\r\n        ml.absolute_postmile as ml_absolute_postmile,\r\n        ml.physical_lanes as ml_lanes,\r\n        ml.active_date,\r\n        hov.station_id as hov_station_id,\r\n        hov.name as hov_name,\r\n        hov.latitude as hov_latitude,\r\n        hov.longitude as hov_longitude,\r\n        hov.absolute_postmile as hov_absolute_postmile,\r\n        hov.length as hov_length,\r\n        hov.physical_lanes as hov_lanes,\r\n        abs(ml.absolute_postmile - hov.absolute_postmile) as delta_postmile\r\n    from\r\n        station_county as ml\r\n    inner join\r\n        station_county as hov\r\n        on\r\n            ml.freeway = hov.freeway\r\n            and ml.direction = hov.direction\r\n            and ml.active_date = hov.active_date\r\n            and ml.station_id != hov.station_id\r\n            and ml.station_type = 'ML'\r\n            and hov.station_type = 'HV'\r\n            and ml.district != 4\r\n            and hov.district != 4\r\n),\r\n\r\nclosest_station_with_selection as (\r\n    select\r\n        *,\r\n        row_number() over (partition by ml_station_id, active_date order by delta_postmile asc) as distance_ranking\r\n    from station_pairs\r\n    where\r\n        delta_postmile <= 5\r\n    qualify\r\n        distance_ranking = 1\r\n),\r\n\r\nhourly_station_volume as (\r\n    select\r\n        station_id,\r\n        direction,\r\n        sample_date,\r\n        sample_hour,\r\n        hourly_volume,\r\n        hourly_vmt,\r\n        hourly_vht,\r\n        station_type\r\n    from {{ ref('int_performance__station_metrics_agg_hourly') }}\r\n    where sample_date >= dateadd('day', -8, current_date())\r\n),\r\n\r\n/*\r\n * Join station metadata pairs with hourly observations. This could be\r\n * expressed more naturally with 2 joins, 1 for ML stations and 1 for HOV,\r\n * but doing so incurs a significant performance cost. Instead, we have a\r\n * more permissive join and an aggregation.\r\n */\r\nstation_with_ml_hov_metrics as (\r\n    select\r\n        css.*,\r\n        hourly.sample_date,\r\n        hourly.sample_hour,\r\n        max(case when hourly.station_type = 'ML' then hourly.hourly_volume end) as ml_hourly_volume,\r\n        max(case when hourly.station_type = 'ML' then hourly.hourly_vmt end) as ml_hourly_vmt,\r\n        max(case when hourly.station_type = 'ML' then hourly.hourly_vht end) as ml_hourly_vht,\r\n        max(case when hourly.station_type = 'HV' then hourly.hourly_volume end) as hov_hourly_volume,\r\n        max(case when hourly.station_type = 'HV' then hourly.hourly_vmt end) as hov_hourly_vmt,\r\n        max(case when hourly.station_type = 'HV' then hourly.hourly_vht end) as hov_hourly_vht\r\n    from closest_station_with_selection as css\r\n    inner join hourly_station_volume as hourly\r\n        on\r\n            (css.ml_station_id = hourly.station_id or css.hov_station_id = hourly.station_id)\r\n            and css.direction = hourly.direction\r\n            and css.active_date = hourly.sample_date\r\n    group by all\r\n),\r\n\r\nstation_metric_agg as (\r\n    select\r\n        hov_station_id,\r\n        hov_name,\r\n        hov_latitude,\r\n        hov_longitude,\r\n        avg(hov_length) as hov_length_avg,\r\n        max(hov_absolute_postmile) as hov_absolute_postmile,\r\n        district,\r\n        city,\r\n        county,\r\n        freeway,\r\n        direction,\r\n        sample_date,\r\n        sample_hour,\r\n        (sum(ml_hourly_volume) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_volume,\r\n        (sum(ml_hourly_vmt) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_vmt,\r\n        (sum(ml_hourly_vht) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_vht,\r\n        (sum(hov_hourly_volume) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_volume,\r\n        (sum(hov_hourly_vmt) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_vmt,\r\n        (sum(hov_hourly_vht) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_vht,\r\n        (sum(hov_hourly_volume) / nullif(sum(ml_hourly_volume), 0)) * 100 as hov_volume_penetration,\r\n        (sum(hov_hourly_vmt) / nullif(sum(ml_hourly_vmt), 0)) * 100 as hov_vmt_penetration,\r\n        (sum(hov_hourly_vht) / nullif(sum(ml_hourly_vht), 0)) * 100 as hov_vht_penetration\r\n    from station_with_ml_hov_metrics\r\n    group by\r\n        hov_station_id,\r\n        hov_name,\r\n        hov_latitude,\r\n        hov_longitude,\r\n        district,\r\n        city,\r\n        county,\r\n        freeway,\r\n        direction,\r\n        sample_date,\r\n        sample_hour\r\n),\r\n\r\nfinal_data_with_category as (\r\n    select\r\n        station_metric_agg.*,\r\n\r\n        -- Hourly Category (Based on peak/off-peak periods)\r\n        case\r\n            -- AM Peak\r\n            when\r\n                to_time(station_metric_agg.sample_hour) between to_time({{ var(\"am_peak_start\") }}) and to_time(\r\n                    {{ var(\"am_peak_end\") }}\r\n                )\r\n                then 'am_peak'\r\n\r\n            -- Day Off-Peak\r\n            when\r\n                to_time(station_metric_agg.sample_hour) between to_time({{ var(\"day_off_peak_start\") }}) and to_time(\r\n                    {{ var(\"day_off_peak_end\") }}\r\n                )\r\n                then 'day_off_peak'\r\n\r\n            -- PM Peak\r\n            when\r\n                to_time(station_metric_agg.sample_hour) between to_time({{ var(\"pm_peak_start\") }}) and to_time(\r\n                    {{ var(\"pm_peak_end\") }}\r\n                )\r\n                then 'pm_peak'\r\n\r\n            -- Night Off-Peak (default)\r\n            else 'night_off_peak'\r\n        end as hourly_category,\r\n\r\n        -- Weekday/Weekend Category\r\n        case\r\n            when dayofweek(station_metric_agg.sample_date) in (1, 2, 3, 4, 5) then 'Weekday'\r\n            else 'Weekend'\r\n        end as weekday_status,\r\n\r\n        -- Day of the Week Name\r\n        case\r\n            when station_metric_agg.sample_date is null then 'No Date'\r\n            when dayofweek(station_metric_agg.sample_date) = 0 then 'Sunday'\r\n            when dayofweek(station_metric_agg.sample_date) = 1 then 'Monday'\r\n            when dayofweek(station_metric_agg.sample_date) = 2 then 'Tuesday'\r\n            when dayofweek(station_metric_agg.sample_date) = 3 then 'Wednesday'\r\n            when dayofweek(station_metric_agg.sample_date) = 4 then 'Thursday'\r\n            when dayofweek(station_metric_agg.sample_date) = 5 then 'Friday'\r\n            when dayofweek(station_metric_agg.sample_date) = 6 then 'Saturday'\r\n            else 'Unknown' -- This should not normally happen\r\n        end as weekday\r\n    from station_metric_agg\r\n)\r\n\r\nselect\r\n    *,\r\n    extract(hour from sample_hour) as hour_day\r\nfrom final_data_with_category", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__active_stations", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "int_performance__station_metrics_agg_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_agg_recent_one_week.sql", "compiled": true, "compiled_code": "with station_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__active_stations\n    where active_date >= dateadd('day', -8, current_date())\n),\n\nstation_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            station_meta.*,\n            c.county_name,\n            c.county_abb\n        from station_meta\n        inner join county as c\n        on station_meta.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nstation_pairs as (\n    select\n        ml.station_id as ml_station_id,\n        ml.district,\n        ml.city,\n        ml.county,\n        ml.freeway,\n        ml.direction,\n        ml.absolute_postmile as ml_absolute_postmile,\n        ml.physical_lanes as ml_lanes,\n        ml.active_date,\n        hov.station_id as hov_station_id,\n        hov.name as hov_name,\n        hov.latitude as hov_latitude,\n        hov.longitude as hov_longitude,\n        hov.absolute_postmile as hov_absolute_postmile,\n        hov.length as hov_length,\n        hov.physical_lanes as hov_lanes,\n        abs(ml.absolute_postmile - hov.absolute_postmile) as delta_postmile\n    from\n        station_county as ml\n    inner join\n        station_county as hov\n        on\n            ml.freeway = hov.freeway\n            and ml.direction = hov.direction\n            and ml.active_date = hov.active_date\n            and ml.station_id != hov.station_id\n            and ml.station_type = 'ML'\n            and hov.station_type = 'HV'\n            and ml.district != 4\n            and hov.district != 4\n),\n\nclosest_station_with_selection as (\n    select\n        *,\n        row_number() over (partition by ml_station_id, active_date order by delta_postmile asc) as distance_ranking\n    from station_pairs\n    where\n        delta_postmile <= 5\n    qualify\n        distance_ranking = 1\n),\n\nhourly_station_volume as (\n    select\n        station_id,\n        direction,\n        sample_date,\n        sample_hour,\n        hourly_volume,\n        hourly_vmt,\n        hourly_vht,\n        station_type\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_hourly\n    where sample_date >= dateadd('day', -8, current_date())\n),\n\n/*\n * Join station metadata pairs with hourly observations. This could be\n * expressed more naturally with 2 joins, 1 for ML stations and 1 for HOV,\n * but doing so incurs a significant performance cost. Instead, we have a\n * more permissive join and an aggregation.\n */\nstation_with_ml_hov_metrics as (\n    select\n        css.*,\n        hourly.sample_date,\n        hourly.sample_hour,\n        max(case when hourly.station_type = 'ML' then hourly.hourly_volume end) as ml_hourly_volume,\n        max(case when hourly.station_type = 'ML' then hourly.hourly_vmt end) as ml_hourly_vmt,\n        max(case when hourly.station_type = 'ML' then hourly.hourly_vht end) as ml_hourly_vht,\n        max(case when hourly.station_type = 'HV' then hourly.hourly_volume end) as hov_hourly_volume,\n        max(case when hourly.station_type = 'HV' then hourly.hourly_vmt end) as hov_hourly_vmt,\n        max(case when hourly.station_type = 'HV' then hourly.hourly_vht end) as hov_hourly_vht\n    from closest_station_with_selection as css\n    inner join hourly_station_volume as hourly\n        on\n            (css.ml_station_id = hourly.station_id or css.hov_station_id = hourly.station_id)\n            and css.direction = hourly.direction\n            and css.active_date = hourly.sample_date\n    group by all\n),\n\nstation_metric_agg as (\n    select\n        hov_station_id,\n        hov_name,\n        hov_latitude,\n        hov_longitude,\n        avg(hov_length) as hov_length_avg,\n        max(hov_absolute_postmile) as hov_absolute_postmile,\n        district,\n        city,\n        county,\n        freeway,\n        direction,\n        sample_date,\n        sample_hour,\n        (sum(ml_hourly_volume) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_volume,\n        (sum(ml_hourly_vmt) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_vmt,\n        (sum(ml_hourly_vht) / nullif(sum(ml_lanes), 0)) as ml_hourly_average_vht,\n        (sum(hov_hourly_volume) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_volume,\n        (sum(hov_hourly_vmt) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_vmt,\n        (sum(hov_hourly_vht) / nullif(sum(hov_lanes), 0)) as hov_hourly_average_vht,\n        (sum(hov_hourly_volume) / nullif(sum(ml_hourly_volume), 0)) * 100 as hov_volume_penetration,\n        (sum(hov_hourly_vmt) / nullif(sum(ml_hourly_vmt), 0)) * 100 as hov_vmt_penetration,\n        (sum(hov_hourly_vht) / nullif(sum(ml_hourly_vht), 0)) * 100 as hov_vht_penetration\n    from station_with_ml_hov_metrics\n    group by\n        hov_station_id,\n        hov_name,\n        hov_latitude,\n        hov_longitude,\n        district,\n        city,\n        county,\n        freeway,\n        direction,\n        sample_date,\n        sample_hour\n),\n\nfinal_data_with_category as (\n    select\n        station_metric_agg.*,\n\n        -- Hourly Category (Based on peak/off-peak periods)\n        case\n            -- AM Peak\n            when\n                to_time(station_metric_agg.sample_hour) between to_time('06:00:00') and to_time(\n                    '09:59:59'\n                )\n                then 'am_peak'\n\n            -- Day Off-Peak\n            when\n                to_time(station_metric_agg.sample_hour) between to_time('10:00:00') and to_time(\n                    '14:59:59'\n                )\n                then 'day_off_peak'\n\n            -- PM Peak\n            when\n                to_time(station_metric_agg.sample_hour) between to_time('15:00:00') and to_time(\n                    '18:59:59'\n                )\n                then 'pm_peak'\n\n            -- Night Off-Peak (default)\n            else 'night_off_peak'\n        end as hourly_category,\n\n        -- Weekday/Weekend Category\n        case\n            when dayofweek(station_metric_agg.sample_date) in (1, 2, 3, 4, 5) then 'Weekday'\n            else 'Weekend'\n        end as weekday_status,\n\n        -- Day of the Week Name\n        case\n            when station_metric_agg.sample_date is null then 'No Date'\n            when dayofweek(station_metric_agg.sample_date) = 0 then 'Sunday'\n            when dayofweek(station_metric_agg.sample_date) = 1 then 'Monday'\n            when dayofweek(station_metric_agg.sample_date) = 2 then 'Tuesday'\n            when dayofweek(station_metric_agg.sample_date) = 3 then 'Wednesday'\n            when dayofweek(station_metric_agg.sample_date) = 4 then 'Thursday'\n            when dayofweek(station_metric_agg.sample_date) = 5 then 'Friday'\n            when dayofweek(station_metric_agg.sample_date) = 6 then 'Saturday'\n            else 'Unknown' -- This should not normally happen\n        end as weekday\n    from station_metric_agg\n)\n\nselect\n    *,\n    extract(hour from sample_hour) as hour_day\nfrom final_data_with_category", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_yearly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_yearly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_yearly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_yearly_county"], "alias": "performance__station_metrics_agg_yearly_county", "checksum": {"name": "sha256", "checksum": "2a54cf0901105e7498da5510dcde53e03d4e2e8111f9152d3a9cd16e9645f3de"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume, occupancy and speed across all lanes aggregated by counties. This metrics will\nmeasure the yearly performance of the state highway system.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The associated year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VOLUME_SUM": {"name": "YEARLY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\nby counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_SPEED_AVG": {"name": "YEARLY_SPEED_AVG", "description": "flow weighted yearly speed across all the lanes aggregated by counties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_OCCUPANCY_AVG": {"name": "YEARLY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\naggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VMT": {"name": "YEARLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given year and a given section of\nthe freeway across all the lanes aggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VHT": {"name": "YEARLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given year and a\ngiven section of freeway across all the lanes aggregated by counties. VHT is the amount of time spent\nby all of the vehicles on the freeway in a given year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_TTI": {"name": "YEARLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_Q_VALUE": {"name": "YEARLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given year across all the lanes. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8873975, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_yearly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- now aggregate yearly volume, occupancy and speed to yearly\r\nspatial_metrics as (\r\n    select\r\n        county,\r\n        sample_year,\r\n        sum(yearly_volume) as yearly_volume_sum,\r\n        avg(yearly_occupancy) as yearly_occupancy_avg,\r\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\r\n        sum(yearly_vmt) as yearly_vmt,\r\n        sum(yearly_vht) as yearly_vht,\r\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\r\n    from station_yearly_data\r\n    group by\r\n        county, sample_year\r\n),\r\n\r\nspatial_metricsc as (\r\n    {{ get_county_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from spatial_metricsc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_yearly_county.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- now aggregate yearly volume, occupancy and speed to yearly\nspatial_metrics as (\n    select\n        county,\n        sample_year,\n        sum(yearly_volume) as yearly_volume_sum,\n        avg(yearly_occupancy) as yearly_occupancy_avg,\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\n        sum(yearly_vmt) as yearly_vmt,\n        sum(yearly_vht) as yearly_vht,\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\n        -- travel time\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\n    from station_yearly_data\n    group by\n        county, sample_year\n),\n\nspatial_metricsc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            spatial_metrics.*,\n            c.county_name,\n            c.county_abb\n        from spatial_metrics\n        inner join county as c\n        on spatial_metrics.county = c.county_id\n    )\n\n    select * from station_with_county\n\n)\n\nselect * from spatial_metricsc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_monthly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_monthly"], "alias": "performance__station_metrics_unpivot_agg_monthly", "checksum": {"name": "sha256", "checksum": "86545cb4fd0cd434a28703a78d9a23003f9826094fbef3f8d93ba6075154ff2a"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "monthly aggregation of volume,speed, and occupancy along with delays and lost productivity by\nacross all lanes of the station. This metrics will measure the monthly performance\nof the state highway system. This can be used to understand the SHS performance\nfrom month to month.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The starting date of each month of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "monthly delay for different threshold of congestion speed such as 35, 40, 45, 50, 55 and 60 mph\nacross all the lanes.\nThe Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the monthly lost productivity that is simply sum up all days\nlost productivity in a given month of the year timeperiod across all the lanes.\nThe lost Productivity performance metric is\nthe number of lane-mile-month on the freeway lost due to operating under congested\nconditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8219428, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_monthly", "raw_code": "{{ config(materialized='table') }}\n\nwith monthly as (\n    select * from {{ ref('int_performance__station_metrics_agg_monthly') }}\n),\n\nmonthlyc as (\n    {{ get_county_name('monthly') }}\n),\n\nmonthlycc as (\n    {{ get_city_name('monthlyc') }}\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_month,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        {% for value in var(\"V_t\") %}\n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '{{ value }}' as target_speed,\n                delay_{{ value }}_mph as delay,\n                lost_productivity_{{ value }}_mph as lost_productivity\n            from\n                monthlycc\n            {% if not loop.last %} union all {% endif %}\n        {% endfor %}\n    ) as combined_metrics\n    group by\n        sample_month,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed\n)\n\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_monthly.sql", "compiled": true, "compiled_code": "\n\nwith monthly as (\n    select * from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n),\n\nmonthlyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            monthly.*,\n            c.county_name,\n            c.county_abb\n        from monthly\n        inner join county as c\n        on monthly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nmonthlycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from monthlyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n),\n\nunpivot_combined as (\n    select\n        station_id,\n        sample_month,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '35' as target_speed,\n                delay_35_mph as delay,\n                lost_productivity_35_mph as lost_productivity\n            from\n                monthlycc\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '40' as target_speed,\n                delay_40_mph as delay,\n                lost_productivity_40_mph as lost_productivity\n            from\n                monthlycc\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '45' as target_speed,\n                delay_45_mph as delay,\n                lost_productivity_45_mph as lost_productivity\n            from\n                monthlycc\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '50' as target_speed,\n                delay_50_mph as delay,\n                lost_productivity_50_mph as lost_productivity\n            from\n                monthlycc\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '55' as target_speed,\n                delay_55_mph as delay,\n                lost_productivity_55_mph as lost_productivity\n            from\n                monthlycc\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                length,\n                station_type,\n                district,\n                city,\n                city_abb,\n                city_name,\n                freeway,\n                direction,\n                county,\n                county_abb,\n                county_name,\n                '60' as target_speed,\n                delay_60_mph as delay,\n                lost_productivity_60_mph as lost_productivity\n            from\n                monthlycc\n            \n        \n    ) as combined_metrics\n    group by\n        sample_month,\n        station_id,\n        length,\n        station_type,\n        district,\n        city,\n        city_abb,\n        city_name,\n        freeway,\n        direction,\n        county,\n        county_abb,\n        county_name,\n        target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_yearly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_yearly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_yearly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_yearly_district"], "alias": "performance__station_metrics_unpivot_agg_yearly_district", "checksum": {"name": "sha256", "checksum": "af2af883d9972cf1d9d925a39b201724acc922be68a7ab428b42c56af2311a5e"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Yearly aggregation of delay and lost productivity by district and speed threshold.\n", "columns": {"district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_year": {"name": "sample_year", "description": "Year of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_speed": {"name": "target_speed", "description": "Speed threshold for delay/productivity calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delay": {"name": "delay", "description": "Total delay for the district and year at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lost_productivity": {"name": "lost_productivity", "description": "Total lost productivity for the district and year at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8295608, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_yearly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- aggregate delay and productivity by sample year\r\nspatial_metrics as (\r\n    select\r\n        district,\r\n        sample_year,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph) as delay_{{ value }}_mph,\r\n            sum(lost_productivity_{{ value }}_mph) as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_yearly_data\r\n    group by\r\n        district, sample_year\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        district,\r\n        sample_year,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                district,\r\n                sample_year,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                spatial_metrics\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        district, sample_year, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_yearly_district.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- aggregate delay and productivity by sample year\nspatial_metrics as (\n    select\n        district,\n        sample_year,\n        \n            sum(delay_35_mph) as delay_35_mph,\n            sum(lost_productivity_35_mph) as lost_productivity_35_mph\n            \n                ,\n            \n        \n            sum(delay_40_mph) as delay_40_mph,\n            sum(lost_productivity_40_mph) as lost_productivity_40_mph\n            \n                ,\n            \n        \n            sum(delay_45_mph) as delay_45_mph,\n            sum(lost_productivity_45_mph) as lost_productivity_45_mph\n            \n                ,\n            \n        \n            sum(delay_50_mph) as delay_50_mph,\n            sum(lost_productivity_50_mph) as lost_productivity_50_mph\n            \n                ,\n            \n        \n            sum(delay_55_mph) as delay_55_mph,\n            sum(lost_productivity_55_mph) as lost_productivity_55_mph\n            \n                ,\n            \n        \n            sum(delay_60_mph) as delay_60_mph,\n            sum(lost_productivity_60_mph) as lost_productivity_60_mph\n            \n        \n    from station_yearly_data\n    group by\n        district, sample_year\n),\n\nunpivot_combined as (\n    select\n        district,\n        sample_year,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                district,\n                sample_year,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                district,\n                sample_year,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                district,\n                sample_year,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                district,\n                sample_year,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                district,\n                sample_year,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                district,\n                sample_year,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n            \n        \n    ) as combined_metrics\n    group by\n        district, sample_year, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_weekly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_weekly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_weekly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_weekly_county"], "alias": "performance__station_metrics_agg_weekly_county", "checksum": {"name": "sha256", "checksum": "74cbafb08dd1e673ca86083db11168b74864c60fd46a4a336852a7cdd6541c03"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "weekly aggregation of volume, occupancy and speed across all lanes aggregated by counties. This metrics will\nmeasure the weekly performance of the state highway system. This can be used for monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME_SUM": {"name": "WEEKLY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\nby counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_SPEED_AVG": {"name": "WEEKLY_SPEED_AVG", "description": "flow weighted weekly speed across all the lanes aggregated by counties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY_AVG": {"name": "WEEKLY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\naggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\nthe freeway across all the lanes aggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes aggregated by counties. VHT is the amount of time spent\nby all of the vehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8703935, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_weekly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        county,\r\n        sample_week,\r\n        sum(weekly_volume) as weekly_volume_sum,\r\n        avg(weekly_occupancy) as weekly_occupancy_avg,\r\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\r\n        sum(weekly_vmt) as weekly_vmt,\r\n        sum(weekly_vht) as weekly_vht,\r\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\r\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\r\n    from station_weekly_data\r\n    group by\r\n        county, sample_week\r\n),\r\n\r\nweeklyc as (\r\n    {{ get_county_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from weeklyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_weekly_county.sql", "compiled": true, "compiled_code": "\n\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        county,\n        sample_week,\n        sum(weekly_volume) as weekly_volume_sum,\n        avg(weekly_occupancy) as weekly_occupancy_avg,\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\n        sum(weekly_vmt) as weekly_vmt,\n        sum(weekly_vht) as weekly_vht,\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\n    from station_weekly_data\n    group by\n        county, sample_week\n),\n\nweeklyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            spatial_metrics.*,\n            c.county_name,\n            c.county_abb\n        from spatial_metrics\n        inner join county as c\n        on spatial_metrics.county = c.county_id\n    )\n\n    select * from station_with_county\n\n)\n\nselect * from weeklyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_weekly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_weekly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_weekly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_weekly_city"], "alias": "performance__station_metrics_agg_weekly_city", "checksum": {"name": "sha256", "checksum": "8b3901de96161045679ae0e6d5c44ae5b05be9a540b3fac713f4003008e235be"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "weekly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics will\nmeasure the weekly performance of the state highway system. This can be used for monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME_SUM": {"name": "WEEKLY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\n  by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_SPEED_AVG": {"name": "WEEKLY_SPEED_AVG", "description": "flow weighted weekly speed across all the lanes aggregated by cities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY_AVG": {"name": "WEEKLY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\n  aggregated by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given week and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given week.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8694615, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_weekly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        city,\r\n        sample_week,\r\n        sum(weekly_volume) as weekly_volume_sum,\r\n        avg(weekly_occupancy) as weekly_occupancy_avg,\r\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\r\n        sum(weekly_vmt) as weekly_vmt,\r\n        sum(weekly_vht) as weekly_vht,\r\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\r\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\r\n    from station_weekly_data\r\n    where\r\n        city is not null\r\n    group by\r\n        city, sample_week\r\n),\r\n\r\nweeklyc as (\r\n    {{ get_city_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from weeklyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_weekly_city.sql", "compiled": true, "compiled_code": "\n\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        city,\n        sample_week,\n        sum(weekly_volume) as weekly_volume_sum,\n        avg(weekly_occupancy) as weekly_occupancy_avg,\n        sum(weekly_volume * weekly_speed) / nullifzero(sum(weekly_volume)) as weekly_speed_avg,\n        sum(weekly_vmt) as weekly_vmt,\n        sum(weekly_vht) as weekly_vht,\n        sum(weekly_vmt) / nullifzero(sum(weekly_vht)) as weekly_q_value,\n        60 / nullifzero(sum(weekly_q_value)) as weekly_tti\n    from station_weekly_data\n    where\n        city is not null\n    group by\n        city, sample_week\n),\n\nweeklyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from spatial_metrics as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from weeklyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_yearly_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_yearly_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_yearly_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_yearly_city"], "alias": "performance__station_metrics_agg_yearly_city", "checksum": {"name": "sha256", "checksum": "8fcb7113034a55a999de542658467c6f82f3dac723bc1f0605881faab21f8a32"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics will\nmeasure the yearly performance of the state highway system. This can be used for yearly and yearly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VOLUME_SUM": {"name": "YEARLY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\n  by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_SPEED_AVG": {"name": "YEARLY_SPEED_AVG", "description": "flow weighted yearly speed across all the lanes aggregated by cities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_OCCUPANCY_AVG": {"name": "YEARLY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\n  aggregated by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VMT": {"name": "YEARLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given year and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VHT": {"name": "YEARLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given year and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_TTI": {"name": "YEARLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_Q_VALUE": {"name": "YEARLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given year across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8864863, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_yearly_city", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- now aggregate yearly volume, occupancy and speed to yearly\r\nspatial_metrics as (\r\n    select\r\n        city,\r\n        sample_year,\r\n        sum(yearly_volume) as yearly_volume_sum,\r\n        avg(yearly_occupancy) as yearly_occupancy_avg,\r\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\r\n        sum(yearly_vmt) as yearly_vmt,\r\n        sum(yearly_vht) as yearly_vht,\r\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\r\n    from station_yearly_data\r\n    where\r\n        city is not null\r\n    group by\r\n        city, sample_year\r\n),\r\n\r\nyearlyc as (\r\n    {{ get_city_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from yearlyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_yearly_city.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- now aggregate yearly volume, occupancy and speed to yearly\nspatial_metrics as (\n    select\n        city,\n        sample_year,\n        sum(yearly_volume) as yearly_volume_sum,\n        avg(yearly_occupancy) as yearly_occupancy_avg,\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\n        sum(yearly_vmt) as yearly_vmt,\n        sum(yearly_vht) as yearly_vht,\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\n        -- travel time\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\n    from station_yearly_data\n    where\n        city is not null\n    group by\n        city, sample_year\n),\n\nyearlyc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from spatial_metrics as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from yearlyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_weekly.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_weekly"], "alias": "performance__station_metrics_agg_weekly", "checksum": {"name": "sha256", "checksum": "0694b782bb1685ee8f15b2d468a08225cda4231cb3fa33769f259933c2a02ede"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_week_start_date)))"}, "tags": [], "description": "weekly aggregation of volume, occupancy and speed across all lanes of the station. This metrics will\nmeasure the weekly performance of the state highway system. This can be used for monthly and yearly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "The first date of each week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME": {"name": "WEEKLY_VOLUME", "description": "The sum of the flow values for a station over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_SPEED": {"name": "WEEKLY_SPEED", "description": "flow weighted weekly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY": {"name": "WEEKLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given week and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_week_start_date)))\"))"}, "created_at": 1755632023.8674765, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_weekly", "raw_code": "{{ config(\n    materialized=\"table\",\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_week_start_date)))\",\n) }}\n\nwith weekly as (\n    select\n        station_id,\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        weekly_volume,\n        weekly_occupancy,\n        weekly_speed,\n        weekly_vmt,\n        weekly_vht,\n        weekly_q_value,\n        weekly_tti,\n        county\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\n),\n\nweeklyc as (\n    {{ get_county_name('weekly') }}\n),\n\nweeklycc as (\n    {{ get_city_name('weeklyc') }}\n)\n\nselect * from weeklycc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_weekly.sql", "compiled": true, "compiled_code": "\n\nwith weekly as (\n    select\n        station_id,\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        length,\n        station_type,\n        district,\n        city,\n        freeway,\n        direction,\n        weekly_volume,\n        weekly_occupancy,\n        weekly_speed,\n        weekly_vmt,\n        weekly_vht,\n        weekly_q_value,\n        weekly_tti,\n        county\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\nweeklyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            weekly.*,\n            c.county_name,\n            c.county_abb\n        from weekly\n        inner join county as c\n        on weekly.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nweeklycc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from weeklyc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from weeklycc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_agg_daily.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_agg_daily"], "alias": "performance__station_bottleneck_agg_daily", "checksum": {"name": "sha256", "checksum": "8e51aa0881f34c10f298701c6bba36d19f3cb62c9f7bd98360af36e76b04e788"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "Daily bottleneck metrics aggregated by station, including location and county.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "Date of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_time_shift_duration": {"name": "daily_time_shift_duration", "description": "Duration of time shift in the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_time_shift_bottleneck_extent": {"name": "daily_time_shift_bottleneck_extent", "description": "Extent of bottleneck in the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632023.838394, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_agg_daily", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\r\n) }}\r\n\r\n\r\nwith daily_bottleneck as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        time_shift,\r\n        cast(district as int) as district,\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        daily_time_shift_duration,\r\n        daily_time_shift_bottleneck_extent,\r\n        county\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_daily') }}\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('daily_bottleneck') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_agg_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith daily_bottleneck as (\n    select\n        station_id,\n        sample_date,\n        time_shift,\n        cast(district as int) as district,\n        station_type,\n        freeway,\n        direction,\n        absolute_postmile,\n        daily_time_shift_duration,\n        daily_time_shift_bottleneck_extent,\n        county\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_daily\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            daily_bottleneck.*,\n            c.county_name,\n            c.county_abb\n        from daily_bottleneck\n        inner join county as c\n        on daily_bottleneck.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__unpivot_agg_yearly_freeway_type_direction": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__unpivot_agg_yearly_freeway_type_direction", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__unpivot_agg_yearly_freeway_type_direction.sql", "original_file_path": "models/marts/performance/performance__unpivot_agg_yearly_freeway_type_direction.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__unpivot_agg_yearly_freeway_type_direction", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__unpivot_agg_yearly_freeway_type_direction"], "alias": "performance__unpivot_agg_yearly_freeway_type_direction", "checksum": {"name": "sha256", "checksum": "ed8e0980ff35c1867a9fe27c3eea8b651923fe7a82ca31c1fb07be5143ff3caa"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "yearly aggregation of volume,speed, and occupancy along with delays and lost productivity by\nacross freeway, type and direction. This metrics will measure the yearly performance\nof the state highway system. This can be used to understand the SHS performance\nin perspective of spatial variation.\n", "columns": {"STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The sample collection year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across freeway, direction and type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "yearly delay for different threshold of congestion speed such as 35, 40, 45, 50, 55 and 60 mph\nacross freeway, direction and type.\nThe Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the yearly lost productivity that is simply sum up all days\nlost productivity in a given month of the year timeperiod across caltrans district.\nThe lost Productivity performance metric is\nthe number of lane-mile-month on the freeway lost due to operating under congested\nconditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_other.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.839324, "relation_name": "ANALYTICS_PRD.performance.performance__unpivot_agg_yearly_freeway_type_direction", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nspatial_metrics as (\r\n    select\r\n        sample_year,\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph) as delay_{{ value }}_mph,\r\n            sum(lost_productivity_{{ value }}_mph) as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_yearly_data\r\n    group by\r\n        sample_year, freeway, station_type, direction\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        sample_year,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                station_type,\r\n                freeway,\r\n                direction,\r\n                sample_year,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                spatial_metrics\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        sample_year, freeway, station_type, direction, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__unpivot_agg_yearly_freeway_type_direction.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nspatial_metrics as (\n    select\n        sample_year,\n        station_type,\n        freeway,\n        direction,\n        \n            sum(delay_35_mph) as delay_35_mph,\n            sum(lost_productivity_35_mph) as lost_productivity_35_mph\n            \n                ,\n            \n        \n            sum(delay_40_mph) as delay_40_mph,\n            sum(lost_productivity_40_mph) as lost_productivity_40_mph\n            \n                ,\n            \n        \n            sum(delay_45_mph) as delay_45_mph,\n            sum(lost_productivity_45_mph) as lost_productivity_45_mph\n            \n                ,\n            \n        \n            sum(delay_50_mph) as delay_50_mph,\n            sum(lost_productivity_50_mph) as lost_productivity_50_mph\n            \n                ,\n            \n        \n            sum(delay_55_mph) as delay_55_mph,\n            sum(lost_productivity_55_mph) as lost_productivity_55_mph\n            \n                ,\n            \n        \n            sum(delay_60_mph) as delay_60_mph,\n            sum(lost_productivity_60_mph) as lost_productivity_60_mph\n            \n        \n    from station_yearly_data\n    group by\n        sample_year, freeway, station_type, direction\n),\n\nunpivot_combined as (\n    select\n        station_type,\n        freeway,\n        direction,\n        sample_year,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n             union all \n        \n            select\n                station_type,\n                freeway,\n                direction,\n                sample_year,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                spatial_metrics\n            \n        \n    ) as combined_metrics\n    group by\n        sample_year, freeway, station_type, direction, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_unpivot_agg_weekly_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_unpivot_agg_weekly_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_unpivot_agg_weekly_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_unpivot_agg_weekly_county"], "alias": "performance__station_metrics_unpivot_agg_weekly_county", "checksum": {"name": "sha256", "checksum": "bd66c68ee18870b3b8018fd7589d76e7d94e9de5f2c4c8ea5676aa9cf2c031e9"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "weekly aggregation of delay and productivity across all lanes aggregated by counties. This metrics will\nmeasure the weekly delay and lost productivity of the state highway system. This can be used for\nmonthly aggregation of PeMS performance metrics across all the couties.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "The first date of each week associated with the date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TARGET_SPEED": {"name": "TARGET_SPEED", "description": "Thresholds of congestion speed such as 35, 40, 45, 50, 55 and 60 mph across all the lanes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY": {"name": "DELAY", "description": "weekly delay aggregated by cities for different target speed thresholds across all the lanes.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY": {"name": "LOST_PRODUCTIVITY", "description": "This is the weekly lost productivity that is simply sum up 24 hours\nlost productivity in a given day timeperiod across all the lanes. The lost productivity\nperformance metric is the number of lane-mile-days on the freeway lost due to operating under\n congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8198192, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_unpivot_agg_weekly_county", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed weekly level data\r\nwith station_weekly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_weekly') }}\r\n),\r\n\r\nweeklyc as (\r\n    {{ get_county_name('station_weekly_data') }}\r\n),\r\n\r\nunpivot_combined as (\r\n    select\r\n        county,\r\n        county_abb,\r\n        county_name,\r\n        sample_week,\r\n        sample_week_start_date,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay,\r\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                county,\r\n                county_abb,\r\n                county_name,\r\n                sample_week,\r\n                sample_week_start_date,\r\n                '{{ value }}' as target_speed,\r\n                nullif(delay_{{ value }}_mph, 0) as delay,\r\n                nullif(lost_productivity_{{ value }}_mph, 0) as lost_productivity\r\n            from\r\n                weeklyc\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        county, county_abb, county_name, sample_week, sample_week_start_date, target_speed\r\n)\r\n\r\nselect * from unpivot_combined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_weekly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_unpivot_agg_weekly_county.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed weekly level data\nwith station_weekly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly\n),\n\nweeklyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            station_weekly_data.*,\n            c.county_name,\n            c.county_abb\n        from station_weekly_data\n        inner join county as c\n        on station_weekly_data.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nunpivot_combined as (\n    select\n        county,\n        county_abb,\n        county_name,\n        sample_week,\n        sample_week_start_date,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay,\n        sum(coalesce(lost_productivity, 0)) as lost_productivity\n    from (\n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '35' as target_speed,\n                nullif(delay_35_mph, 0) as delay,\n                nullif(lost_productivity_35_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '40' as target_speed,\n                nullif(delay_40_mph, 0) as delay,\n                nullif(lost_productivity_40_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '45' as target_speed,\n                nullif(delay_45_mph, 0) as delay,\n                nullif(lost_productivity_45_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '50' as target_speed,\n                nullif(delay_50_mph, 0) as delay,\n                nullif(lost_productivity_50_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '55' as target_speed,\n                nullif(delay_55_mph, 0) as delay,\n                nullif(lost_productivity_55_mph, 0) as lost_productivity\n            from\n                weeklyc\n             union all \n        \n            select\n                county,\n                county_abb,\n                county_name,\n                sample_week,\n                sample_week_start_date,\n                '60' as target_speed,\n                nullif(delay_60_mph, 0) as delay,\n                nullif(lost_productivity_60_mph, 0) as lost_productivity\n            from\n                weeklyc\n            \n        \n    ) as combined_metrics\n    group by\n        county, county_abb, county_name, sample_week, sample_week_start_date, target_speed\n)\n\nselect * from unpivot_combined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_daily_county", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_daily_county.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_daily_county.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_daily_county"], "alias": "performance__station_metrics_agg_daily_county", "checksum": {"name": "sha256", "checksum": "580b295785cb2cee82d5ab33c25eeff9b441746c755fe22f0c730dcf7c2962c6"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of volume, occupancy and speed across all lanes aggregated by counties. This metrics will\nmeasure the daily performance of the state highway system. This can be used for weekly and monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME_SUM": {"name": "DAILY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\nby counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED_AVG": {"name": "DAILY_SPEED_AVG", "description": "flow weighted daily speed across all the lanes aggregated by counties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY_AVG": {"name": "DAILY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\naggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\nthe freeway across all the lanes aggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes aggregated by counties. VHT is the amount of time spent\nby all of the vehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8629062, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_daily_county", "raw_code": "with station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to daily\r\nspatial_metrics as (\r\n    select\r\n        county,\r\n        sample_date,\r\n        sum(daily_volume) as daily_volume_sum,\r\n        avg(daily_occupancy) as daily_occupancy_avg,\r\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\r\n        sum(daily_vmt) as daily_vmt,\r\n        sum(daily_vht) as daily_vht,\r\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\r\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\r\n    from station_daily_data\r\n    group by\r\n        county, sample_date\r\n),\r\n\r\ndailyc as (\r\n    {{ get_county_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from dailyc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_daily_county.sql", "compiled": true, "compiled_code": "with station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\n-- now aggregate daily volume, occupancy and speed to daily\nspatial_metrics as (\n    select\n        county,\n        sample_date,\n        sum(daily_volume) as daily_volume_sum,\n        avg(daily_occupancy) as daily_occupancy_avg,\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\n        sum(daily_vmt) as daily_vmt,\n        sum(daily_vht) as daily_vht,\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\n    from station_daily_data\n    group by\n        county, sample_date\n),\n\ndailyc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            spatial_metrics.*,\n            c.county_name,\n            c.county_abb\n        from spatial_metrics\n        inner join county as c\n        on spatial_metrics.county = c.county_id\n    )\n\n    select * from station_with_county\n\n)\n\nselect * from dailyc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_yearly_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_yearly_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_yearly_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_yearly_district"], "alias": "performance__station_metrics_agg_yearly_district", "checksum": {"name": "sha256", "checksum": "930d693bd777474ea9f318bdd99c56144a89b0076deb77d18b4952603894732a"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Yearly aggregation of volume, occupancy, speed, VMT, VHT, Q value, and TTI by district.\n", "columns": {"district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_year": {"name": "sample_year", "description": "Year of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_volume_sum": {"name": "yearly_volume_sum", "description": "Sum of yearly volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_occupancy_avg": {"name": "yearly_occupancy_avg", "description": "Average yearly occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_speed_avg": {"name": "yearly_speed_avg", "description": "Flow-weighted average yearly speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_vmt": {"name": "yearly_vmt", "description": "Yearly vehicle miles traveled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_vht": {"name": "yearly_vht", "description": "Yearly vehicle hours traveled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_q_value": {"name": "yearly_q_value", "description": "Yearly Q value (average speed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "yearly_tti": {"name": "yearly_tti", "description": "Yearly travel time index.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.8905654, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_yearly_district", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed yearly level data\r\nwith station_yearly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_yearly') }}\r\n),\r\n\r\n-- now aggregate yearly volume, occupancy and speed to yearly\r\nspatial_metrics as (\r\n    select\r\n        district,\r\n        sample_year,\r\n        sum(yearly_volume) as yearly_volume_sum,\r\n        avg(yearly_occupancy) as yearly_occupancy_avg,\r\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\r\n        sum(yearly_vmt) as yearly_vmt,\r\n        sum(yearly_vht) as yearly_vht,\r\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\r\n    from station_yearly_data\r\n    group by\r\n        district, sample_year\r\n)\r\n\r\nselect * from spatial_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_yearly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_yearly_district.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed yearly level data\nwith station_yearly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly\n),\n\n-- now aggregate yearly volume, occupancy and speed to yearly\nspatial_metrics as (\n    select\n        district,\n        sample_year,\n        sum(yearly_volume) as yearly_volume_sum,\n        avg(yearly_occupancy) as yearly_occupancy_avg,\n        sum(yearly_volume * yearly_speed) / nullifzero(sum(yearly_volume)) as yearly_speed_avg,\n        sum(yearly_vmt) as yearly_vmt,\n        sum(yearly_vht) as yearly_vht,\n        sum(yearly_vmt) / nullifzero(sum(yearly_vht)) as yearly_q_value,\n        -- travel time\n        60 / nullifzero(sum(yearly_q_value)) as yearly_tti\n    from station_yearly_data\n    group by\n        district, sample_year\n)\n\nselect * from spatial_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_district": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_daily_district", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_daily_district.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_daily_district.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_district", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_daily_district"], "alias": "performance__station_metrics_agg_daily_district", "checksum": {"name": "sha256", "checksum": "4ffb5f34e55c3ac03ad526a62315447b00b2c852017d55791b132cfb1e4f966c"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of volume, occupancy and speed across all lanes aggregated by districts. This metrics will\nmeasure the daily performance of the state highway system. This can be used for weekly and monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "The unique number that identifies the district that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME_SUM": {"name": "DAILY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\nby counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED_AVG": {"name": "DAILY_SPEED_AVG", "description": "flow weighted daily speed across all the lanes aggregated by counties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY_AVG": {"name": "DAILY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\naggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\nthe freeway across all the lanes aggregated by counties.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes aggregated by counties. VHT is the amount of time spent\nby all of the vehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.863765, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_daily_district", "raw_code": "with station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to daily\r\nspatial_metrics as (\r\n    select\r\n        district,\r\n        sample_date,\r\n        sum(daily_volume) as daily_volume_sum,\r\n        avg(daily_occupancy) as daily_occupancy_avg,\r\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\r\n        sum(daily_vmt) as daily_vmt,\r\n        sum(daily_vht) as daily_vht,\r\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\r\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\r\n    from station_daily_data\r\n    group by\r\n        district, sample_date\r\n)\r\n\r\nselect * from spatial_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_daily_district.sql", "compiled": true, "compiled_code": "with station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\n-- now aggregate daily volume, occupancy and speed to daily\nspatial_metrics as (\n    select\n        district,\n        sample_date,\n        sum(daily_volume) as daily_volume_sum,\n        avg(daily_occupancy) as daily_occupancy_avg,\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\n        sum(daily_vmt) as daily_vmt,\n        sum(daily_vht) as daily_vht,\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\n    from station_daily_data\n    group by\n        district, sample_date\n)\n\nselect * from spatial_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_metrics_agg_daily_city", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_metrics_agg_daily_city.sql", "original_file_path": "models/marts/performance/performance__station_metrics_agg_daily_city.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_metrics_agg_daily_city"], "alias": "performance__station_metrics_agg_daily_city", "checksum": {"name": "sha256", "checksum": "e6a7446553220a088c4ce10a9446cc25cdf2ddf50862d5b1e7ddd151c61c7447"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "daily aggregation of volume, occupancy and speed across all lanes aggregated by cities. This metrics will\nmeasure the daily performance of the state highway system. This can be used for weekly and monthly\naggregation of PeMS performance metrics across all the lanes in a given station.\n", "columns": {"CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The unique name that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The unique abbreviation that identifies the city that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME_SUM": {"name": "DAILY_VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period across all the lanes aggregated\n  by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED_AVG": {"name": "DAILY_SPEED_AVG", "description": "flow weighted daily speed across all the lanes aggregated by cities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY_AVG": {"name": "DAILY_OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period across all the lanes\n  aggregated by cities.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_metrics_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.861994, "relation_name": "ANALYTICS_PRD.performance.performance__station_metrics_agg_daily_city", "raw_code": "with station_daily_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to daily\r\nspatial_metrics as (\r\n    select\r\n        city,\r\n        sample_date,\r\n        sum(daily_volume) as daily_volume_sum,\r\n        avg(daily_occupancy) as daily_occupancy_avg,\r\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\r\n        sum(daily_vmt) as daily_vmt,\r\n        sum(daily_vht) as daily_vht,\r\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\r\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\r\n    from station_daily_data\r\n    where\r\n        city is not null\r\n    group by\r\n        city, sample_date\r\n),\r\n\r\nspatial_metrics_city as (\r\n    {{ get_city_name('spatial_metrics') }}\r\n)\r\n\r\nselect * from spatial_metrics_city", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_metrics_agg_daily_city.sql", "compiled": true, "compiled_code": "with station_daily_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n),\n\n-- now aggregate daily volume, occupancy and speed to daily\nspatial_metrics as (\n    select\n        city,\n        sample_date,\n        sum(daily_volume) as daily_volume_sum,\n        avg(daily_occupancy) as daily_occupancy_avg,\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as daily_speed_avg,\n        sum(daily_vmt) as daily_vmt,\n        sum(daily_vht) as daily_vht,\n        sum(daily_vmt) / nullifzero(sum(daily_vht)) as daily_q_value,\n        60 / nullifzero(sum(daily_q_value)) as daily_tti\n    from station_daily_data\n    where\n        city is not null\n    group by\n        city, sample_date\n),\n\nspatial_metrics_city as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from spatial_metrics as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from spatial_metrics_city", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_unpivot_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_unpivot_agg_monthly.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_unpivot_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_unpivot_agg_monthly"], "alias": "performance__station_bottleneck_unpivot_agg_monthly", "checksum": {"name": "sha256", "checksum": "1c4df847678a04f6df85a8caebf79d66fd654b9eae26905c233a346ea47d5af1"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly bottleneck delay metrics unpivoted by speed threshold.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_month": {"name": "sample_month", "description": "Month of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_speed": {"name": "target_speed", "description": "Speed threshold for delay calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delay": {"name": "delay", "description": "Total delay for the station and month at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance"}, "created_at": 1755632023.853939, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_unpivot_agg_monthly", "raw_code": "{{ config(\r\n    materialized=\"table\"\r\n) }}\r\n\r\nwith monthly_bottleneck_delay as (\r\n    select * from {{ ref('int_performance__bottleneck_delay_metrics_agg_monthly') }}\r\n),\r\n\r\nunpivot_delay as (\r\n    select\r\n        station_id,\r\n        sample_month,\r\n        time_shift,\r\n        station_type,\r\n        cast(district as int) as district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                station_id,\r\n                sample_month,\r\n                time_shift,\r\n                station_type,\r\n                district,\r\n                freeway,\r\n                direction,\r\n                absolute_postmile,\r\n                county,\r\n                '{{ value }}' as target_speed,\r\n                monthly_time_shift_spatial_delay_{{ value }}_mph as delay\r\n            from\r\n                monthly_bottleneck_delay\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        station_id,\r\n        sample_month,\r\n        time_shift,\r\n        station_type,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('unpivot_delay') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_monthly", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_unpivot_agg_monthly.sql", "compiled": true, "compiled_code": "\n\nwith monthly_bottleneck_delay as (\n    select * from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_monthly\n),\n\nunpivot_delay as (\n    select\n        station_id,\n        sample_month,\n        time_shift,\n        station_type,\n        cast(district as int) as district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay\n    from (\n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '35' as target_speed,\n                monthly_time_shift_spatial_delay_35_mph as delay\n            from\n                monthly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '40' as target_speed,\n                monthly_time_shift_spatial_delay_40_mph as delay\n            from\n                monthly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '45' as target_speed,\n                monthly_time_shift_spatial_delay_45_mph as delay\n            from\n                monthly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '50' as target_speed,\n                monthly_time_shift_spatial_delay_50_mph as delay\n            from\n                monthly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '55' as target_speed,\n                monthly_time_shift_spatial_delay_55_mph as delay\n            from\n                monthly_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_month,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '60' as target_speed,\n                monthly_time_shift_spatial_delay_60_mph as delay\n            from\n                monthly_bottleneck_delay\n            \n        \n    ) as combined_metrics\n    group by\n        station_id,\n        sample_month,\n        time_shift,\n        station_type,\n        district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            unpivot_delay.*,\n            c.county_name,\n            c.county_abb\n        from unpivot_delay\n        inner join county as c\n        on unpivot_delay.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "performance__station_bottleneck_unpivot_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/performance/performance__station_bottleneck_unpivot_agg_daily.sql", "original_file_path": "models/marts/performance/performance__station_bottleneck_unpivot_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "performance", "performance__station_bottleneck_unpivot_agg_daily"], "alias": "performance__station_bottleneck_unpivot_agg_daily", "checksum": {"name": "sha256", "checksum": "6096ee4388ee8ff179728c7056f7a3ed49cf52cb846fc868fd0afbb3e9898b70"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "Daily bottleneck delay metrics unpivoted by speed threshold.\n", "columns": {"station_id": {"name": "station_id", "description": "Station identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "Date of the sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_shift": {"name": "time_shift", "description": "Time shift for bottleneck event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "District number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Freeway direction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The unique name that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The unique abbreviation that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "Location as longitude,latitude string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_speed": {"name": "target_speed", "description": "Speed threshold for delay calculation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "delay": {"name": "delay", "description": "Total delay for the station and day at the target speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/performance/_station_bottleneck_unpivot_agg.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632023.8563688, "relation_name": "ANALYTICS_PRD.performance.performance__station_bottleneck_unpivot_agg_daily", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\r\n) }}\r\n\r\nwith daily_bottleneck_delay as (\r\n    select * from {{ ref('int_performance__bottleneck_delay_metrics_agg_daily') }}\r\n),\r\n\r\nunpivot_delay as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        time_shift,\r\n        station_type,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed,\r\n        sum(coalesce(delay, 0)) as delay\r\n    from (\r\n        {% for value in var(\"V_t\") %}\r\n            select\r\n                station_id,\r\n                sample_date,\r\n                time_shift,\r\n                station_type,\r\n                district,\r\n                freeway,\r\n                direction,\r\n                absolute_postmile,\r\n                county,\r\n                '{{ value }}' as target_speed,\r\n                daily_time_shift_spatial_delay_{{ value }}_mph as delay\r\n            from\r\n                daily_bottleneck_delay\r\n            {% if not loop.last %} union all {% endif %}\r\n        {% endfor %}\r\n    ) as combined_metrics\r\n    group by\r\n        station_id,\r\n        sample_date,\r\n        time_shift,\r\n        station_type,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile,\r\n        county,\r\n        target_speed\r\n),\r\n\r\nbottleneck_delay_with_county as (\r\n    {{ get_county_name('unpivot_delay') }}\r\n),\r\n\r\ngeo as (\r\n    select\r\n        station_id,\r\n        latitude,\r\n        longitude,\r\n        concat(longitude, ',', latitude) as location\r\n    from {{ ref('geo__current_stations') }}\r\n),\r\n\r\nbottleneck_delay_county_geo as (\r\n    select\r\n        bottleneck_delay_with_county.*,\r\n        geo.latitude,\r\n        geo.longitude,\r\n        geo.location\r\n    from\r\n        bottleneck_delay_with_county\r\n    inner join\r\n        geo\r\n        on bottleneck_delay_with_county.station_id = geo.station_id\r\n)\r\n\r\nselect * from bottleneck_delay_county_geo", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_daily", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "geo__current_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties", "model.caldata_mdsa_caltrans_pems.geo__current_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/performance/performance__station_bottleneck_unpivot_agg_daily.sql", "compiled": true, "compiled_code": "\n\nwith daily_bottleneck_delay as (\n    select * from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_daily\n),\n\nunpivot_delay as (\n    select\n        station_id,\n        sample_date,\n        time_shift,\n        station_type,\n        district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed,\n        sum(coalesce(delay, 0)) as delay\n    from (\n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '35' as target_speed,\n                daily_time_shift_spatial_delay_35_mph as delay\n            from\n                daily_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '40' as target_speed,\n                daily_time_shift_spatial_delay_40_mph as delay\n            from\n                daily_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '45' as target_speed,\n                daily_time_shift_spatial_delay_45_mph as delay\n            from\n                daily_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '50' as target_speed,\n                daily_time_shift_spatial_delay_50_mph as delay\n            from\n                daily_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '55' as target_speed,\n                daily_time_shift_spatial_delay_55_mph as delay\n            from\n                daily_bottleneck_delay\n             union all \n        \n            select\n                station_id,\n                sample_date,\n                time_shift,\n                station_type,\n                district,\n                freeway,\n                direction,\n                absolute_postmile,\n                county,\n                '60' as target_speed,\n                daily_time_shift_spatial_delay_60_mph as delay\n            from\n                daily_bottleneck_delay\n            \n        \n    ) as combined_metrics\n    group by\n        station_id,\n        sample_date,\n        time_shift,\n        station_type,\n        district,\n        freeway,\n        direction,\n        absolute_postmile,\n        county,\n        target_speed\n),\n\nbottleneck_delay_with_county as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            unpivot_delay.*,\n            c.county_name,\n            c.county_abb\n        from unpivot_delay\n        inner join county as c\n        on unpivot_delay.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ngeo as (\n    select\n        station_id,\n        latitude,\n        longitude,\n        concat(longitude, ',', latitude) as location\n    from ANALYTICS_PRD.geo.geo__current_stations\n),\n\nbottleneck_delay_county_geo as (\n    select\n        bottleneck_delay_with_county.*,\n        geo.latitude,\n        geo.longitude,\n        geo.location\n    from\n        bottleneck_delay_with_county\n    inner join\n        geo\n        on bottleneck_delay_with_county.station_id = geo.station_id\n)\n\nselect * from bottleneck_delay_county_geo", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.quality__row_count_summary": {"database": "ANALYTICS_PRD", "schema": "quality", "name": "quality__row_count_summary", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/quality/quality__row_count_summary.sql", "original_file_path": "models/marts/quality/quality__row_count_summary.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.quality__row_count_summary", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "quality", "quality__row_count_summary"], "alias": "quality__row_count_summary", "checksum": {"name": "sha256", "checksum": "da3cc0549626982d4fe810177ab813b2a13cb6adad8e292d5baf652eadebe77b"}, "config": {"enabled": true, "alias": null, "schema": "quality", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This model counts the number of ML and HV detectors across multiple models on a daily basis\nto ensure that the detector count is consistent between all of the models. The models\nwhere detector counts are being evaluated are:\n- int_diagnostics__detector_status model\n- int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n- int_imputation__detector_imputed_agg_five_minutes\n- int_performance__detector_metrics_agg_five_minutes\nThe daily detector counts for these models should match. As an additional aggregation\nthe number of good, bad, and total detectors is calculated in this model as well to monitor\nfor any changes that should be investigated. The number of detectors and their health\nshould not vary drastically between days so this model can help identify anamolies.\n", "columns": {"SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with the aggregate counts down in the 5 models to be compared.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_DETECTOR_STATUS_TOTAL_COUNT": {"name": "ML_HV_DETECTOR_STATUS_TOTAL_COUNT", "description": "Counts the number of distinct ML and HV detectors on a daily basis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_CLEARINGHOUSE_DETECTOR_COUNT": {"name": "ML_HV_CLEARINGHOUSE_DETECTOR_COUNT", "description": "Counts the number of distinct ML and HV detectors on a daily basis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_IMPUTATION_DETECTOR_COUNT": {"name": "ML_HV_IMPUTATION_DETECTOR_COUNT", "description": "Counts the number of distinct ML and HV detectors on a daily basis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_PERFORMANCE_DETECTOR_COUNT": {"name": "ML_HV_PERFORMANCE_DETECTOR_COUNT", "description": "Counts the number of distinct ML and HV detectors on a daily basis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GOOD_STATUS_COUNT": {"name": "GOOD_STATUS_COUNT", "description": "Counts the total number of detectors with a status of Good on a daily basis.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "BAD_STATUS_COUNT": {"name": "BAD_STATUS_COUNT", "description": "Counts the total number of detectors with a status other than Good on a daily basis.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ALL_DETECTOR_STATUS_TOTAL_COUNT": {"name": "ALL_DETECTOR_STATUS_TOTAL_COUNT", "description": "Counts the total number of rows/detectors on a daily basis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/quality/_quality.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "quality", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='size', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632023.8937674, "relation_name": "ANALYTICS_PRD.quality.quality__row_count_summary", "raw_code": "{{ config(\r\n    snowflake_warehouse = get_snowflake_warehouse(size=\"XL\")\r\n) }}\r\nwith\r\n\r\nML_HV_DETECTOR_STATUS_DAILY_COUNT as (\r\n    /*\r\n    * This CTE returns the number of total rows created daily in\r\n    * the int_diagnostics__detector_status model. This count should be\r\n    * to checked against the daily detector counts for the following models:\r\n    * - int_clearinghouse__detector_agg_five_minutes_with_missing_rows\r\n    * - int_imputation__detector_imputed_agg_five_minutes\r\n    * - int_performance__detector_metrics_agg_five_minutes\r\n    * The daily detector counts for these models should match for\r\n    */\r\n    select\r\n        SAMPLE_DATE,\r\n        count(*) as ML_HV_DETECTOR_STATUS_TOTAL_COUNT\r\n    from {{ ref('int_diagnostics__detector_status') }}\r\n    where STATION_TYPE = 'ML' or STATION_TYPE = 'HV'\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Clearinghouse Detector Count per Day\r\nML_HV_CLEARINGHOUSE_DETECTOR_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct DETECTOR_ID) as ML_HV_CLEARINGHOUSE_DETECTOR_COUNT\r\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows') }}\r\n    where STATION_TYPE = 'ML' or STATION_TYPE = 'HV'\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Imputation Detector Count per Day\r\nML_HV_IMPUTATION_DETECTOR_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct DETECTOR_ID) as ML_HV_IMPUTATION_DETECTOR_COUNT\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Performance Detector Count per Day\r\nML_HV_PERFORMANCE_DETECTOR_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct DETECTOR_ID) as ML_HV_PERFORMANCE_DETECTOR_COUNT\r\n    from {{ ref('int_performance__detector_metrics_agg_five_minutes') }}\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Returns count for all station types per Day\r\nDETECTOR_STATUS_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count_if(STATUS = 'Good') as GOOD_STATUS_COUNT,\r\n        count_if(STATUS != 'Good') as BAD_STATUS_COUNT,\r\n        count(*) as ALL_DETECTOR_STATUS_TOTAL_COUNT\r\n    from {{ ref('int_diagnostics__detector_status') }}\r\n    group by SAMPLE_DATE\r\n),\r\n\r\nDAILY_DETECTOR_COUNT_CHECK as (\r\n    select\r\n        MHDSDC.*,\r\n        CDDC.ML_HV_CLEARINGHOUSE_DETECTOR_COUNT,\r\n        IDDC.ML_HV_IMPUTATION_DETECTOR_COUNT,\r\n        PDDC.ML_HV_PERFORMANCE_DETECTOR_COUNT,\r\n        DSC.GOOD_STATUS_COUNT,\r\n        DSC.BAD_STATUS_COUNT,\r\n        DSC.ALL_DETECTOR_STATUS_TOTAL_COUNT\r\n    from ML_HV_DETECTOR_STATUS_DAILY_COUNT as MHDSDC\r\n    left join ML_HV_CLEARINGHOUSE_DETECTOR_DAILY_COUNT as CDDC\r\n        on MHDSDC.SAMPLE_DATE = CDDC.SAMPLE_DATE\r\n    left join ML_HV_IMPUTATION_DETECTOR_DAILY_COUNT as IDDC\r\n        on MHDSDC.SAMPLE_DATE = IDDC.SAMPLE_DATE\r\n    left join ML_HV_PERFORMANCE_DETECTOR_DAILY_COUNT as PDDC\r\n        on MHDSDC.SAMPLE_DATE = PDDC.SAMPLE_DATE\r\n    left join DETECTOR_STATUS_COUNT as DSC\r\n        on MHDSDC.SAMPLE_DATE = DSC.SAMPLE_DATE\r\n)\r\n\r\nselect * from DAILY_DETECTOR_COUNT_CHECK", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}, {"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}, {"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}, {"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_warehouse", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/quality/quality__row_count_summary.sql", "compiled": true, "compiled_code": "\nwith\n\nML_HV_DETECTOR_STATUS_DAILY_COUNT as (\n    /*\n    * This CTE returns the number of total rows created daily in\n    * the int_diagnostics__detector_status model. This count should be\n    * to checked against the daily detector counts for the following models:\n    * - int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    * - int_imputation__detector_imputed_agg_five_minutes\n    * - int_performance__detector_metrics_agg_five_minutes\n    * The daily detector counts for these models should match for\n    */\n    select\n        SAMPLE_DATE,\n        count(*) as ML_HV_DETECTOR_STATUS_TOTAL_COUNT\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where STATION_TYPE = 'ML' or STATION_TYPE = 'HV'\n    group by SAMPLE_DATE\n),\n\n-- Clearinghouse Detector Count per Day\nML_HV_CLEARINGHOUSE_DETECTOR_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct DETECTOR_ID) as ML_HV_CLEARINGHOUSE_DETECTOR_COUNT\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    where STATION_TYPE = 'ML' or STATION_TYPE = 'HV'\n    group by SAMPLE_DATE\n),\n\n-- Imputation Detector Count per Day\nML_HV_IMPUTATION_DETECTOR_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct DETECTOR_ID) as ML_HV_IMPUTATION_DETECTOR_COUNT\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    group by SAMPLE_DATE\n),\n\n-- Performance Detector Count per Day\nML_HV_PERFORMANCE_DETECTOR_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct DETECTOR_ID) as ML_HV_PERFORMANCE_DETECTOR_COUNT\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\n    group by SAMPLE_DATE\n),\n\n-- Returns count for all station types per Day\nDETECTOR_STATUS_COUNT as (\n    select\n        SAMPLE_DATE,\n        count_if(STATUS = 'Good') as GOOD_STATUS_COUNT,\n        count_if(STATUS != 'Good') as BAD_STATUS_COUNT,\n        count(*) as ALL_DETECTOR_STATUS_TOTAL_COUNT\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    group by SAMPLE_DATE\n),\n\nDAILY_DETECTOR_COUNT_CHECK as (\n    select\n        MHDSDC.*,\n        CDDC.ML_HV_CLEARINGHOUSE_DETECTOR_COUNT,\n        IDDC.ML_HV_IMPUTATION_DETECTOR_COUNT,\n        PDDC.ML_HV_PERFORMANCE_DETECTOR_COUNT,\n        DSC.GOOD_STATUS_COUNT,\n        DSC.BAD_STATUS_COUNT,\n        DSC.ALL_DETECTOR_STATUS_TOTAL_COUNT\n    from ML_HV_DETECTOR_STATUS_DAILY_COUNT as MHDSDC\n    left join ML_HV_CLEARINGHOUSE_DETECTOR_DAILY_COUNT as CDDC\n        on MHDSDC.SAMPLE_DATE = CDDC.SAMPLE_DATE\n    left join ML_HV_IMPUTATION_DETECTOR_DAILY_COUNT as IDDC\n        on MHDSDC.SAMPLE_DATE = IDDC.SAMPLE_DATE\n    left join ML_HV_PERFORMANCE_DETECTOR_DAILY_COUNT as PDDC\n        on MHDSDC.SAMPLE_DATE = PDDC.SAMPLE_DATE\n    left join DETECTOR_STATUS_COUNT as DSC\n        on MHDSDC.SAMPLE_DATE = DSC.SAMPLE_DATE\n)\n\nselect * from DAILY_DETECTOR_COUNT_CHECK", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.quality_imputation_daily_sample_count": {"database": "ANALYTICS_PRD", "schema": "quality", "name": "quality_imputation_daily_sample_count", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/quality/quality_imputation_daily_sample_count.sql", "original_file_path": "models/marts/quality/quality_imputation_daily_sample_count.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.quality_imputation_daily_sample_count", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "quality", "quality_imputation_daily_sample_count"], "alias": "quality_imputation_daily_sample_count", "checksum": {"name": "sha256", "checksum": "14711fb057c77108ae8d81983d6a1d240ba8667f84c4e90e7ca120561e70c2d0"}, "config": {"enabled": true, "alias": null, "schema": "quality", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["sample_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "This model counts the number of imputed, observed and observed-unimputed daily sample as\nwell as their percentage. The count of imputed sample was again broken down by imputation methodology.\n", "columns": {"SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with the aggregate daily counts of sample.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "Daily sample count that includes observed and null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_LOCAL_AVG_IMPUTATION_SAMPLE": {"name": "VOL_LOCAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily volume sample that was imputed by local average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_LOCAL_IMPUTATION_SAMPLE": {"name": "VOL_LOCAL_IMPUTATION_SAMPLE", "description": "Number of daily volume sample that was imputed by local regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_OBSERVED_SAMPLE": {"name": "VOL_OBSERVED_SAMPLE", "description": "Number of daily volume sample that do not need imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_IMPUTED_SAMPLE": {"name": "VOL_IMPUTED_SAMPLE", "description": "Number of daily volume sample that was imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_REGIONAL_AVG_IMPUTATION_SAMPLE": {"name": "VOL_REGIONAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily volume sample that was imputed by regional average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_REGIONAL_IMPUTATION_SAMPLE": {"name": "VOL_REGIONAL_IMPUTATION_SAMPLE", "description": "Number of daily volume sample that was imputed by regional regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_UNOBSERVED_UNIMPUTED": {"name": "VOL_UNOBSERVED_UNIMPUTED", "description": "Number of daily volume sample that was not imputed but is observed and null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOL_GLOBAL_IMPUTATION_SAMPLE": {"name": "VOL_GLOBAL_IMPUTATION_SAMPLE", "description": "Number of daily volume sample that was imputed by global regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_LOCAL_AVG_IMPUTATION_SAMPLE": {"name": "SPEED_LOCAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily speed sample that was imputed by local average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_LOCAL_IMPUTATION_SAMPLE": {"name": "SPEED_LOCAL_IMPUTATION_SAMPLE", "description": "Number of daily speed sample that was imputed by local regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_OBSERVED_SAMPLE": {"name": "SPEED_OBSERVED_SAMPLE", "description": "Number of daily speed sample that do not need imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_IMPUTED_SAMPLE": {"name": "SPEED_IMPUTED_SAMPLE", "description": "Number of daily speed sample that was imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_REGIONAL_AVG_IMPUTATION_SAMPLE": {"name": "SPEED_REGIONAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily speed sample that was imputed by regional average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_REGIONAL_IMPUTATION_SAMPLE": {"name": "SPEED_REGIONAL_IMPUTATION_SAMPLE", "description": "Number of daily speed sample that was imputed by regional regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_UNOBSERVED_UNIMPUTED": {"name": "SPEED_UNOBSERVED_UNIMPUTED", "description": "Number of daily speed sample that was not imputed but is observed and null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_GLOBAL_IMPUTATION_SAMPLE": {"name": "SPEED_GLOBAL_IMPUTATION_SAMPLE", "description": "Number of daily speed sample that was imputed by global regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_LOCAL_AVG_IMPUTATION_SAMPLE": {"name": "OCC_LOCAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily occupancy sample that was imputed by local average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_LOCAL_IMPUTATION_SAMPLE": {"name": "OCC_LOCAL_IMPUTATION_SAMPLE", "description": "Number of daily occupancy sample that was imputed by local regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_OBSERVED_SAMPLE": {"name": "OCC_OBSERVED_SAMPLE", "description": "Number of daily occupancy sample that do not need imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_IMPUTED_SAMPLE": {"name": "OCC_IMPUTED_SAMPLE", "description": "Number of daily occupancy sample that was imputation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_REGIONAL_AVG_IMPUTATION_SAMPLE": {"name": "OCC_REGIONAL_AVG_IMPUTATION_SAMPLE", "description": "Number of daily occupancy sample that was imputed by regional average method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_REGIONAL_IMPUTATION_SAMPLE": {"name": "OCC_REGIONAL_IMPUTATION_SAMPLE", "description": "Number of daily occupancy sample that was imputed by regional regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_UNOBSERVED_UNIMPUTED": {"name": "OCC_UNOBSERVED_UNIMPUTED", "description": "Number of daily occupancy sample that was not imputed but is observed and null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCC_GLOBAL_IMPUTATION_SAMPLE": {"name": "OCC_GLOBAL_IMPUTATION_SAMPLE", "description": "Number of daily occupancy sample that was imputed by global regression method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OCC_IMPUTED": {"name": "PCT_OCC_IMPUTED", "description": "Percentage of daily occupancy sample that was imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_SPEED_IMPUTED": {"name": "PCT_SPEED_IMPUTED", "description": "Percentage of daily speed sample that was imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_VOL_IMPUTED": {"name": "PCT_VOL_IMPUTED", "description": "Percentage of daily volume sample that was imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_SPEED_OBSERVED": {"name": "PCT_SPEED_OBSERVED", "description": "Percentage of daily speed sample that was observed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OCC_OBSERVED": {"name": "PCT_OCC_OBSERVED", "description": "Percentage of daily occupancy sample that was observed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_VOL_OBSERVED": {"name": "PCT_VOL_OBSERVED", "description": "Percentage of daily volume sample that was observed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OCC_OBSERVED_UNIMPUTED": {"name": "PCT_OCC_OBSERVED_UNIMPUTED", "description": "Percentage of daily occupancy sample that was observed but not imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_SPEED_OBSERVED_UNIMPUTED": {"name": "PCT_SPEED_OBSERVED_UNIMPUTED", "description": "Percentage of daily speed sample that was observed but not imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_VOL_OBSERVED_UNIMPUTED": {"name": "PCT_VOL_OBSERVED_UNIMPUTED", "description": "Percentage of daily volume sample that was observed but not imputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/quality/_quality.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "quality", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))"}, "created_at": 1755632023.906372, "relation_name": "ANALYTICS_PRD.quality.quality_imputation_daily_sample_count", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['sample_date'],\r\n    snowflake_warehouse=get_snowflake_refresh_warehouse(big=\"XL\"),\r\n    on_schema_change= \"sync_all_columns\"\r\n) }}\r\n\r\n-- read observed and imputed five minutes data\r\nwith obs_imputed_five_minutes_agg as (\r\n    select *\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    where station_type in ('HV', 'ML') and {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\nimputation_status_count as (\r\n    select\r\n        sample_date,\r\n        count(*) as sample_ct,\r\n        count_if(occupancy_imputation_method = 'local') as occ_local_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'regional') as occ_regional_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'global') as occ_global_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'local_avg') as occ_local_avg_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'regional_avg') as occ_regional_avg_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'observed') as occ_observed_sample,\r\n        count_if(occupancy_imputation_method = 'observed_unimputed') as occ_unobserved_unimputed,\r\n        count_if(volume_imputation_method = 'local') as vol_local_imputation_sample,\r\n        count_if(volume_imputation_method = 'regional') as vol_regional_imputation_sample,\r\n        count_if(volume_imputation_method = 'global') as vol_global_imputation_sample,\r\n        count_if(volume_imputation_method = 'local_avg') as vol_local_avg_imputation_sample,\r\n        count_if(volume_imputation_method = 'regional_avg') as vol_regional_avg_imputation_sample,\r\n        count_if(volume_imputation_method = 'observed') as vol_observed_sample,\r\n        count_if(volume_imputation_method = 'observed_unimputed') as vol_unobserved_unimputed,\r\n        count_if(speed_imputation_method = 'local') as speed_local_imputation_sample,\r\n        count_if(speed_imputation_method = 'regional') as speed_regional_imputation_sample,\r\n        count_if(speed_imputation_method = 'global') as speed_global_imputation_sample,\r\n        count_if(speed_imputation_method = 'local_avg') as speed_local_avg_imputation_sample,\r\n        count_if(speed_imputation_method = 'regional_avg') as speed_regional_avg_imputation_sample,\r\n        count_if(speed_imputation_method = 'observed') as speed_observed_sample,\r\n        count_if(speed_imputation_method = 'observed_unimputed') as speed_unobserved_unimputed,\r\n        count_if(occupancy_imputation_method != 'observed' and occupancy_imputation_method != 'observed_unimputed')\r\n            as occ_imputed_sample,\r\n        count_if(volume_imputation_method != 'observed' and volume_imputation_method != 'observed_unimputed')\r\n            as vol_imputed_sample,\r\n        count_if(speed_imputation_method != 'observed' and speed_imputation_method != 'observed_unimputed')\r\n            as speed_imputed_sample\r\n    from obs_imputed_five_minutes_agg\r\n    group by sample_date\r\n),\r\n\r\nsample_count as (\r\n    select\r\n        *,\r\n        (vol_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_vol_imputed,\r\n        (vol_observed_sample / nullif(sample_ct, 0)) * 100 as pct_vol_observed,\r\n        (vol_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_vol_observed_unimputed,\r\n        (speed_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_speed_imputed,\r\n        (speed_observed_sample / nullif(sample_ct, 0)) * 100 as pct_speed_observed,\r\n        (speed_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_speed_observed_unimputed,\r\n        (occ_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_occ_imputed,\r\n        (occ_observed_sample / nullif(sample_ct, 0)) * 100 as pct_occ_observed,\r\n        (occ_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_occ_observed_unimputed\r\n    from imputation_status_count\r\n)\r\n\r\nselect *\r\nfrom sample_count", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/quality/quality_imputation_daily_sample_count.sql", "compiled": true, "compiled_code": "\n\n-- read observed and imputed five minutes data\nwith obs_imputed_five_minutes_agg as (\n    select *\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    where station_type in ('HV', 'ML') and \n        -- Look back to account for any late-arriving data\n            sample_date > (\n                select\n                    dateadd(\n                        day,\n                        -2,\n                        max(sample_date)\n                    )\n                from ANALYTICS_PRD.quality.quality_imputation_daily_sample_count\n            )\n            \n    \n),\n\nimputation_status_count as (\n    select\n        sample_date,\n        count(*) as sample_ct,\n        count_if(occupancy_imputation_method = 'local') as occ_local_imputation_sample,\n        count_if(occupancy_imputation_method = 'regional') as occ_regional_imputation_sample,\n        count_if(occupancy_imputation_method = 'global') as occ_global_imputation_sample,\n        count_if(occupancy_imputation_method = 'local_avg') as occ_local_avg_imputation_sample,\n        count_if(occupancy_imputation_method = 'regional_avg') as occ_regional_avg_imputation_sample,\n        count_if(occupancy_imputation_method = 'observed') as occ_observed_sample,\n        count_if(occupancy_imputation_method = 'observed_unimputed') as occ_unobserved_unimputed,\n        count_if(volume_imputation_method = 'local') as vol_local_imputation_sample,\n        count_if(volume_imputation_method = 'regional') as vol_regional_imputation_sample,\n        count_if(volume_imputation_method = 'global') as vol_global_imputation_sample,\n        count_if(volume_imputation_method = 'local_avg') as vol_local_avg_imputation_sample,\n        count_if(volume_imputation_method = 'regional_avg') as vol_regional_avg_imputation_sample,\n        count_if(volume_imputation_method = 'observed') as vol_observed_sample,\n        count_if(volume_imputation_method = 'observed_unimputed') as vol_unobserved_unimputed,\n        count_if(speed_imputation_method = 'local') as speed_local_imputation_sample,\n        count_if(speed_imputation_method = 'regional') as speed_regional_imputation_sample,\n        count_if(speed_imputation_method = 'global') as speed_global_imputation_sample,\n        count_if(speed_imputation_method = 'local_avg') as speed_local_avg_imputation_sample,\n        count_if(speed_imputation_method = 'regional_avg') as speed_regional_avg_imputation_sample,\n        count_if(speed_imputation_method = 'observed') as speed_observed_sample,\n        count_if(speed_imputation_method = 'observed_unimputed') as speed_unobserved_unimputed,\n        count_if(occupancy_imputation_method != 'observed' and occupancy_imputation_method != 'observed_unimputed')\n            as occ_imputed_sample,\n        count_if(volume_imputation_method != 'observed' and volume_imputation_method != 'observed_unimputed')\n            as vol_imputed_sample,\n        count_if(speed_imputation_method != 'observed' and speed_imputation_method != 'observed_unimputed')\n            as speed_imputed_sample\n    from obs_imputed_five_minutes_agg\n    group by sample_date\n),\n\nsample_count as (\n    select\n        *,\n        (vol_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_vol_imputed,\n        (vol_observed_sample / nullif(sample_ct, 0)) * 100 as pct_vol_observed,\n        (vol_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_vol_observed_unimputed,\n        (speed_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_speed_imputed,\n        (speed_observed_sample / nullif(sample_ct, 0)) * 100 as pct_speed_observed,\n        (speed_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_speed_observed_unimputed,\n        (occ_imputed_sample / nullif(sample_ct, 0)) * 100 as pct_occ_imputed,\n        (occ_observed_sample / nullif(sample_ct, 0)) * 100 as pct_occ_observed,\n        (occ_unobserved_unimputed / nullif(sample_ct, 0)) * 100 as pct_occ_observed_unimputed\n    from imputation_status_count\n)\n\nselect *\nfrom sample_count", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary": {"database": "ANALYTICS_PRD", "schema": "quality", "name": "quality__station_row_count_summary", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/quality/quality__station_row_count_summary.sql", "original_file_path": "models/marts/quality/quality__station_row_count_summary.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "quality", "quality__station_row_count_summary"], "alias": "quality__station_row_count_summary", "checksum": {"name": "sha256", "checksum": "dc90f5783980948c2bc31c6292515d5d3e09d525609cfd478023c6a3dd35f09a"}, "config": {"enabled": true, "alias": null, "schema": "quality", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "This model summarizes the daily counts of ML and HV detectors for each\nstation across multiple source models to ensure consistency and completeness\nof station-level data. It helps identify discrepancies or missing data at\nthe station level by comparing detector counts between models.\nMonitoring these counts can highlight stations with data quality issues or\nanomalies that require further investigation.\n", "columns": {"SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with the station-level aggregate counts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_DETECTOR_STATUS_STATION_COUNT": {"name": "ML_HV_DETECTOR_STATUS_STATION_COUNT", "description": "Number of distinct ML and HV detectors for each station in the detector status model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_CLEARINGHOUSE_STATION_COUNT": {"name": "ML_HV_CLEARINGHOUSE_STATION_COUNT", "description": "Number of distinct ML and HV detectors for each station in the clearinghouse model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_IMPUTATION_STATION_COUNT": {"name": "ML_HV_IMPUTATION_STATION_COUNT", "description": "Number of distinct ML and HV detectors for each station in the imputation model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ML_HV_PERFORMANCE_STATION_COUNT": {"name": "ML_HV_PERFORMANCE_STATION_COUNT", "description": "Number of distinct ML and HV detectors for each station in the performance model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/quality/_quality.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "quality"}, "created_at": 1755632023.9083455, "relation_name": "ANALYTICS_PRD.quality.quality__station_row_count_summary", "raw_code": "with\r\n\r\nML_HV_DETECTOR_STATUS_DAILY_COUNT as (\r\n    /*\r\n    * This CTE returns the number of total rows by station created daily in\r\n    * the int_diagnostics__detector_status model. This count should be\r\n    * to checked against the daily station counts for the following models:\r\n    * - int_clearinghouse__detector_agg_five_minutes_with_missing_rows\r\n    * - int_imputation__detector_imputed_agg_five_minutes\r\n    * - int_performance__station_metrics_agg_five_minutes\r\n    * The daily station counts for these models should match for HV and ML\r\n    * station types\r\n    */\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct STATION_ID) as ML_HV_DETECTOR_STATUS_STATION_COUNT\r\n    from {{ ref('int_diagnostics__detector_status') }}\r\n    where\r\n        STATION_TYPE in ('ML', 'HV')\r\n        and SAMPLE_DATE >= current_date - 16\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Clearinghouse Station Count per Day\r\nML_HV_CLEARINGHOUSE_STATION_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct STATION_ID) as ML_HV_CLEARINGHOUSE_STATION_COUNT\r\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows') }}\r\n    where\r\n        STATION_TYPE in ('ML', 'HV')\r\n        and SAMPLE_DATE >= current_date - 16\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Imputation Station Count per Day\r\nML_HV_IMPUTATION_STATION_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct STATION_ID) as ML_HV_IMPUTATION_STATION_COUNT\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    where\r\n        STATION_TYPE in ('ML', 'HV')\r\n        and SAMPLE_DATE >= current_date - 16\r\n    group by SAMPLE_DATE\r\n),\r\n\r\n-- Performance Station Count per Day\r\nML_HV_PERFORMANCE_STATION_DAILY_COUNT as (\r\n    select\r\n        SAMPLE_DATE,\r\n        count(distinct STATION_ID) as ML_HV_PERFORMANCE_STATION_COUNT\r\n    from {{ ref('int_performance__station_metrics_agg_five_minutes') }}\r\n    where\r\n        STATION_TYPE in ('ML', 'HV')\r\n        and SAMPLE_DATE >= current_date - 16\r\n    group by SAMPLE_DATE\r\n),\r\n\r\nDAILY_STATION_COUNT_CHECK as (\r\n    select\r\n        MHDSDC.*,\r\n        CSDC.ML_HV_CLEARINGHOUSE_STATION_COUNT,\r\n        ISDC.ML_HV_IMPUTATION_STATION_COUNT,\r\n        PSDC.ML_HV_PERFORMANCE_STATION_COUNT\r\n    from ML_HV_DETECTOR_STATUS_DAILY_COUNT as MHDSDC\r\n    left join ML_HV_CLEARINGHOUSE_STATION_DAILY_COUNT as CSDC\r\n        on MHDSDC.SAMPLE_DATE = CSDC.SAMPLE_DATE\r\n    left join ML_HV_IMPUTATION_STATION_DAILY_COUNT as ISDC\r\n        on MHDSDC.SAMPLE_DATE = ISDC.SAMPLE_DATE\r\n    left join ML_HV_PERFORMANCE_STATION_DAILY_COUNT as PSDC\r\n        on MHDSDC.SAMPLE_DATE = PSDC.SAMPLE_DATE\r\n)\r\n\r\nselect * from DAILY_STATION_COUNT_CHECK", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}, {"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}, {"name": "int_performance__station_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/quality/quality__station_row_count_summary.sql", "compiled": true, "compiled_code": "with\n\nML_HV_DETECTOR_STATUS_DAILY_COUNT as (\n    /*\n    * This CTE returns the number of total rows by station created daily in\n    * the int_diagnostics__detector_status model. This count should be\n    * to checked against the daily station counts for the following models:\n    * - int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    * - int_imputation__detector_imputed_agg_five_minutes\n    * - int_performance__station_metrics_agg_five_minutes\n    * The daily station counts for these models should match for HV and ML\n    * station types\n    */\n    select\n        SAMPLE_DATE,\n        count(distinct STATION_ID) as ML_HV_DETECTOR_STATUS_STATION_COUNT\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where\n        STATION_TYPE in ('ML', 'HV')\n        and SAMPLE_DATE >= current_date - 16\n    group by SAMPLE_DATE\n),\n\n-- Clearinghouse Station Count per Day\nML_HV_CLEARINGHOUSE_STATION_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct STATION_ID) as ML_HV_CLEARINGHOUSE_STATION_COUNT\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    where\n        STATION_TYPE in ('ML', 'HV')\n        and SAMPLE_DATE >= current_date - 16\n    group by SAMPLE_DATE\n),\n\n-- Imputation Station Count per Day\nML_HV_IMPUTATION_STATION_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct STATION_ID) as ML_HV_IMPUTATION_STATION_COUNT\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    where\n        STATION_TYPE in ('ML', 'HV')\n        and SAMPLE_DATE >= current_date - 16\n    group by SAMPLE_DATE\n),\n\n-- Performance Station Count per Day\nML_HV_PERFORMANCE_STATION_DAILY_COUNT as (\n    select\n        SAMPLE_DATE,\n        count(distinct STATION_ID) as ML_HV_PERFORMANCE_STATION_COUNT\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_five_minutes\n    where\n        STATION_TYPE in ('ML', 'HV')\n        and SAMPLE_DATE >= current_date - 16\n    group by SAMPLE_DATE\n),\n\nDAILY_STATION_COUNT_CHECK as (\n    select\n        MHDSDC.*,\n        CSDC.ML_HV_CLEARINGHOUSE_STATION_COUNT,\n        ISDC.ML_HV_IMPUTATION_STATION_COUNT,\n        PSDC.ML_HV_PERFORMANCE_STATION_COUNT\n    from ML_HV_DETECTOR_STATUS_DAILY_COUNT as MHDSDC\n    left join ML_HV_CLEARINGHOUSE_STATION_DAILY_COUNT as CSDC\n        on MHDSDC.SAMPLE_DATE = CSDC.SAMPLE_DATE\n    left join ML_HV_IMPUTATION_STATION_DAILY_COUNT as ISDC\n        on MHDSDC.SAMPLE_DATE = ISDC.SAMPLE_DATE\n    left join ML_HV_PERFORMANCE_STATION_DAILY_COUNT as PSDC\n        on MHDSDC.SAMPLE_DATE = PSDC.SAMPLE_DATE\n)\n\nselect * from DAILY_STATION_COUNT_CHECK", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.geo__current_stations": {"database": "ANALYTICS_PRD", "schema": "geo", "name": "geo__current_stations", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/geo/geo__current_stations.sql", "original_file_path": "models/marts/geo/geo__current_stations.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.geo__current_stations", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "geo", "geo__current_stations"], "alias": "geo__current_stations", "checksum": {"name": "sha256", "checksum": "f82b100e3271e80673948e4ef047886cdc87d817b8a840831de9f39c999dc918"}, "config": {"enabled": true, "alias": null, "schema": "geo", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}, {"sql": "{{ unload_relation_as_geojson(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current stations with geometry, county, and city information.", "columns": {"geometry": {"name": "geometry", "description": "Spatial point geometry for each station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County name for each station, derived from location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City name for each station, derived from location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "Unique identifier for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATUS": {"name": "STATUS", "description": "Status of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME": {"name": "NAME", "description": "Name of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PHYSICAL_LANES": {"name": "PHYSICAL_LANES", "description": "Number of physical lanes at the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USE_SPEED": {"name": "USE_SPEED", "description": "Indicates if speed data is used for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DT_SET_ID": {"name": "DT_SET_ID", "description": "Data set identifier for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_POSTMILE": {"name": "STATE_POSTMILE", "description": "State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ANGLE": {"name": "ANGLE", "description": "Angle of the station location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SEGMENT_START": {"name": "SEGMENT_START", "description": "Start of the segment for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SEGMENT_END": {"name": "SEGMENT_END", "description": "End of the segment for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "Length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CONTROLLER_ID": {"name": "CONTROLLER_ID", "description": "Controller identifier for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "Freeway for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "Direction of travel for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "Name of the county for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "Abbreviation for the county for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "Name of the city for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "Abbreviation for the city for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/geo/geo.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation_as_geojson(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "geo"}, "created_at": 1755632023.9159908, "relation_name": "ANALYTICS_PRD.geo.geo__current_stations", "raw_code": "with station_config as (\r\n    select * from {{ ref('int_vds__station_config') }}\r\n),\r\n\r\ncurrent_stations as (\r\n    select\r\n        * exclude (_valid_from, _valid_to),\r\n        st_makepoint(longitude, latitude) as geometry\r\n    from station_config\r\n    where _valid_to is null\r\n),\r\n\r\ncurrent_stationsc as (\r\n    {{ get_county_name('current_stations') }}\r\n),\r\n\r\ncurrent_stationscc as (\r\n    {{ get_city_name('current_stationsc') }}\r\n)\r\n\r\nselect * from current_stationscc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation", "macro.caldata_mdsa_caltrans_pems.unload_relation_as_geojson"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/geo/geo__current_stations.sql", "compiled": true, "compiled_code": "with station_config as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\ncurrent_stations as (\n    select\n        * exclude (_valid_from, _valid_to),\n        st_makepoint(longitude, latitude) as geometry\n    from station_config\n    where _valid_to is null\n),\n\ncurrent_stationsc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            current_stations.*,\n            c.county_name,\n            c.county_abb\n        from current_stations\n        inner join county as c\n        on current_stations.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ncurrent_stationscc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from current_stationsc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from current_stationscc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.geo__current_detectors": {"database": "ANALYTICS_PRD", "schema": "geo", "name": "geo__current_detectors", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/geo/geo__current_detectors.sql", "original_file_path": "models/marts/geo/geo__current_detectors.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.geo__current_detectors", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "geo", "geo__current_detectors"], "alias": "geo__current_detectors", "checksum": {"name": "sha256", "checksum": "d326fc1946794322a9d8f962511fc2844a5706af1f64ed18bb1aae228d78e065"}, "config": {"enabled": true, "alias": null, "schema": "geo", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}, {"sql": "{{ unload_relation_as_geojson(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Contains metadata for all current detectors, including location and configuration details.\n", "columns": {"geometry": {"name": "geometry", "description": "Geometry of the detector location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "Unique identifier for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "Station ID to which the detector is connected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane number of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "Type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "Caltrans district for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Direction of travel for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "State postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "Number of physical lanes at the detector's station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_name": {"name": "county_name", "description": "Name of the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_abb": {"name": "county_abb", "description": "Abbreviation for the county.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_name": {"name": "city_name", "description": "Name of the city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_abb": {"name": "city_abb", "description": "Abbreviation for the city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/geo/geo.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation_as_geojson(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "geo"}, "created_at": 1755632023.911915, "relation_name": "ANALYTICS_PRD.geo.geo__current_detectors", "raw_code": "with detector_config as (\n    select * from {{ ref('int_vds__detector_config') }}\n),\n\ncurrent_detectors as (\n    select\n        * exclude (_valid_from, _valid_to),\n        st_makepoint(longitude, latitude) as geometry\n    from detector_config\n    where _valid_to is null\n),\n\ncurrent_detectorsc as (\n    {{ get_county_name('current_detectors') }}\n),\n\ncurrent_detectorscc as (\n    {{ get_city_name('current_detectorsc') }}\n)\n\nselect * from current_detectorscc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation", "macro.caldata_mdsa_caltrans_pems.unload_relation_as_geojson"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/geo/geo__current_detectors.sql", "compiled": true, "compiled_code": "with detector_config as (\n    select * from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\ncurrent_detectors as (\n    select\n        * exclude (_valid_from, _valid_to),\n        st_makepoint(longitude, latitude) as geometry\n    from detector_config\n    where _valid_to is null\n),\n\ncurrent_detectorsc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            current_detectors.*,\n            c.county_name,\n            c.county_abb\n        from current_detectors\n        inner join county as c\n        on current_detectors.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ncurrent_detectorscc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from current_detectorsc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from current_detectorscc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "imputation__detector_imputed_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/imputation/imputation__detector_imputed_agg_five_minutes.sql", "original_file_path": "models/marts/imputation/imputation__detector_imputed_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "imputation__detector_imputed_agg_five_minutes"], "alias": "imputation__detector_imputed_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "eb5af0e7e5e6ff61cd62c7c313bf3f84393e8958196d40bddd4fbee50bf56aac"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('day=' || to_varchar(date_part(day, sample_date)) || '/district=' || district)"}, "tags": [], "description": "This model filters the results of the imputation_detector_imputed_agg_five_minutes model from the transform\nstep to detectors with station_type in of either 'ML' or 'HV' from the past 4 days and adds the county name\nto the results. This model is unique at the level of SAMPLE_TIMESTAMP + DETECTOR_ID.\n", "columns": {"DETECTOR_ID": {"name": "DETECTOR_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The real county name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_ABB": {"name": "COUNTY_ABB", "description": "The county name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_NAME": {"name": "CITY_NAME", "description": "The real city name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY_ABB": {"name": "CITY_ABB", "description": "The city name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "The lane number of the detector, starting from 1.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_IS_GOOD": {"name": "DETECTOR_IS_GOOD", "description": "Status of the detector based detector's diagonostics.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "observed or imputed flow values for a detector over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_FIVE_MINS": {"name": "SPEED_FIVE_MINS", "description": "Flow-weighted observed or imputed speed for five minutes time period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_IMPUTATION_METHOD": {"name": "SPEED_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_IMPUTATION_METHOD": {"name": "VOLUME_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_IMPUTATION_METHOD": {"name": "OCCUPANCY_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGRESSION_DATE": {"name": "REGRESSION_DATE", "description": "The date on which the coefficients in the regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Number of samples collected in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_from": {"name": "station_valid_from", "description": "Timestamp from which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_to": {"name": "station_valid_to", "description": "Timestamp to which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "imputation", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('day=' || to_varchar(date_part(day, sample_date)) || '/district=' || district)\"))"}, "created_at": 1755632023.9302132, "relation_name": "ANALYTICS_PRD.imputation.imputation__detector_imputed_agg_five_minutes", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('day=' || to_varchar(date_part(day, sample_date)) || '/district=' || district)\",\r\n) }}\r\n\r\n\r\nwith imputation_five_mins as (\r\n    select *\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    where\r\n        station_type in ('ML', 'HV')\r\n        and sample_date >= dateadd(day, -4, current_date)\r\n),\r\n\r\nimputation_five_minsc as (\r\n    {{ get_county_name('imputation_five_mins') }}\r\n),\r\n\r\nimputation_five_minscc as (\r\n    {{ get_city_name('imputation_five_minsc') }}\r\n)\r\n\r\nselect * from imputation_five_minscc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/imputation__detector_imputed_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n\nwith imputation_five_mins as (\n    select *\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    where\n        station_type in ('ML', 'HV')\n        and sample_date >= dateadd(day, -4, current_date)\n),\n\nimputation_five_minsc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            imputation_five_mins.*,\n            c.county_name,\n            c.county_abb\n        from imputation_five_mins\n        inner join county as c\n        on imputation_five_mins.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\nimputation_five_minscc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from imputation_five_minsc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from imputation_five_minscc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.imputation__detector_summary": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "imputation__detector_summary", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/imputation/imputation__detector_summary.sql", "original_file_path": "models/marts/imputation/imputation__detector_summary.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.imputation__detector_summary", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "imputation__detector_summary"], "alias": "imputation__detector_summary", "checksum": {"name": "sha256", "checksum": "50a891e56de4777f7f17a8e44fad2df7f6df55cb1c46c0c92e13713c449b7036"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XS_PRD", "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "This model summarize the pentration of imputation by each method.\nIt provides the total number of samples for five minutes in station\nlevel as well as percetage of observed and imputed by each method\nby sample date. This model is unique at the level of SAMPLE_DATE + DETECTOR_ID.\n", "columns": {"DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "The number of samples collected in five minutes time period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_GLOBAL_REGRESSION": {"name": "PCT_OF_OCCUPANCY_GLOBAL_REGRESSION", "description": "Percentage of imputed occupancy using global regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_LOCAL_REGRESSION": {"name": "PCT_OF_OCCUPANCY_LOCAL_REGRESSION", "description": "Percentage of imputed occupancy using local regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_REGIONAL_REGRESSION": {"name": "PCT_OF_OCCUPANCY_REGIONAL_REGRESSION", "description": "Percentage of imputed occupancy using regional regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_LOCAL_AVG": {"name": "PCT_OF_OCCUPANCY_LOCAL_AVG", "description": "Percentage of imputed occupancy using local average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_REGIONAL_AVG": {"name": "PCT_OF_OCCUPANCY_REGIONAL_AVG", "description": "Percentage of imputed occupancy using regional average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_OBSERVED": {"name": "PCT_OF_OCCUPANCY_OBSERVED", "description": "Percentage of observed occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_OCCUPANCY_UNOBSERVED_UNIMPUTED": {"name": "PCT_OF_OCCUPANCY_UNOBSERVED_UNIMPUTED", "description": "Percentage of unobserved and unimputed occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_GLOBAL_REGRESSION": {"name": "PCT_OF_SPEED_GLOBAL_REGRESSION", "description": "Percentage of imputed speed using global regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_LOCAL_REGRESSION": {"name": "PCT_OF_SPEED_LOCAL_REGRESSION", "description": "Percentage of imputed speed using local regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_REGIONAL_REGRESSION": {"name": "PCT_OF_SPEED_REGIONAL_REGRESSION", "description": "Percentage of imputed speed using regional regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_LOCAL_AVG": {"name": "PCT_OF_SPEED_LOCAL_AVG", "description": "Percentage of imputed speed using local average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_REGIONAL_AVG": {"name": "PCT_OF_SPEED_REGIONAL_AVG", "description": "Percentage of imputed speed using regional average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_OBSERVED": {"name": "PCT_OF_SPEED_OBSERVED", "description": "Percentage of observed speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_SPEED_UNOBSERVED_UNIMPUTED": {"name": "PCT_OF_SPEED_UNOBSERVED_UNIMPUTED", "description": "Percentage of unobserved and unimputed speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_GLOBAL_REGRESSION": {"name": "PCT_OF_VOLUME_GLOBAL_REGRESSION", "description": "Percentage of imputed volume using global regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_LOCAL_REGRESSION": {"name": "PCT_OF_VOLUME_LOCAL_REGRESSION", "description": "Percentage of imputed volume using local regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_REGIONAL_REGRESSION": {"name": "PCT_OF_VOLUME_REGIONAL_REGRESSION", "description": "Percentage of imputed volume using regional regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_LOCAL_AVG": {"name": "PCT_OF_VOLUME_LOCAL_AVG", "description": "Percentage of imputed volume using local average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_REGIONAL_AVG": {"name": "PCT_OF_VOLUME_REGIONAL_AVG", "description": "Percentage of imputed volume using regional average.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_OBSERVED": {"name": "PCT_OF_VOLUME_OBSERVED", "description": "Percentage of observed volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PCT_OF_VOLUME_UNOBSERVED_UNIMPUTED": {"name": "PCT_OF_VOLUME_UNOBSERVED_UNIMPUTED", "description": "Percentage of unobserved and unimputed volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "imputation", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632023.925044, "relation_name": "ANALYTICS_PRD.imputation.imputation__detector_summary", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['detector_id', 'sample_date'],\r\n    snowflake_warehouse=get_snowflake_refresh_warehouse(big=\"XL\"),\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\r\n) }}\r\n\r\n-- read observed and imputed five minutes data\r\nwith obs_imputed_five_minutes_agg as (\r\n    select *\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\nimputation_count as (\r\n    select\r\n        station_id,\r\n        detector_id,\r\n        lane,\r\n        sample_date,\r\n        count(*) as sample_ct,\r\n        count_if(occupancy_imputation_method = 'local') as occ_local_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'regional') as occ_regional_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'global') as occ_global_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'local_avg') as occ_local_avg_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'regional_avg') as occ_regional_avg_imputation_sample,\r\n        count_if(occupancy_imputation_method = 'observed') as occ_observed_sample,\r\n        count_if(occupancy_imputation_method is NULL) as occ_unobserved_unimputed,\r\n        count_if(volume_imputation_method = 'local') as vol_local_imputation_sample,\r\n        count_if(volume_imputation_method = 'regional') as vol_regional_imputation_sample,\r\n        count_if(volume_imputation_method = 'global') as vol_global_imputation_sample,\r\n        count_if(volume_imputation_method = 'local_avg') as vol_local_avg_imputation_sample,\r\n        count_if(volume_imputation_method = 'regional_avg') as vol_regional_avg_imputation_sample,\r\n        count_if(volume_imputation_method = 'observed') as vol_observed_sample,\r\n        count_if(volume_imputation_method is NULL) as vol_unobserved_unimputed,\r\n        count_if(speed_imputation_method = 'local') as speed_local_imputation_sample,\r\n        count_if(speed_imputation_method = 'regional') as speed_regional_imputation_sample,\r\n        count_if(speed_imputation_method = 'global') as speed_global_imputation_sample,\r\n        count_if(speed_imputation_method = 'local_avg') as speed_local_avg_imputation_sample,\r\n        count_if(speed_imputation_method = 'regional_avg') as speed_regional_avg_imputation_sample,\r\n        count_if(speed_imputation_method = 'observed') as speed_observed_sample,\r\n        count_if(speed_imputation_method is NULL) as speed_unobserved_unimputed\r\n    from obs_imputed_five_minutes_agg\r\n    group by detector_id, sample_date, station_id, lane\r\n),\r\n\r\nimputation_pct as (\r\n    select\r\n        detector_id,\r\n        station_id,\r\n        lane,\r\n        sample_date,\r\n        sample_ct,\r\n        coalesce(occ_local_imputation_sample, 0) / nullifzero(sample_ct)\r\n        * 100 as pct_of_occupancy_local_regression,\r\n        coalesce(occ_regional_imputation_sample, 0) / nullifzero(sample_ct)\r\n        * 100 as pct_of_occupancy_regional_regression,\r\n        coalesce(occ_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_global_regression,\r\n        coalesce(occ_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_local_avg,\r\n        coalesce(occ_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_regional_avg,\r\n        coalesce(occ_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_unobserved_unimputed,\r\n        coalesce(occ_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_observed,\r\n\r\n        coalesce(vol_local_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_local_regression,\r\n        coalesce(vol_regional_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_regional_regression,\r\n        coalesce(vol_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_global_regression,\r\n        coalesce(vol_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_local_avg,\r\n        coalesce(vol_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_regional_avg,\r\n        coalesce(vol_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_unobserved_unimputed,\r\n        coalesce(vol_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_observed,\r\n\r\n        coalesce(speed_local_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_local_regression,\r\n        coalesce(speed_regional_imputation_sample, 0) / nullifzero(sample_ct)\r\n        * 100 as pct_of_speed_regional_regression,\r\n        coalesce(speed_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_global_regression,\r\n        coalesce(speed_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_local_avg,\r\n        coalesce(speed_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_regional_avg,\r\n        coalesce(speed_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_unobserved_unimputed,\r\n        coalesce(speed_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_observed\r\n    from imputation_count\r\n)\r\n\r\nselect * from imputation_pct", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/imputation__detector_summary.sql", "compiled": true, "compiled_code": "\n\n-- read observed and imputed five minutes data\nwith obs_imputed_five_minutes_agg as (\n    select *\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    where \n        -- Look back to account for any late-arriving data\n            sample_date > (\n                select\n                    dateadd(\n                        day,\n                        -2,\n                        max(sample_date)\n                    )\n                from ANALYTICS_PRD.imputation.imputation__detector_summary\n            )\n            \n    \n),\n\nimputation_count as (\n    select\n        station_id,\n        detector_id,\n        lane,\n        sample_date,\n        count(*) as sample_ct,\n        count_if(occupancy_imputation_method = 'local') as occ_local_imputation_sample,\n        count_if(occupancy_imputation_method = 'regional') as occ_regional_imputation_sample,\n        count_if(occupancy_imputation_method = 'global') as occ_global_imputation_sample,\n        count_if(occupancy_imputation_method = 'local_avg') as occ_local_avg_imputation_sample,\n        count_if(occupancy_imputation_method = 'regional_avg') as occ_regional_avg_imputation_sample,\n        count_if(occupancy_imputation_method = 'observed') as occ_observed_sample,\n        count_if(occupancy_imputation_method is NULL) as occ_unobserved_unimputed,\n        count_if(volume_imputation_method = 'local') as vol_local_imputation_sample,\n        count_if(volume_imputation_method = 'regional') as vol_regional_imputation_sample,\n        count_if(volume_imputation_method = 'global') as vol_global_imputation_sample,\n        count_if(volume_imputation_method = 'local_avg') as vol_local_avg_imputation_sample,\n        count_if(volume_imputation_method = 'regional_avg') as vol_regional_avg_imputation_sample,\n        count_if(volume_imputation_method = 'observed') as vol_observed_sample,\n        count_if(volume_imputation_method is NULL) as vol_unobserved_unimputed,\n        count_if(speed_imputation_method = 'local') as speed_local_imputation_sample,\n        count_if(speed_imputation_method = 'regional') as speed_regional_imputation_sample,\n        count_if(speed_imputation_method = 'global') as speed_global_imputation_sample,\n        count_if(speed_imputation_method = 'local_avg') as speed_local_avg_imputation_sample,\n        count_if(speed_imputation_method = 'regional_avg') as speed_regional_avg_imputation_sample,\n        count_if(speed_imputation_method = 'observed') as speed_observed_sample,\n        count_if(speed_imputation_method is NULL) as speed_unobserved_unimputed\n    from obs_imputed_five_minutes_agg\n    group by detector_id, sample_date, station_id, lane\n),\n\nimputation_pct as (\n    select\n        detector_id,\n        station_id,\n        lane,\n        sample_date,\n        sample_ct,\n        coalesce(occ_local_imputation_sample, 0) / nullifzero(sample_ct)\n        * 100 as pct_of_occupancy_local_regression,\n        coalesce(occ_regional_imputation_sample, 0) / nullifzero(sample_ct)\n        * 100 as pct_of_occupancy_regional_regression,\n        coalesce(occ_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_global_regression,\n        coalesce(occ_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_local_avg,\n        coalesce(occ_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_regional_avg,\n        coalesce(occ_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_unobserved_unimputed,\n        coalesce(occ_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_occupancy_observed,\n\n        coalesce(vol_local_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_local_regression,\n        coalesce(vol_regional_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_regional_regression,\n        coalesce(vol_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_global_regression,\n        coalesce(vol_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_local_avg,\n        coalesce(vol_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_regional_avg,\n        coalesce(vol_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_unobserved_unimputed,\n        coalesce(vol_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_volume_observed,\n\n        coalesce(speed_local_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_local_regression,\n        coalesce(speed_regional_imputation_sample, 0) / nullifzero(sample_ct)\n        * 100 as pct_of_speed_regional_regression,\n        coalesce(speed_global_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_global_regression,\n        coalesce(speed_local_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_local_avg,\n        coalesce(speed_regional_avg_imputation_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_regional_avg,\n        coalesce(speed_unobserved_unimputed, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_unobserved_unimputed,\n        coalesce(speed_observed_sample, 0) / nullifzero(sample_ct) * 100 as pct_of_speed_observed\n    from imputation_count\n)\n\nselect * from imputation_pct", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DETECTOR_ID", "SAMPLE_DATE"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "diagnostics__detector_daily_by_station", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/diagnostics/diagnostics__detector_daily_by_station.sql", "original_file_path": "models/marts/diagnostics/diagnostics__detector_daily_by_station.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "diagnostics__detector_daily_by_station"], "alias": "diagnostics__detector_daily_by_station", "checksum": {"name": "sha256", "checksum": "ef22f1c1918050e353d0d7f8ae495ba4c5790f99c31b88a93c2e593487e6fd9c"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "This file contains detector status data aggregated to the station level.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_name": {"name": "county_name", "description": "The real county name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_abb": {"name": "county_abb", "description": "The county name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_name": {"name": "city_name", "description": "The real city name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_abb": {"name": "city_abb", "description": "The city name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "good_detector_count": {"name": "good_detector_count", "description": "The number of good detectors per day and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bad_detector_count": {"name": "bad_detector_count", "description": "The number of bad detectors per day and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "average_sample_count": {"name": "average_sample_count", "description": "The average number of samples from all detectors reported from.\nper station and day\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "down_or_no_data_count": {"name": "down_or_no_data_count", "description": "The number of down or no data bad detectors per day and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "insufficient_data_count": {"name": "insufficient_data_count", "description": "The number of bad detectors per day and station that have insufficient data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "card_off_count": {"name": "card_off_count", "description": "The number of bad detectors per day and station that card was off.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_val_count": {"name": "high_val_count", "description": "The number of bad detectors per day and station that had extremely high value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "intermittent_count": {"name": "intermittent_count", "description": "The number of bad detectors per day and station that had intermittent detector issues.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "constant_count": {"name": "constant_count", "description": "The number of bad detectors per day and station that had constant occupancy issues.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_count": {"name": "detector_count", "description": "Number of detectors at the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "diagnostics", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632024.0803719, "relation_name": "ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_by_station", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\r\n) }}\r\n\r\nwith\r\n\r\ndetector_status as (\r\n    select * from {{ ref(\"int_diagnostics__detector_status\") }}\r\n),\r\n\r\ndetector_status_with_count as (\r\n    select\r\n        district,\r\n        station_id,\r\n        lane,\r\n        station_type,\r\n        sample_date,\r\n        sample_ct,\r\n        count_if(status = 'Good') as good_detector,\r\n        count_if(status != 'Good') as bad_detector,\r\n        count_if(status = 'Down/No Data') as down_or_no_data,\r\n        count_if(status = 'Insufficient Data') as insufficient_data,\r\n        count_if(status = 'Card Off') as card_off,\r\n        count_if(status = 'High Val') as high_val,\r\n        count_if(status = 'Intermittent') as intermittent,\r\n        count_if(status = 'Constant') as constant\r\n    from detector_status\r\n    group by district, station_id, lane, station_type, sample_date, sample_ct\r\n),\r\n\r\ndetector_status_by_station as (\r\n    select\r\n        district,\r\n        station_id,\r\n        station_type,\r\n        sample_date,\r\n        count(*) as detector_count,\r\n        round(avg(sample_ct)) as average_sample_count,\r\n        sum(good_detector) as good_detector_count,\r\n        sum(bad_detector) as bad_detector_count,\r\n        sum(down_or_no_data) as down_or_no_data_count,\r\n        sum(insufficient_data) as insufficient_data_count,\r\n        sum(card_off) as card_off_count,\r\n        sum(high_val) as high_val_count,\r\n        sum(intermittent) as intermittent_count,\r\n        sum(constant) as constant_count\r\n    from detector_status_with_count\r\n    group by district, station_id, station_type, sample_date\r\n),\r\n\r\ndmeta as (\r\n    select * from {{ ref('int_vds__station_config') }}\r\n),\r\n\r\ndetector_status_by_station_with_metadata as (\r\n    select\r\n        dsbs.*,\r\n        dmeta.state_postmile,\r\n        dmeta.absolute_postmile,\r\n        dmeta.latitude,\r\n        dmeta.longitude,\r\n        dmeta.physical_lanes,\r\n        dmeta.county,\r\n        dmeta.city,\r\n        dmeta.freeway,\r\n        dmeta.direction,\r\n        dmeta.length\r\n    from detector_status_by_station as dsbs\r\n    inner join dmeta\r\n        on\r\n            dsbs.station_id = dmeta.station_id\r\n            and dsbs.sample_date >= dmeta._valid_from\r\n            and (\r\n                dsbs.sample_date < dmeta._valid_to\r\n                or dmeta._valid_to is null\r\n            )\r\n    where dsbs.sample_date is not null\r\n),\r\n\r\ndetector_status_by_station_with_metadatac as (\r\n    {{ get_county_name('detector_status_by_station_with_metadata') }}\r\n),\r\n\r\ndetector_status_by_station_with_metadatacc as (\r\n    {{ get_city_name('detector_status_by_station_with_metadatac') }}\r\n)\r\n\r\nselect * from detector_status_by_station_with_metadatacc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_vds__station_config", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/diagnostics__detector_daily_by_station.sql", "compiled": true, "compiled_code": "\n\nwith\n\ndetector_status as (\n    select * from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n),\n\ndetector_status_with_count as (\n    select\n        district,\n        station_id,\n        lane,\n        station_type,\n        sample_date,\n        sample_ct,\n        count_if(status = 'Good') as good_detector,\n        count_if(status != 'Good') as bad_detector,\n        count_if(status = 'Down/No Data') as down_or_no_data,\n        count_if(status = 'Insufficient Data') as insufficient_data,\n        count_if(status = 'Card Off') as card_off,\n        count_if(status = 'High Val') as high_val,\n        count_if(status = 'Intermittent') as intermittent,\n        count_if(status = 'Constant') as constant\n    from detector_status\n    group by district, station_id, lane, station_type, sample_date, sample_ct\n),\n\ndetector_status_by_station as (\n    select\n        district,\n        station_id,\n        station_type,\n        sample_date,\n        count(*) as detector_count,\n        round(avg(sample_ct)) as average_sample_count,\n        sum(good_detector) as good_detector_count,\n        sum(bad_detector) as bad_detector_count,\n        sum(down_or_no_data) as down_or_no_data_count,\n        sum(insufficient_data) as insufficient_data_count,\n        sum(card_off) as card_off_count,\n        sum(high_val) as high_val_count,\n        sum(intermittent) as intermittent_count,\n        sum(constant) as constant_count\n    from detector_status_with_count\n    group by district, station_id, station_type, sample_date\n),\n\ndmeta as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\ndetector_status_by_station_with_metadata as (\n    select\n        dsbs.*,\n        dmeta.state_postmile,\n        dmeta.absolute_postmile,\n        dmeta.latitude,\n        dmeta.longitude,\n        dmeta.physical_lanes,\n        dmeta.county,\n        dmeta.city,\n        dmeta.freeway,\n        dmeta.direction,\n        dmeta.length\n    from detector_status_by_station as dsbs\n    inner join dmeta\n        on\n            dsbs.station_id = dmeta.station_id\n            and dsbs.sample_date >= dmeta._valid_from\n            and (\n                dsbs.sample_date < dmeta._valid_to\n                or dmeta._valid_to is null\n            )\n    where dsbs.sample_date is not null\n),\n\ndetector_status_by_station_with_metadatac as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            detector_status_by_station_with_metadata.*,\n            c.county_name,\n            c.county_abb\n        from detector_status_by_station_with_metadata\n        inner join county as c\n        on detector_status_by_station_with_metadata.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ndetector_status_by_station_with_metadatacc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from detector_status_by_station_with_metadatac as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from detector_status_by_station_with_metadatacc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "diagnostics__detector_monthly_by_station", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/diagnostics/diagnostics__detector_monthly_by_station.sql", "original_file_path": "models/marts/diagnostics/diagnostics__detector_monthly_by_station.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "diagnostics__detector_monthly_by_station"], "alias": "diagnostics__detector_monthly_by_station", "checksum": {"name": "sha256", "checksum": "7b23e3dc6736d2686f4ed41db8f40ab57e851be6f3b058d202c9ddeeb0850d5a"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_month)) || '/month=' || to_varchar(date_part(month, sample_month)))"}, "tags": [], "description": "This file contains detector status data aggregated to the station level in monthly temporal resolution.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_month": {"name": "sample_month", "description": "The month associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_name": {"name": "county_name", "description": "The real county name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_abb": {"name": "county_abb", "description": "The county name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_name": {"name": "city_name", "description": "The real city name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_abb": {"name": "city_abb", "description": "The city name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station in that time period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_detector_count": {"name": "monthly_detector_count", "description": "Total number of good and bad detectors in a month per station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_good_detector_count": {"name": "monthly_good_detector_count", "description": "The number of good detectors per month and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_bad_detector_count": {"name": "monthly_bad_detector_count", "description": "The number of bad detectors per month and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "down_or_no_data_count": {"name": "down_or_no_data_count", "description": "The number of down or no data bad detectors per month and station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "insufficient_data_count": {"name": "insufficient_data_count", "description": "The number of bad detectors per month and station that have insufficient data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "card_off_count": {"name": "card_off_count", "description": "The number of bad detectors per month and station that card was off.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_val_count": {"name": "high_val_count", "description": "The number of bad detectors per month and station that had extremely high value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "intermittent_count": {"name": "intermittent_count", "description": "The number of bad detectors per month and station that had intermittent detector issues.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "constant_count": {"name": "constant_count", "description": "The number of bad detectors per month and station that had constant occupancy issues.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "diagnostics", "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_month)) || '/month=' || to_varchar(date_part(month, sample_month)))"}, "created_at": 1755632024.083577, "relation_name": "ANALYTICS_PRD.diagnostics.diagnostics__detector_monthly_by_station", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_month)) || '/month=' || to_varchar(date_part(month, sample_month)))\",\r\n) }}\r\n\r\nwith detector_daily_status as (\r\n    select\r\n        *,\r\n        DATE_TRUNC(month, sample_date) as sample_month,\r\n        ROW_NUMBER() over (partition by sample_month, station_id order by sample_date desc) as rn\r\n    from {{ ref('diagnostics__detector_daily_by_station') }}\r\n),\r\n\r\ndetector_monthly_status_by_station as (\r\n    select\r\n        sample_month,\r\n        station_id,\r\n        MAX(case when rn = 1 then county end) as county,\r\n        MAX(case when rn = 1 then county_name end) as county_name,\r\n        MAX(case when rn = 1 then county_abb end) as county_abb,\r\n        MAX(case when rn = 1 then city end) as city,\r\n        MAX(case when rn = 1 then city_name end) as city_name,\r\n        MAX(case when rn = 1 then city_abb end) as city_abb,\r\n        MAX(case when rn = 1 then district end) as district,\r\n        MAX(case when rn = 1 then state_postmile end) as state_postmile,\r\n        MAX(case when rn = 1 then absolute_postmile end) as absolute_postmile,\r\n        MAX(case when rn = 1 then latitude end) as latitude,\r\n        MAX(case when rn = 1 then longitude end) as longitude,\r\n        MAX(case when rn = 1 then station_type end) as station_type,\r\n        MAX(case when rn = 1 then freeway end) as freeway,\r\n        MAX(case when rn = 1 then direction end) as direction,\r\n        SUM(detector_count) as monthly_detector_count,\r\n        SUM(good_detector_count) as monthly_good_detector_count,\r\n        SUM(bad_detector_count) as monthly_bad_detector_count,\r\n        SUM(down_or_no_data_count) as down_or_no_data_count,\r\n        SUM(insufficient_data_count) as insufficient_data_count,\r\n        SUM(card_off_count) as card_off_count,\r\n        SUM(high_val_count) as high_val_count,\r\n        SUM(intermittent_count) as intermittent_count,\r\n        SUM(constant_count) as constant_count\r\n    from\r\n        detector_daily_status\r\n    group by\r\n        station_id,\r\n        sample_month\r\n)\r\n\r\nselect * from detector_monthly_status_by_station", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_by_station", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/diagnostics__detector_monthly_by_station.sql", "compiled": true, "compiled_code": "\n\nwith detector_daily_status as (\n    select\n        *,\n        DATE_TRUNC(month, sample_date) as sample_month,\n        ROW_NUMBER() over (partition by sample_month, station_id order by sample_date desc) as rn\n    from ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_by_station\n),\n\ndetector_monthly_status_by_station as (\n    select\n        sample_month,\n        station_id,\n        MAX(case when rn = 1 then county end) as county,\n        MAX(case when rn = 1 then county_name end) as county_name,\n        MAX(case when rn = 1 then county_abb end) as county_abb,\n        MAX(case when rn = 1 then city end) as city,\n        MAX(case when rn = 1 then city_name end) as city_name,\n        MAX(case when rn = 1 then city_abb end) as city_abb,\n        MAX(case when rn = 1 then district end) as district,\n        MAX(case when rn = 1 then state_postmile end) as state_postmile,\n        MAX(case when rn = 1 then absolute_postmile end) as absolute_postmile,\n        MAX(case when rn = 1 then latitude end) as latitude,\n        MAX(case when rn = 1 then longitude end) as longitude,\n        MAX(case when rn = 1 then station_type end) as station_type,\n        MAX(case when rn = 1 then freeway end) as freeway,\n        MAX(case when rn = 1 then direction end) as direction,\n        SUM(detector_count) as monthly_detector_count,\n        SUM(good_detector_count) as monthly_good_detector_count,\n        SUM(bad_detector_count) as monthly_bad_detector_count,\n        SUM(down_or_no_data_count) as down_or_no_data_count,\n        SUM(insufficient_data_count) as insufficient_data_count,\n        SUM(card_off_count) as card_off_count,\n        SUM(high_val_count) as high_val_count,\n        SUM(intermittent_count) as intermittent_count,\n        SUM(constant_count) as constant_count\n    from\n        detector_daily_status\n    group by\n        station_id,\n        sample_month\n)\n\nselect * from detector_monthly_status_by_station", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "diagnostics__detector_daily_detail", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "marts/diagnostics/diagnostics__detector_daily_detail.sql", "original_file_path": "models/marts/diagnostics/diagnostics__detector_daily_detail.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "diagnostics__detector_daily_detail"], "alias": "diagnostics__detector_daily_detail", "checksum": {"name": "sha256", "checksum": "a9ce6b99ad8b518c694d4b59e8fc8b621347cb93b71d65c7240aa4b2fba2d185"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": "ANALYTICS_PRD", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ unload_relation(strip_leading_words=1) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))"}, "tags": [], "description": "This model contains detector status data aggregated to the detector level.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The detector health value based on a series of validations made from\nsample counts\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_name": {"name": "county_name", "description": "The real county name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_abb": {"name": "county_abb", "description": "The county name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_name": {"name": "city_name", "description": "The real city name that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_abb": {"name": "city_abb", "description": "The city name's abbreviation that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy\nvalues contain any non-null value\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_ct": {"name": "zero_vol_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) value\nequals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_ct": {"name": "zero_occ_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_pos_occ_ct": {"name": "zero_vol_pos_occ_ct", "description": "Counts the number of raw data samples where a lane's volume (flow)\nvalue equals 0 but occupancy is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_pos_vol_ct": {"name": "zero_occ_pos_vol_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0 but volume (flow) is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_volume_ct": {"name": "high_volume_ct", "description": "Counts the number of volume (flow) values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_ct": {"name": "high_occupancy_ct", "description": "Counts the number of occupancy values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active_date": {"name": "active_date", "description": "Date a station is considered active based on the meta data configuration file from district.\nThis value determines what calculations or diagnostics are associated with a station and it's\nassocaited detectors on any given date while it is active.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_diagnostic_method_id": {"name": "station_diagnostic_method_id", "description": "Diagnostic method ID for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "Type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane number of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district_feed_working": {"name": "district_feed_working", "description": "District feed working status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num_working": {"name": "line_num_working", "description": "Line number working status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_feed_working": {"name": "controller_feed_working", "description": "Controller feed working status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_feed_working": {"name": "station_feed_working", "description": "Station feed working status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_feed_working": {"name": "detector_feed_working", "description": "Detector feed working status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_occupancy_delta": {"name": "min_occupancy_delta", "description": "Minimum occupancy delta value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/marts/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "post-hook": "{{ unload_relation(strip_leading_words=1) }}", "database": "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}", "schema": "diagnostics", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\"))"}, "created_at": 1755632024.0746202, "relation_name": "ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_detail", "raw_code": "{{ config(\r\n    materialized=\"table\",\r\n    unload_partitioning=\"('year=' || to_varchar(date_part(year, sample_date)) || '/month=' || to_varchar(date_part(month, sample_date)))\",\r\n) }}\r\n\r\nwith\r\n\r\ndetector_status as (\r\n    select * from {{ ref(\"int_diagnostics__detector_status\") }}\r\n    where sample_date is not null and lane is not null\r\n),\r\n\r\ndetector_statusc as (\r\n    {{ get_county_name('detector_status') }}\r\n),\r\n\r\ndetector_statuscc as (\r\n    {{ get_city_name('detector_statusc') }}\r\n)\r\n\r\nselect * from detector_statuscc", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "counties", "package": null, "version": null}, {"name": "cities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_county_name", "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro.caldata_mdsa_caltrans_pems.unload_relation"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "seed.caldata_mdsa_caltrans_pems.counties", "seed.caldata_mdsa_caltrans_pems.cities"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/diagnostics__detector_daily_detail.sql", "compiled": true, "compiled_code": "\n\nwith\n\ndetector_status as (\n    select * from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where sample_date is not null and lane is not null\n),\n\ndetector_statusc as (\n    \n    with county as (\n        select\n            county_id,\n            lower(county_name) as county_name,\n            native_id as county_abb\n        from ANALYTICS_PRD.clearinghouse.counties\n    ),\n    station_with_county as (\n        select\n            detector_status.*,\n            c.county_name,\n            c.county_abb\n        from detector_status\n        inner join county as c\n        on detector_status.county = c.county_id\n    )\n\n    select * from station_with_county\n\n),\n\ndetector_statuscc as (\n    \n    with city as (\n        select\n            city_id,\n            city_name,\n            native_id\n        from ANALYTICS_PRD.analytics.cities\n    ),\n    station_with_city_id as (\n        select\n            st.*,\n            c.city_name,\n            c.native_id as city_abb\n        from detector_statusc as st\n        inner join city as c\n        on st.city = c.city_id\n    )\n\n    select * from station_with_city_id\n\n)\n\nselect * from detector_statuscc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__detector_metrics_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__detector_metrics_agg_five_minutes.sql", "original_file_path": "models/intermediate/performance/int_performance__detector_metrics_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__detector_metrics_agg_five_minutes"], "alias": "int_performance__detector_metrics_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "af99fd5b70194839e4a1fefd65eb4b80ca8564391d6571d96b5b93e71ddf3809"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This model contains performance metrics by detector based on data from\nthe station_meta and five_minute_agg models. This data forms the basis for\nperformance metrics that will be aggregated over various spatial/temporal\nsegments/timeframes.\n", "columns": {"sample_date": {"name": "sample_date", "description": "The date associated with five minute aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_timestamp": {"name": "sample_timestamp", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a route and station from raw data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy\nvalues contain any non-null value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_sum": {"name": "volume_sum", "description": "The sum of the flow values for a detector over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_avg": {"name": "occupancy_avg", "description": "The average of the occupancy values over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_five_mins": {"name": "speed_five_mins", "description": "Actual reported speed if available otherwise the preliminary speed calculation\nin miles/hour based on the simplified version of the speed formula located at\nhttps://pems.dot.ca.gov/Papers/vanzwet_gfactor.pdf\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vmt": {"name": "vmt", "description": "The sum of the miles of freeway driven by each vehicle for a given unit of\ntime and a given section of the freeway.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vht": {"name": "vht", "description": "Vehicle Hours Travelled (VHT) is calculated over a given unit of time and a\ngiven section of freeway. VHT is the amount of time spent by all of the\nvehicles on the freeway.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "q_value": {"name": "q_value", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region. For a single location its interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tti": {"name": "tti", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_imputation_method": {"name": "speed_imputation_method", "description": "The method (local/regional/global) used to impute the speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_imputation_method": {"name": "volume_imputation_method", "description": "The method (local/regional/global) used to impute the volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_imputation_method": {"name": "occupancy_imputation_method", "description": "The method (local/regional/global) used to impute the occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "The length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Represents the distance in miles from the start of the highway to\nthe beginning and end of each highway section.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_from": {"name": "station_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_to": {"name": "station_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_detector_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1472816, "relation_name": "ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"sample_date\"],\r\n    unique_key=[\"detector_id\", \"sample_timestamp\"],\r\n    on_schema_change=\"sync_all_columns\",\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\nwith\r\nfive_minute_agg as (\r\n    select\r\n        station_id,\r\n        lane,\r\n        detector_id,\r\n        sample_date,\r\n        sample_timestamp,\r\n        district,\r\n        county,\r\n        city,\r\n        freeway,\r\n        direction,\r\n        length,\r\n        sample_ct,\r\n        volume_sum,\r\n        occupancy_avg,\r\n        speed_five_mins,\r\n        station_type,\r\n        absolute_postmile,\r\n        volume_imputation_method,\r\n        speed_imputation_method,\r\n        occupancy_imputation_method,\r\n        station_valid_from,\r\n        station_valid_to\r\n    from {{ ref('int_imputation__detector_imputed_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\nvmt_vht_metrics as (\r\n    select\r\n        *,\r\n        --vehicle-miles/5-min\r\n        volume_sum * length as vmt,\r\n        --vehicle-hours/5-min\r\n        volume_sum * length / nullifzero(speed_five_mins) as vht,\r\n        --q is in miles per hour for single station\r\n        vmt / nullifzero(vht) as q_value,\r\n        -- travel time\r\n        60 / nullifzero(q_value) as tti\r\n    from five_minute_agg\r\n),\r\n\r\ndelay_metrics as (\r\n    select\r\n        vvm.*,\r\n        /*  The formula for delay is: F * (L/V - L/V_t). F = flow (volume),\r\n        L = length of the segment, V = current speed, and V_t = threshold speed. */\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / {{ value }})), 0)\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n\r\n    from vmt_vht_metrics as vvm\r\n),\r\n\r\nproductivity_metrics as (\r\n    select\r\n        dm.*,\r\n        /*\r\n        The formula for Productivity is: Length * (1 - (actual flow / flow capacity))\r\n        */\r\n        {% for value in var(\"V_t\") %}\r\n            case\r\n                when dm.speed_five_mins >= {{ value }}\r\n                    then 0\r\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\r\n            end\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n\r\n    from delay_metrics as dm\r\n    inner join {{ ref(\"int_performance__max_capacity\") }} as mc\r\n        on dm.detector_id = mc.detector_id\r\n)\r\n\r\nselect * from productivity_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}, {"name": "int_performance__max_capacity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__detector_metrics_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\nwith\nfive_minute_agg as (\n    select\n        station_id,\n        lane,\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        district,\n        county,\n        city,\n        freeway,\n        direction,\n        length,\n        sample_ct,\n        volume_sum,\n        occupancy_avg,\n        speed_five_mins,\n        station_type,\n        absolute_postmile,\n        volume_imputation_method,\n        speed_imputation_method,\n        occupancy_imputation_method,\n        station_valid_from,\n        station_valid_to\n    from ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\n    where \n    1=1\n    \n),\n\nvmt_vht_metrics as (\n    select\n        *,\n        --vehicle-miles/5-min\n        volume_sum * length as vmt,\n        --vehicle-hours/5-min\n        volume_sum * length / nullifzero(speed_five_mins) as vht,\n        --q is in miles per hour for single station\n        vmt / nullifzero(vht) as q_value,\n        -- travel time\n        60 / nullifzero(q_value) as tti\n    from five_minute_agg\n),\n\ndelay_metrics as (\n    select\n        vvm.*,\n        /*  The formula for delay is: F * (L/V - L/V_t). F = flow (volume),\n        L = length of the segment, V = current speed, and V_t = threshold speed. */\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 35)), 0)\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 40)), 0)\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 45)), 0)\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 50)), 0)\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 55)), 0)\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            greatest(vvm.volume_sum * ((vvm.length / nullifzero(vvm.speed_five_mins)) - (vvm.length / 60)), 0)\n                as delay_60_mph\n            \n\n        \n\n    from vmt_vht_metrics as vvm\n),\n\nproductivity_metrics as (\n    select\n        dm.*,\n        /*\n        The formula for Productivity is: Length * (1 - (actual flow / flow capacity))\n        */\n        \n            case\n                when dm.speed_five_mins >= 35\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            case\n                when dm.speed_five_mins >= 40\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            case\n                when dm.speed_five_mins >= 45\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            case\n                when dm.speed_five_mins >= 50\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            case\n                when dm.speed_five_mins >= 55\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            case\n                when dm.speed_five_mins >= 60\n                    then 0\n                else dm.length * (1 - (dm.volume_sum / mc.max_capacity_5min))\n            end\n                as lost_productivity_60_mph\n            \n\n        \n\n    from delay_metrics as dm\n    inner join ANALYTICS_PRD.performance.int_performance__max_capacity as mc\n        on dm.detector_id = mc.detector_id\n)\n\nselect * from productivity_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_monthly.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_monthly"], "alias": "int_performance__station_metrics_agg_monthly", "checksum": {"name": "sha256", "checksum": "5f4bbfe88b10bb3546936db0c655767b5e674550a31a87695d0f8c603095ffea"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of volume,speed, and occupancy along with delays and lost productivity\nacross all lanes of the station. These metrics measure the monthly performance\nof the state highway system.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The starting date of each month of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_SPEED": {"name": "MONTHLY_SPEED", "description": "flow weighted monthly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VOLUME": {"name": "MONTHLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_OCCUPANCY": {"name": "MONTHLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VMT": {"name": "MONTHLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given month of the year and\na given section of the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VHT": {"name": "MONTHLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given month of the year and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given month of the year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TTI": {"name": "MONTHLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time across all the lanes.\nThe free-flow travel time is taken to be the time to traverse the link when traveling at 60MPH.\nFor loop-based performance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_Q_VALUE": {"name": "MONTHLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given month of the year across all the lanes.\nFor a single location its interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Monthly delay for threshold of 35 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Monthly delay for threshold of 40 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Monthly delay for threshold of 45 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Monthly delay for threshold of 50 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Monthly delay for threshold of 55 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Monthly delay for threshold of 60 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Monthly lost productivity for threshold of 35 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Monthly lost productivity for threshold of 40 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Monthly lost productivity for threshold of 45 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Monthly lost productivity for threshold of 50 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Monthly lost productivity for threshold of 55 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Monthly lost productivity for threshold of 60 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to\noperating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.1310081, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting first day of each month\r\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\r\n        date_trunc(month, sample_date) as sample_month\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly.\r\nmonthly_station_level_spatial_temporal_metrics as (\r\n    select\r\n        station_id,\r\n        sample_month,\r\n        any_value(station_type) as station_type,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(length) as length,\r\n        sum(daily_volume) as monthly_volume,\r\n        avg(daily_occupancy) as monthly_occupancy,\r\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as monthly_speed,\r\n        sum(daily_vmt) as monthly_vmt,\r\n        sum(daily_vht) as monthly_vht,\r\n        monthly_vmt / nullifzero(monthly_vht) as monthly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(monthly_q_value) as monthly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(\r\n                monthly_volume\r\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / {{ value }})),\r\n                0\r\n            )\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by station_id, sample_month\r\n)\r\n\r\nselect * from monthly_station_level_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_monthly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting first day of each month\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\n        date_trunc(month, sample_date) as sample_month\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly.\nmonthly_station_level_spatial_temporal_metrics as (\n    select\n        station_id,\n        sample_month,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(length) as length,\n        sum(daily_volume) as monthly_volume,\n        avg(daily_occupancy) as monthly_occupancy,\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as monthly_speed,\n        sum(daily_vmt) as monthly_vmt,\n        sum(daily_vht) as monthly_vht,\n        monthly_vmt / nullifzero(monthly_vht) as monthly_q_value,\n        -- travel time\n        60 / nullifzero(monthly_q_value) as monthly_tti,\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 35)),\n                0\n            )\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 40)),\n                0\n            )\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 45)),\n                0\n            )\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 50)),\n                0\n            )\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 55)),\n                0\n            )\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            greatest(\n                monthly_volume\n                * ((any_value(length) / nullifzero(monthly_speed)) - (any_value(length) / 60)),\n                0\n            )\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_daily_data\n    group by station_id, sample_month\n)\n\nselect * from monthly_station_level_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_daily.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_daily"], "alias": "int_performance__station_metrics_agg_daily", "checksum": {"name": "sha256", "checksum": "6094f3cd6182b33f07dde8e69d85dff661dcbffe4eed55340d8f4f9fe95d72d7"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Daily aggregation of volume, occupancy and speed along with delays and lost productivity across\nall lanes of the station. This measures the daily performance of the state highway system.\nThis can be used for weekly and monthly aggregation of PeMS performance metrics across all the lanes\nin a given station.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME": {"name": "DAILY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED": {"name": "DAILY_SPEED", "description": "flow weighted daily speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY": {"name": "DAILY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\n the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day across all the lanes. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "The Productivity performance metric is the number of lane-mile-days on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.1278114, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed hourly data\r\nwith station_hourly_data as (\r\n    select *\r\n    from {{ ref('int_performance__station_metrics_agg_hourly') }}\r\n),\r\n\r\n-- now aggregate hourly volume, occupancy and speed to daily level\r\ndaily_station_level_spatial_temporal_agg as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        length,\r\n        any_value(station_type) as station_type,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        sum(hourly_volume) as daily_volume,\r\n        avg(hourly_occupancy) as daily_occupancy,\r\n        sum(hourly_volume * hourly_speed) / nullifzero(sum(hourly_volume)) as daily_speed,\r\n        sum(hourly_vmt) as daily_vmt,\r\n        sum(hourly_vht) as daily_vht,\r\n        daily_vmt / nullifzero(daily_vht) as daily_q_value,\r\n        -- travel time\r\n        60 / nullifzero(daily_q_value) as daily_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(\r\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / {{ value }})), 0\r\n            )\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_hourly_data\r\n    group by station_id, sample_date, length\r\n)\r\n\r\nselect * from daily_station_level_spatial_temporal_agg", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_daily.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed hourly data\nwith station_hourly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_hourly\n),\n\n-- now aggregate hourly volume, occupancy and speed to daily level\ndaily_station_level_spatial_temporal_agg as (\n    select\n        station_id,\n        sample_date,\n        length,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        sum(hourly_volume) as daily_volume,\n        avg(hourly_occupancy) as daily_occupancy,\n        sum(hourly_volume * hourly_speed) / nullifzero(sum(hourly_volume)) as daily_speed,\n        sum(hourly_vmt) as daily_vmt,\n        sum(hourly_vht) as daily_vht,\n        daily_vmt / nullifzero(daily_vht) as daily_q_value,\n        -- travel time\n        60 / nullifzero(daily_q_value) as daily_tti,\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 35)), 0\n            )\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 40)), 0\n            )\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 45)), 0\n            )\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 50)), 0\n            )\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 55)), 0\n            )\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            greatest(\n                daily_volume * ((length / nullifzero(daily_speed)) - (length / 60)), 0\n            )\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_hourly_data\n    group by station_id, sample_date, length\n)\n\nselect * from daily_station_level_spatial_temporal_agg", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__bottleneck_delay_metrics_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__bottleneck_delay_metrics_agg_daily.sql", "original_file_path": "models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__bottleneck_delay_metrics_agg_daily"], "alias": "int_performance__bottleneck_delay_metrics_agg_daily", "checksum": {"name": "sha256", "checksum": "13a9bb1c2704ba3463a93f2ecc79a0f4868d9b0077e89c2578bdf41dc26b82ae"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["station_id", "sample_date", "time_shift"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "Daily aggregation of bottleneck performance by each station. This measures the hourly performance\nof the state highway system at the station level. This can be used for daily aggregation of bottleneck\nperformance metrics.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TIME_SHIFT": {"name": "TIME_SHIFT", "description": "- AM shift (5am - 10am)\n- PM shift (3pm - 8pm)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_DURATION": {"name": "DAILY_TIME_SHIFT_DURATION", "description": "How long the bottleneck was active within a time shift during that particular shift on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_BOTTLENECK_EXTENT": {"name": "DAILY_TIME_SHIFT_BOTTLENECK_EXTENT", "description": "Calculates the time shift congestion region starting from the bottleneck location towards upstream adjacent\ncongested stations, which is the summation of congestion lengths with same congestion sequence values.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_35_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_35_MPH", "description": "Daily time shift delay for threshold of 35 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_40_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_40_MPH", "description": "Daily time shift delay for threshold of 40 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_45_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_45_MPH", "description": "Daily time shift delay for threshold of 45 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_50_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_50_MPH", "description": "Daily time shift delay for threshold of 50 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_55_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_55_MPH", "description": "Daily time shift delay for threshold of 55 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TIME_SHIFT_SPATIAL_DELAY_60_MPH": {"name": "DAILY_TIME_SHIFT_SPATIAL_DELAY_60_MPH", "description": "Daily time shift delay for threshold of 60 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_bottleneck_delay.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='station_id'), Const(value='sample_date'), Const(value='time_shift')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.109109, "relation_name": "ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_daily", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['station_id','sample_date', 'time_shift'],\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\nwith hourly_spatial_bottleneck_delay_metrics as (\r\n    select *\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_hourly') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n/*aggregate hourly delay and bottleneck extent in a daily level. Since one day has\r\n3 time shifts, the aggregation would be in a time shift level*/\r\n\r\ndaily_time_shift_spatial_bottleneck_delay_metrics as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        time_shift,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(absolute_postmile) as absolute_postmile,\r\n        sum(hourly_duration) as daily_time_shift_duration,\r\n        avg(hourly_bottleneck_extent) as daily_time_shift_bottleneck_extent,\r\n        -- spatial delay aggregation in daily level, decomposed into time shift\r\n        {% for value in var(\"V_t\") %}\r\n            sum(hourly_spatial_delay_{{ value }}_mph)\r\n                as daily_time_shift_spatial_delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from hourly_spatial_bottleneck_delay_metrics\r\n    where time_shift is not NULL\r\n    group by station_id, sample_date, time_shift\r\n)\r\n\r\nselect * from daily_time_shift_spatial_bottleneck_delay_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_daily.sql", "compiled": true, "compiled_code": "\n\nwith hourly_spatial_bottleneck_delay_metrics as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_hourly\n    where \n    1=1\n    \n),\n\n/*aggregate hourly delay and bottleneck extent in a daily level. Since one day has\n3 time shifts, the aggregation would be in a time shift level*/\n\ndaily_time_shift_spatial_bottleneck_delay_metrics as (\n    select\n        station_id,\n        sample_date,\n        time_shift,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(absolute_postmile) as absolute_postmile,\n        sum(hourly_duration) as daily_time_shift_duration,\n        avg(hourly_bottleneck_extent) as daily_time_shift_bottleneck_extent,\n        -- spatial delay aggregation in daily level, decomposed into time shift\n        \n            sum(hourly_spatial_delay_35_mph)\n                as daily_time_shift_spatial_delay_35_mph\n            \n                ,\n            \n        \n            sum(hourly_spatial_delay_40_mph)\n                as daily_time_shift_spatial_delay_40_mph\n            \n                ,\n            \n        \n            sum(hourly_spatial_delay_45_mph)\n                as daily_time_shift_spatial_delay_45_mph\n            \n                ,\n            \n        \n            sum(hourly_spatial_delay_50_mph)\n                as daily_time_shift_spatial_delay_50_mph\n            \n                ,\n            \n        \n            sum(hourly_spatial_delay_55_mph)\n                as daily_time_shift_spatial_delay_55_mph\n            \n                ,\n            \n        \n            sum(hourly_spatial_delay_60_mph)\n                as daily_time_shift_spatial_delay_60_mph\n            \n        \n    from hourly_spatial_bottleneck_delay_metrics\n    where time_shift is not NULL\n    group by station_id, sample_date, time_shift\n)\n\nselect * from daily_time_shift_spatial_bottleneck_delay_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_hourly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_hourly.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_hourly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_hourly"], "alias": "int_performance__station_metrics_agg_hourly", "checksum": {"name": "sha256", "checksum": "9582c92ed81b7ee91ac1ed810bb352a814d6c365f2ab1e5247a47c5820773fd1"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["station_id", "sample_date", "sample_hour"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "Hourly aggregation of volume, occupancy and speed along with delays and lost productivity by\neach station regardless of lanes. This measures the hourly performance of the state\nhighway system at the station level. This can be used for daily aggregation of PeMS performance\nmetrics at the station level.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_HOUR": {"name": "SAMPLE_HOUR", "description": "the hour associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VOLUME": {"name": "HOURLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across the all lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPEED": {"name": "HOURLY_SPEED", "description": "flow weighted houly speed across the all lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_OCCUPANCY": {"name": "HOURLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across the all lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VMT": {"name": "HOURLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in an hour and a given section of the\nfreeway across the all lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VHT": {"name": "HOURLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated over an hour and a\ngiven section of freeway. VHT is the amount of time spent by all of the\nvehicles on the freeway.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_TTI": {"name": "HOURLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_Q_VALUE": {"name": "HOURLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region. For a single location its interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "The Productivity performance metric is the number of lane-mile-hours on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='station_id'), Const(value='sample_date'), Const(value='sample_hour')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1262207, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_hourly", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['station_id','sample_date', 'sample_hour'],\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n-- read the volume, occupancy and speed five minutes data\r\nwith station_five_mins_data as (\r\n    select\r\n        *,\r\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\r\n    from {{ ref('int_performance__detector_metrics_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- now aggregate five mins volume, occupancy and speed to hourly\r\nhourly_station_temporal_metrics as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        sample_timestamp_trunc as sample_hour,\r\n        any_value(station_type) as station_type,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(length) as length,\r\n        sum(volume_sum) as hourly_volume,\r\n        avg(occupancy_avg) as hourly_occupancy,\r\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as hourly_speed,\r\n        sum(vmt) as hourly_vmt,\r\n        sum(vht) as hourly_vht,\r\n        hourly_vmt / nullifzero(hourly_vht) as hourly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(hourly_q_value) as hourly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(\r\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / {{ value }})), 0\r\n            )\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_five_mins_data\r\n    group by station_id, sample_date, sample_hour\r\n)\r\n\r\nselect * from hourly_station_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_hourly.sql", "compiled": true, "compiled_code": "\n-- read the volume, occupancy and speed five minutes data\nwith station_five_mins_data as (\n    select\n        *,\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\n    where \n    1=1\n    \n),\n\n-- now aggregate five mins volume, occupancy and speed to hourly\nhourly_station_temporal_metrics as (\n    select\n        station_id,\n        sample_date,\n        sample_timestamp_trunc as sample_hour,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(length) as length,\n        sum(volume_sum) as hourly_volume,\n        avg(occupancy_avg) as hourly_occupancy,\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as hourly_speed,\n        sum(vmt) as hourly_vmt,\n        sum(vht) as hourly_vht,\n        hourly_vmt / nullifzero(hourly_vht) as hourly_q_value,\n        -- travel time\n        60 / nullifzero(hourly_q_value) as hourly_tti,\n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 35)), 0\n            )\n                as delay_35_mph\n            \n                ,\n            \n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 40)), 0\n            )\n                as delay_40_mph\n            \n                ,\n            \n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 45)), 0\n            )\n                as delay_45_mph\n            \n                ,\n            \n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 50)), 0\n            )\n                as delay_50_mph\n            \n                ,\n            \n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 55)), 0\n            )\n                as delay_55_mph\n            \n                ,\n            \n        \n            greatest(\n                hourly_volume * ((any_value(length) / nullifzero(hourly_speed)) - (any_value(length) / 60)), 0\n            )\n                as delay_60_mph\n            \n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n        \n    from station_five_mins_data\n    group by station_id, sample_date, sample_hour\n)\n\nselect * from hourly_station_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__bottleneck_delay_metrics_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__bottleneck_delay_metrics_agg_five_minutes.sql", "original_file_path": "models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__bottleneck_delay_metrics_agg_five_minutes"], "alias": "int_performance__bottleneck_delay_metrics_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "a51cc5a14a60bb01182028fd1a735b612ee418621e0e791147eaf1b9b23252f9"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["station_id", "sample_date", "sample_timestamp"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "The PeMS system runs a bottleneck identification algorithm every day. The original algorithm was\npresented in, \"Systematic Identification of Freeway Bottlenecks,\" by Chen, C., Skabardonis, A.,\nVaraiya, P. (2003). Transportation Research Board, 2004.\n\nThis model identifies bottlenecks at every station. A bottleneck is defined by the following\nconditions:\n   1. There is a drop in speed of at least 20 mph between stations during the same time\n   4. The speed drop persists for at least 5 out of any 7 contiguous 5-minute data points.\n\nIf all of these conditions are met then we declare that there is a bottleneck at this location\nthat has been activated for all of the seven 5-minute time points.\n\nWe perform this analysis for each of three time periods:\n  - AM shift (5am - 10am)\n  - PM shift (3pm - 8pm)\n\nFor each location where a bottleneck is activated we compute the following:\n   1. **Duration** - This is how long the bottleneck was active during that particular shift on\n   respect to a threshold speed of 60 mph.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "IS_BOTTLENECK": {"name": "IS_BOTTLENECK", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "BOTTLENECK_EXTENT": {"name": "BOTTLENECK_EXTENT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_35_MPH": {"name": "SPATIAL_DELAY_35_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_40_MPH": {"name": "SPATIAL_DELAY_40_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_45_MPH": {"name": "SPATIAL_DELAY_45_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_50_MPH": {"name": "SPATIAL_DELAY_50_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_55_MPH": {"name": "SPATIAL_DELAY_55_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPATIAL_DELAY_60_MPH": {"name": "SPATIAL_DELAY_60_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TIME_SHIFT": {"name": "TIME_SHIFT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_bottleneck_delay.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='station_id'), Const(value='sample_date'), Const(value='sample_timestamp')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1012533, "relation_name": "ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_five_minutes", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"sample_date\"],\r\n    unique_key=[\"station_id\", \"sample_date\", \"sample_timestamp\"],\r\n    on_schema_change='sync_all_columns',\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\")\r\n) }}\r\n\r\nwith\r\n\r\nstation_five_minute as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        sample_timestamp,\r\n        nullifzero(speed_five_mins) as speed_five_mins,\r\n        district,\r\n        county,\r\n        freeway,\r\n        freeway in {{ var(\"backward_routes\") }} as is_backward_routes,\r\n        direction,\r\n        station_type,\r\n        absolute_postmile,\r\n        length,\r\n        volume_sum,\r\n        delay_35_mph,\r\n        delay_40_mph,\r\n        delay_45_mph,\r\n        delay_50_mph,\r\n        delay_55_mph,\r\n        delay_60_mph\r\n    from {{ ref (\"int_performance__station_metrics_agg_five_minutes\") }}\r\n    where\r\n        {{ make_model_incremental('sample_date') }}\r\n        and station_type in ('ML', 'HV')\r\n),\r\n\r\ncalcs as (\r\n    select\r\n        *,\r\n\r\n        /*Absolute postmile increases going north and east. When the direction of the freeway for a\r\n        station is north or east, the \"upstream\" station has a smaller postmile, and we need to lag\r\n        to get the speed there. When the direction is west or south, the \"upstream\" station has a\r\n        larger postmile, and we need to lead to get the speed there. */\r\n        /*There are five routes (NS: Route 71; EW: Route 153, 282, 580, 780) in California which do not\r\n        follow this rule. We need to specify them in the speed difference and distance difference\r\n        calculation*/\r\n        /*Need to check all calculations ordered by absolute_postmile and fix the logic for 5 routes\r\n        specifically*/\r\n        case\r\n            when\r\n                is_backward_routes\r\n                then speed_five_mins - lead(speed_five_mins)\r\n                    over (\r\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\r\n                    )\r\n            else speed_five_mins - lead(speed_five_mins)\r\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\r\n        end as speed_delta_ne,\r\n\r\n        case\r\n            when\r\n                is_backward_routes\r\n                then absolute_postmile - lead(absolute_postmile)\r\n                    over (\r\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\r\n                    )\r\n            else absolute_postmile - lead(absolute_postmile)\r\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\r\n        end as distance_delta_ne,\r\n\r\n        case\r\n            when\r\n                is_backward_routes\r\n                then speed_five_mins - lag(speed_five_mins)\r\n                    over (\r\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\r\n                    )\r\n            else speed_five_mins - lag(speed_five_mins)\r\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\r\n        end as speed_delta_sw,\r\n\r\n        case\r\n            when\r\n                is_backward_routes\r\n                then absolute_postmile - lag(absolute_postmile)\r\n                    over (\r\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\r\n                    )\r\n            else absolute_postmile - lag(absolute_postmile)\r\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\r\n        end as distance_delta_sw\r\n\r\n    from station_five_minute\r\n),\r\n\r\nbottleneck_criteria as (\r\n    select\r\n        *,\r\n        case\r\n            when\r\n                speed_five_mins < 40\r\n                and abs(distance_delta_ne) < 3\r\n                and speed_delta_ne <= -20\r\n                and (direction = 'N' or direction = 'E')\r\n                then 1\r\n            when\r\n                speed_five_mins < 40\r\n                and abs(distance_delta_sw) < 3\r\n                and speed_delta_sw <= -20\r\n                and (direction = 'S' or direction = 'W')\r\n                then 1\r\n            else 0\r\n        end as bottleneck_check\r\n\r\n    from calcs\r\n),\r\n\r\ntemporal_extent_check as (\r\n    select\r\n        *,\r\n        sum(bottleneck_check) over (\r\n            partition by station_id, sample_date\r\n            order by sample_timestamp asc rows between current row and 6 following\r\n        ) as bottleneck_check_summed\r\n    from bottleneck_criteria\r\n),\r\n\r\ntemporal_extent as (\r\n    select\r\n        * exclude (bottleneck_check, bottleneck_check_summed),\r\n        iff(bottleneck_check = 1 and bottleneck_check_summed >= 5, true, false) as is_bottleneck\r\n    from temporal_extent_check\r\n),\r\n\r\ncongestion as (\r\n    select\r\n        *,\r\n        speed_five_mins < 40 as is_congested,\r\n\r\n        /* Create a helper length field which is zero if we don't consider this station\r\n        congested and the station length if we do. This will be summed later to get\r\n        the congestion extent */\r\n        iff(is_congested, length, 0) as congestion_length,\r\n\r\n        /* Absolute postmile increases going north and east. When the direction of the freeway for a\r\n        station is north or east, the \"upstream\" station has a smaller postmile, and we need to lag\r\n        to get the speed there. When the direction is west or south, the \"upstream\" station has a\r\n        larger postmile, and we need to lead to get the speed there. */\r\n        /*There are five routes (NS: Route 71; EW: Route 282, 580, 780) in California which do not\r\n        follow this rule. We need to specify them in the speed difference and distance difference\r\n        calculation*/\r\n        case\r\n            when (is_backward_routes and direction in ('N', 'E'))\r\n                then\r\n                    lag(is_congested)\r\n                        over (\r\n                            partition by sample_timestamp, freeway, direction, station_type\r\n                            order by absolute_postmile desc\r\n                        )\r\n            when (direction in ('N', 'E') and is_backward_routes = false)\r\n                then\r\n                    lag(is_congested)\r\n                        over (\r\n                            partition by sample_timestamp, freeway, direction, station_type\r\n                            order by absolute_postmile asc\r\n                        )\r\n            when (is_backward_routes and direction in ('S', 'W'))\r\n                then\r\n                    lead(is_congested)\r\n                        over (\r\n                            partition by sample_timestamp, freeway, direction, station_type\r\n                            order by absolute_postmile desc\r\n                        )\r\n            when (direction in ('S', 'W') and is_backward_routes = false)\r\n                then\r\n                    lead(is_congested)\r\n                        over (\r\n                            partition by sample_timestamp, freeway, direction, station_type\r\n                            order by absolute_postmile asc\r\n                        )\r\n        end as upstream_is_congested,\r\n        iff(is_congested = upstream_is_congested, 0, 1) as congestion_status_change\r\n    from temporal_extent\r\n),\r\n\r\ncongestion_events as (\r\n    select\r\n        *,\r\n        case\r\n            when is_backward_routes\r\n                then\r\n                    sum(congestion_status_change)\r\n                        over (\r\n                            partition by sample_timestamp, freeway, direction, station_type\r\n                            order by absolute_postmile desc\r\n                            rows between unbounded preceding and current row\r\n                        )\r\n            else\r\n                sum(congestion_status_change)\r\n                    over (\r\n                        partition by sample_timestamp, freeway, direction, station_type\r\n                        order by absolute_postmile asc\r\n                        rows between unbounded preceding and current row\r\n                    )\r\n        end as congestion_sequence\r\n    from congestion\r\n),\r\n\r\ncongestion_length as (\r\n    select\r\n        *,\r\n        case\r\n            when\r\n                (direction in ('N', 'E') and is_backward_routes = false)\r\n                or (direction in ('S', 'W') and is_backward_routes)\r\n                then\r\n                    sum(congestion_length) over (\r\n                        partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\r\n                        order by absolute_postmile asc\r\n                        rows between unbounded preceding and current row\r\n                    )\r\n            when\r\n                (direction in ('S', 'W') and is_backward_routes = false)\r\n                or (direction in ('N', 'E') and is_backward_routes)\r\n                then\r\n                    sum(congestion_length) over (\r\n                        partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\r\n                        order by absolute_postmile asc\r\n                        rows between current row and unbounded following\r\n                    )\r\n        end as bottleneck_extent\r\n    from congestion_events\r\n    qualify is_bottleneck = true -- TODO: also filter if upstream is a bottleneck start?\r\n\r\n),\r\n\r\nagg_spatial_delay as (\r\n    select\r\n        *,\r\n        {% for value in var(\"V_t\") %}\r\n            case\r\n                when\r\n                    (direction in ('N', 'E') and is_backward_routes = false)\r\n                    or (direction in ('S', 'W') and is_backward_routes)\r\n                    then\r\n                        sum(delay_{{ value }}_mph) over (\r\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\r\n                            order by absolute_postmile asc\r\n                            rows between unbounded preceding and current row\r\n                        )\r\n                when\r\n                    (direction in ('S', 'W') and is_backward_routes = false)\r\n                    or (direction in ('N', 'E') and is_backward_routes)\r\n                    then\r\n                        sum(delay_{{ value }}_mph) over (\r\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\r\n                            order by absolute_postmile asc\r\n                            rows between current row and unbounded following\r\n                        )\r\n            end as spatial_delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from congestion_length\r\n),\r\n\r\nshift as (\r\n    select\r\n        *,\r\n        case\r\n            when\r\n                cast(sample_timestamp as time) >= {{ var('am_shift_start') }}\r\n                and cast(sample_timestamp as time) <= {{ var('am_shift_end') }}\r\n                then 'AM'\r\n            when\r\n                cast(sample_timestamp as time) >= {{ var('noon_shift_start') }}\r\n                and cast(sample_timestamp as time) <= {{ var('noon_shift_end') }}\r\n                then 'NOON'\r\n            when\r\n                cast(sample_timestamp as time) >= {{ var('pm_shift_start') }}\r\n                and cast(sample_timestamp as time) <= {{ var('pm_shift_end') }}\r\n                then 'PM'\r\n        end as time_shift\r\n    from agg_spatial_delay\r\n),\r\n\r\nbottleneck_delay as (\r\n    select\r\n        * exclude (\r\n            congestion_sequence,\r\n            congestion_status_change,\r\n            speed_delta_ne,\r\n            speed_delta_sw,\r\n            distance_delta_sw,\r\n            distance_delta_ne,\r\n            volume_sum,\r\n            is_backward_routes,\r\n            length,\r\n            upstream_is_congested,\r\n            is_congested,\r\n            speed_five_mins,\r\n            congestion_length,\r\n            delay_35_mph,\r\n            delay_40_mph,\r\n            delay_45_mph,\r\n            delay_50_mph,\r\n            delay_55_mph,\r\n            delay_60_mph\r\n        )\r\n    from shift\r\n\r\n)\r\n\r\nselect * from bottleneck_delay", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\nwith\n\nstation_five_minute as (\n    select\n        station_id,\n        sample_date,\n        sample_timestamp,\n        nullifzero(speed_five_mins) as speed_five_mins,\n        district,\n        county,\n        freeway,\n        freeway in (71, 153, 282, 580, 780) as is_backward_routes,\n        direction,\n        station_type,\n        absolute_postmile,\n        length,\n        volume_sum,\n        delay_35_mph,\n        delay_40_mph,\n        delay_45_mph,\n        delay_50_mph,\n        delay_55_mph,\n        delay_60_mph\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_five_minutes\n    where\n        \n    1=1\n    \n        and station_type in ('ML', 'HV')\n),\n\ncalcs as (\n    select\n        *,\n\n        /*Absolute postmile increases going north and east. When the direction of the freeway for a\n        station is north or east, the \"upstream\" station has a smaller postmile, and we need to lag\n        to get the speed there. When the direction is west or south, the \"upstream\" station has a\n        larger postmile, and we need to lead to get the speed there. */\n        /*There are five routes (NS: Route 71; EW: Route 153, 282, 580, 780) in California which do not\n        follow this rule. We need to specify them in the speed difference and distance difference\n        calculation*/\n        /*Need to check all calculations ordered by absolute_postmile and fix the logic for 5 routes\n        specifically*/\n        case\n            when\n                is_backward_routes\n                then speed_five_mins - lead(speed_five_mins)\n                    over (\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\n                    )\n            else speed_five_mins - lead(speed_five_mins)\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\n        end as speed_delta_ne,\n\n        case\n            when\n                is_backward_routes\n                then absolute_postmile - lead(absolute_postmile)\n                    over (\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\n                    )\n            else absolute_postmile - lead(absolute_postmile)\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\n        end as distance_delta_ne,\n\n        case\n            when\n                is_backward_routes\n                then speed_five_mins - lag(speed_five_mins)\n                    over (\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\n                    )\n            else speed_five_mins - lag(speed_five_mins)\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\n        end as speed_delta_sw,\n\n        case\n            when\n                is_backward_routes\n                then absolute_postmile - lag(absolute_postmile)\n                    over (\n                        partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile desc\n                    )\n            else absolute_postmile - lag(absolute_postmile)\n                over (partition by sample_timestamp, freeway, direction, station_type order by absolute_postmile asc)\n        end as distance_delta_sw\n\n    from station_five_minute\n),\n\nbottleneck_criteria as (\n    select\n        *,\n        case\n            when\n                speed_five_mins < 40\n                and abs(distance_delta_ne) < 3\n                and speed_delta_ne <= -20\n                and (direction = 'N' or direction = 'E')\n                then 1\n            when\n                speed_five_mins < 40\n                and abs(distance_delta_sw) < 3\n                and speed_delta_sw <= -20\n                and (direction = 'S' or direction = 'W')\n                then 1\n            else 0\n        end as bottleneck_check\n\n    from calcs\n),\n\ntemporal_extent_check as (\n    select\n        *,\n        sum(bottleneck_check) over (\n            partition by station_id, sample_date\n            order by sample_timestamp asc rows between current row and 6 following\n        ) as bottleneck_check_summed\n    from bottleneck_criteria\n),\n\ntemporal_extent as (\n    select\n        * exclude (bottleneck_check, bottleneck_check_summed),\n        iff(bottleneck_check = 1 and bottleneck_check_summed >= 5, true, false) as is_bottleneck\n    from temporal_extent_check\n),\n\ncongestion as (\n    select\n        *,\n        speed_five_mins < 40 as is_congested,\n\n        /* Create a helper length field which is zero if we don't consider this station\n        congested and the station length if we do. This will be summed later to get\n        the congestion extent */\n        iff(is_congested, length, 0) as congestion_length,\n\n        /* Absolute postmile increases going north and east. When the direction of the freeway for a\n        station is north or east, the \"upstream\" station has a smaller postmile, and we need to lag\n        to get the speed there. When the direction is west or south, the \"upstream\" station has a\n        larger postmile, and we need to lead to get the speed there. */\n        /*There are five routes (NS: Route 71; EW: Route 282, 580, 780) in California which do not\n        follow this rule. We need to specify them in the speed difference and distance difference\n        calculation*/\n        case\n            when (is_backward_routes and direction in ('N', 'E'))\n                then\n                    lag(is_congested)\n                        over (\n                            partition by sample_timestamp, freeway, direction, station_type\n                            order by absolute_postmile desc\n                        )\n            when (direction in ('N', 'E') and is_backward_routes = false)\n                then\n                    lag(is_congested)\n                        over (\n                            partition by sample_timestamp, freeway, direction, station_type\n                            order by absolute_postmile asc\n                        )\n            when (is_backward_routes and direction in ('S', 'W'))\n                then\n                    lead(is_congested)\n                        over (\n                            partition by sample_timestamp, freeway, direction, station_type\n                            order by absolute_postmile desc\n                        )\n            when (direction in ('S', 'W') and is_backward_routes = false)\n                then\n                    lead(is_congested)\n                        over (\n                            partition by sample_timestamp, freeway, direction, station_type\n                            order by absolute_postmile asc\n                        )\n        end as upstream_is_congested,\n        iff(is_congested = upstream_is_congested, 0, 1) as congestion_status_change\n    from temporal_extent\n),\n\ncongestion_events as (\n    select\n        *,\n        case\n            when is_backward_routes\n                then\n                    sum(congestion_status_change)\n                        over (\n                            partition by sample_timestamp, freeway, direction, station_type\n                            order by absolute_postmile desc\n                            rows between unbounded preceding and current row\n                        )\n            else\n                sum(congestion_status_change)\n                    over (\n                        partition by sample_timestamp, freeway, direction, station_type\n                        order by absolute_postmile asc\n                        rows between unbounded preceding and current row\n                    )\n        end as congestion_sequence\n    from congestion\n),\n\ncongestion_length as (\n    select\n        *,\n        case\n            when\n                (direction in ('N', 'E') and is_backward_routes = false)\n                or (direction in ('S', 'W') and is_backward_routes)\n                then\n                    sum(congestion_length) over (\n                        partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                        order by absolute_postmile asc\n                        rows between unbounded preceding and current row\n                    )\n            when\n                (direction in ('S', 'W') and is_backward_routes = false)\n                or (direction in ('N', 'E') and is_backward_routes)\n                then\n                    sum(congestion_length) over (\n                        partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                        order by absolute_postmile asc\n                        rows between current row and unbounded following\n                    )\n        end as bottleneck_extent\n    from congestion_events\n    qualify is_bottleneck = true -- TODO: also filter if upstream is a bottleneck start?\n\n),\n\nagg_spatial_delay as (\n    select\n        *,\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_35_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_35_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_35_mph\n            \n                ,\n            \n\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_40_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_40_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_40_mph\n            \n                ,\n            \n\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_45_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_45_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_45_mph\n            \n                ,\n            \n\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_50_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_50_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_50_mph\n            \n                ,\n            \n\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_55_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_55_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_55_mph\n            \n                ,\n            \n\n        \n            case\n                when\n                    (direction in ('N', 'E') and is_backward_routes = false)\n                    or (direction in ('S', 'W') and is_backward_routes)\n                    then\n                        sum(delay_60_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between unbounded preceding and current row\n                        )\n                when\n                    (direction in ('S', 'W') and is_backward_routes = false)\n                    or (direction in ('N', 'E') and is_backward_routes)\n                    then\n                        sum(delay_60_mph) over (\n                            partition by sample_timestamp, freeway, direction, station_type, congestion_sequence\n                            order by absolute_postmile asc\n                            rows between current row and unbounded following\n                        )\n            end as spatial_delay_60_mph\n            \n\n        \n    from congestion_length\n),\n\nshift as (\n    select\n        *,\n        case\n            when\n                cast(sample_timestamp as time) >= '05:00:00'\n                and cast(sample_timestamp as time) <= '09:59:59'\n                then 'AM'\n            when\n                cast(sample_timestamp as time) >= '10:00:00'\n                and cast(sample_timestamp as time) <= '14:59:59'\n                then 'NOON'\n            when\n                cast(sample_timestamp as time) >= '15:00:00'\n                and cast(sample_timestamp as time) <= '20:00:00'\n                then 'PM'\n        end as time_shift\n    from agg_spatial_delay\n),\n\nbottleneck_delay as (\n    select\n        * exclude (\n            congestion_sequence,\n            congestion_status_change,\n            speed_delta_ne,\n            speed_delta_sw,\n            distance_delta_sw,\n            distance_delta_ne,\n            volume_sum,\n            is_backward_routes,\n            length,\n            upstream_is_congested,\n            is_congested,\n            speed_five_mins,\n            congestion_length,\n            delay_35_mph,\n            delay_40_mph,\n            delay_45_mph,\n            delay_50_mph,\n            delay_55_mph,\n            delay_60_mph\n        )\n    from shift\n\n)\n\nselect * from bottleneck_delay", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__detector_metrics_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__detector_metrics_agg_monthly.sql", "original_file_path": "models/intermediate/performance/int_performance__detector_metrics_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__detector_metrics_agg_monthly"], "alias": "int_performance__detector_metrics_agg_monthly", "checksum": {"name": "sha256", "checksum": "566359942ca7bf546dac880b8868f6c016cc396666703eb05df1ab941a9be838"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of volume, speed, and occupancy along with delays and lost productivity by\neach detector lane. This measures the monthly performance of the state highway system.\nThis can be used to understand the SHS performance from month to month.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a detector.\nUse this value to 'join' other files or tables that contain the detector ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The starting date of each month of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VOLUME": {"name": "MONTHLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period by each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_OCCUPANCY": {"name": "MONTHLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VMT": {"name": "MONTHLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given month of the year and\na given section of the freeway for each detector lane.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_VHT": {"name": "MONTHLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given month of the year and a\ngiven section of freeway for each detector lane. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given month of the year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TTI": {"name": "MONTHLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time for each detector lane.\nThe free-flow travel time is taken to be the time to traverse the link when traveling at 60MPH.\nFor loop-based performance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_Q_VALUE": {"name": "MONTHLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given month of the year for each detector lane.\nFor a single location its interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Monthly delay for threshold of 35 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Monthly delay for threshold of 40 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Monthly delay for threshold of 45 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Monthly delay for threshold of 50 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Monthly delay for threshold of 55 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Monthly delay for threshold of 60 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Monthly lost productivity for threshold of 35 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Monthly lost productivity for threshold of 40 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Monthly lost productivity for threshold of 45 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Monthly lost productivity for threshold of 50 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Monthly lost productivity for threshold of 55 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Monthly lost productivity for threshold of 60 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due\nto operating under congested conditions instead of under free-flow conditions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_detector_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.1537879, "relation_name": "ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_monthly", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting the first day of each month\r\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\r\n        date_trunc(month, sample_date) as sample_month\r\n    from {{ ref('int_performance__detector_metrics_agg_daily') }}\r\n    -- # we do not want to aggregate incomplete month data\r\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nmonthly_spatial_temporal_metrics as (\r\n    select\r\n        detector_id,\r\n        sample_month,\r\n        any_value(station_id) as station_id,\r\n        any_value(lane) as lane,\r\n        any_value(city) as city,\r\n        any_value(county) as county,\r\n        any_value(district) as district,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        sum(daily_volume) as monthly_volume,\r\n        avg(daily_occupancy) as monthly_occupancy,\r\n        sum(daily_vmt) as monthly_vmt,\r\n        sum(daily_vht) as monthly_vht,\r\n        monthly_vmt / nullifzero(monthly_vht) as monthly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(monthly_q_value) as monthly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph)\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by detector_id, sample_month\r\n)\r\n\r\nselect * from monthly_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__detector_metrics_agg_monthly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting the first day of each month\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\n        date_trunc(month, sample_date) as sample_month\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_daily\n    -- # we do not want to aggregate incomplete month data\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nmonthly_spatial_temporal_metrics as (\n    select\n        detector_id,\n        sample_month,\n        any_value(station_id) as station_id,\n        any_value(lane) as lane,\n        any_value(city) as city,\n        any_value(county) as county,\n        any_value(district) as district,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        sum(daily_volume) as monthly_volume,\n        avg(daily_occupancy) as monthly_occupancy,\n        sum(daily_vmt) as monthly_vmt,\n        sum(daily_vht) as monthly_vht,\n        monthly_vmt / nullifzero(monthly_vht) as monthly_q_value,\n        -- travel time\n        60 / nullifzero(monthly_q_value) as monthly_tti,\n        \n            sum(delay_35_mph)\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            sum(delay_40_mph)\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            sum(delay_45_mph)\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            sum(delay_50_mph)\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            sum(delay_55_mph)\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            sum(delay_60_mph)\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_daily_data\n    group by detector_id, sample_month\n)\n\nselect * from monthly_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__detector_metrics_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__detector_metrics_agg_weekly.sql", "original_file_path": "models/intermediate/performance/int_performance__detector_metrics_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__detector_metrics_agg_weekly"], "alias": "int_performance__detector_metrics_agg_weekly", "checksum": {"name": "sha256", "checksum": "240e533554aa3cdd2760eec8a1466e12096a97082227cc963e023795d23b420e"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly aggregation of volume, speed and occupancy along with delays and lost productivity by\neach detector lane. This measures the weekly performance of the state\nhighway system. This can be used to understand the SHS performance from week to week.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a detector.\nUse this value to 'join' other files or tables that contain the detector ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with weekly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "the begining date of a sample week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME": {"name": "WEEKLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY": {"name": "WEEKLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given week and a given section\nof the freeway for each detector lane.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given week and a\ngiven section of freeway for each detector lane. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given week.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given week for each detector lane. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Weekly delay for threshold of 35 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Weekly delay for threshold of 40 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Weekly delay for threshold of 45 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Weekly delay for threshold of 50 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Weekly delay for threshold of 55 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Weekly delay for threshold of 60 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Weekly lost productivity for threshold of 35 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Weekly lost productivity for threshold of 40 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Weekly lost productivity for threshold of 45 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Weekly lost productivity for threshold of 50 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Weekly lost productivity for threshold of 55 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Weekly lost productivity for threshold of 60 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-weeks on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_detector_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.1521986, "relation_name": "ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_weekly", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting the first day of the week date, and week number\r\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions-date-time#label-calendar-weeks-weekdays\r\n        weekofyear(sample_date) as sample_week,\r\n        date_trunc('week', sample_date) as sample_week_start_date\r\n    from {{ ref('int_performance__detector_metrics_agg_daily') }}\r\n    -- we do not want to calculate incomplete week aggregation\r\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nweekly_spatial_temporal_metrics as (\r\n    select\r\n        detector_id,\r\n        sample_week,\r\n        sample_week_start_date,\r\n        any_value(station_id) as station_id,\r\n        any_value(lane) as lane,\r\n        any_value(city) as city,\r\n        any_value(county) as county,\r\n        any_value(district) as district,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        sum(daily_volume) as weekly_volume,\r\n        avg(daily_occupancy) as weekly_occupancy,\r\n        sum(daily_vmt) as weekly_vmt,\r\n        sum(daily_vht) as weekly_vht,\r\n        weekly_vmt / nullifzero(weekly_vht) as weekly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(weekly_q_value) as weekly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph)\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by\r\n        detector_id, sample_week, sample_week_start_date\r\n)\r\n\r\nselect * from weekly_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__detector_metrics_agg_weekly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting the first day of the week date, and week number\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions-date-time#label-calendar-weeks-weekdays\n        weekofyear(sample_date) as sample_week,\n        date_trunc('week', sample_date) as sample_week_start_date\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_daily\n    -- we do not want to calculate incomplete week aggregation\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nweekly_spatial_temporal_metrics as (\n    select\n        detector_id,\n        sample_week,\n        sample_week_start_date,\n        any_value(station_id) as station_id,\n        any_value(lane) as lane,\n        any_value(city) as city,\n        any_value(county) as county,\n        any_value(district) as district,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        sum(daily_volume) as weekly_volume,\n        avg(daily_occupancy) as weekly_occupancy,\n        sum(daily_vmt) as weekly_vmt,\n        sum(daily_vht) as weekly_vht,\n        weekly_vmt / nullifzero(weekly_vht) as weekly_q_value,\n        -- travel time\n        60 / nullifzero(weekly_q_value) as weekly_tti,\n        \n            sum(delay_35_mph)\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            sum(delay_40_mph)\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            sum(delay_45_mph)\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            sum(delay_50_mph)\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            sum(delay_55_mph)\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            sum(delay_60_mph)\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_daily_data\n    group by\n        detector_id, sample_week, sample_week_start_date\n)\n\nselect * from weekly_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__max_capacity", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__max_capacity.sql", "original_file_path": "models/intermediate/performance/int_performance__max_capacity.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__max_capacity"], "alias": "int_performance__max_capacity", "checksum": {"name": "sha256", "checksum": "cb50338f4d6e8d5a500d45c326b456ea0ecdec1dbbd453ddba125a6223a4d417"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "This model calculates the five minutes maximum capacity for each detector\nfrom month to month.\n\nThis model currently uses a maximum capacity of 2076 vehicles/lane/hour for all detectors.\nUsing this value provides a consistent metric for determining the capcacity and calculating\nthe lost productivity.\n\nThe current methodology in PeMS uses the max of either the 15 minute historical highest\nflow or 2076 v/l/h as the capacity at each location per PeMS website\nhttps://pems.dot.ca.gov/?dnode=Help&content=help_calc#perf\n\nThe issue with the current methodology is that there is no documentation for how the historical\nmeasured maximum capacity has been developed and we have observed inconsistencies in high flow\nvalues in PeMS. We also do not have any documention on why a 15-minute timeframe was selected\nand how that value is used to compute the 5-minute aggregation level of the lost productivity\nperformance metric.\n", "columns": {"DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a detector.\nUse this value to 'join' other files or tables that contain the detector ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MAX_CAPACITY_5MIN": {"name": "MAX_CAPACITY_5MIN", "description": "maximum capacity for each detector lane for five mins time period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_other.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "performance"}, "created_at": 1755632024.136686, "relation_name": "ANALYTICS_PRD.performance.int_performance__max_capacity", "raw_code": "/*\r\nThis model currently uses a maximum capacity of 2076 vehicles/lane/hour for all detectors.\r\nUsing this value provides a consistent metric for determining the capcacity and\r\ncalculating the lost productivity.\r\n\r\nThe current methodology in PeMS uses the max of either the 15 minute historical highest\r\nflow or 2076 v/l/h as the capacity at each location per PeMS website:\r\nhttps://pems.dot.ca.gov/?dnode=Help&content=help_calc#perf\r\n\r\nThe issue with the current methodology is that there is no documentation for how the historical\r\nmeasured maximum capacity has been developed and we have observed inconsistencies in high flow\r\nvalues in PeMS. We also do not have any documention on why a 15-minute timeframe was selected\r\nand how that value is used to compute the 5-minute aggregation level of the lost productivity\r\nperformance metric.\r\n*/\r\n\r\nwith\r\n\r\nsource as (\r\n    select *\r\n    from {{ ref('int_vds__detector_config') }}\r\n),\r\n\r\nmax_capacity_detector as (\r\n    select distinct\r\n        detector_id,\r\n        /*\r\n        2076 v/l/h / 12 = 173 v/l/5-min\r\n        */\r\n        173 as max_capacity_5min\r\n    from source\r\n)\r\n\r\nselect * from max_capacity_detector", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__max_capacity.sql", "compiled": true, "compiled_code": "/*\nThis model currently uses a maximum capacity of 2076 vehicles/lane/hour for all detectors.\nUsing this value provides a consistent metric for determining the capcacity and\ncalculating the lost productivity.\n\nThe current methodology in PeMS uses the max of either the 15 minute historical highest\nflow or 2076 v/l/h as the capacity at each location per PeMS website:\nhttps://pems.dot.ca.gov/?dnode=Help&content=help_calc#perf\n\nThe issue with the current methodology is that there is no documentation for how the historical\nmeasured maximum capacity has been developed and we have observed inconsistencies in high flow\nvalues in PeMS. We also do not have any documention on why a 15-minute timeframe was selected\nand how that value is used to compute the 5-minute aggregation level of the lost productivity\nperformance metric.\n*/\n\nwith\n\nsource as (\n    select *\n    from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\nmax_capacity_detector as (\n    select distinct\n        detector_id,\n        /*\n        2076 v/l/h / 12 = 173 v/l/5-min\n        */\n        173 as max_capacity_5min\n    from source\n)\n\nselect * from max_capacity_detector", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__detector_metrics_agg_hourly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__detector_metrics_agg_hourly.sql", "original_file_path": "models/intermediate/performance/int_performance__detector_metrics_agg_hourly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__detector_metrics_agg_hourly"], "alias": "int_performance__detector_metrics_agg_hourly", "checksum": {"name": "sha256", "checksum": "0bde345c8984b9a4a46c57d794d50139ceadd066675f1305a523e706f0b67d8b"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date", "sample_hour"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "Hourly aggregation of volume, occupancy and speed along with delays and lost productivity by\neach detector lane. This measures the hourly performance of the state\nhighway system at the detecctor level. This can be used for daily aggregation of PeMS performance\nmetrics at the detector level.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a detector.\nUse this value to 'join' other files or tables that contain the detector ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_HOUR": {"name": "SAMPLE_HOUR", "description": "the hour associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VOLUME": {"name": "HOURLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPEED": {"name": "HOURLY_SPEED", "description": "flow weighted houly speed for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_OCCUPANCY": {"name": "HOURLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VMT": {"name": "HOURLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in an hour and a given section of the\nfreeway for each detector lane.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_VHT": {"name": "HOURLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated over an hour and a\ngiven section of freeway. VHT is the amount of time spent by all of the\nvehicles on the freeway.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_TTI": {"name": "HOURLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_Q_VALUE": {"name": "HOURLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region. For a single location its interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Hourly delay for threshold of 35 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Hourly delay for threshold of 40 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Hourly delay for threshold of 45 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Hourly delay for threshold of 50 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Hourly delay for threshold of 55 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Hourly delay for threshold of 60 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Hourly lost productivity for threshold of 35 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Hourly lost productivity for threshold of 40 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Hourly lost productivity for threshold of 45 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Hourly lost productivity for threshold of 50 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Hourly lost productivity for threshold of 55 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Hourly lost productivity for threshold of 60 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_detector_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date'), Const(value='sample_hour')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1489296, "relation_name": "ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_hourly", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['detector_id','sample_date', 'sample_hour'],\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\n-- read the volume, occupancy and speed five minutes data\r\nwith station_five_mins_data as (\r\n    select\r\n        *,\r\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\r\n    from {{ ref('int_performance__detector_metrics_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- now aggregate five mins volume, occupancy and speed to hourly\r\nhourly_spatial_temporal_metrics as (\r\n    select\r\n        detector_id,\r\n        sample_date,\r\n        sample_timestamp_trunc as sample_hour,\r\n        any_value(station_id) as station_id,\r\n        any_value(station_type) as station_type,\r\n        any_value(lane) as lane,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(length) as length,\r\n        sum(volume_sum) as hourly_volume,\r\n        avg(occupancy_avg) as hourly_occupancy,\r\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as hourly_speed,\r\n        sum(vmt) as hourly_vmt,\r\n        sum(vht) as hourly_vht,\r\n        hourly_vmt / nullifzero(hourly_vht) as hourly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(hourly_q_value) as hourly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph)\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_five_mins_data\r\n    group by detector_id, sample_date, sample_hour\r\n)\r\n\r\nselect * from hourly_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__detector_metrics_agg_hourly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed five minutes data\nwith station_five_mins_data as (\n    select\n        *,\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\n    where \n    1=1\n    \n),\n\n-- now aggregate five mins volume, occupancy and speed to hourly\nhourly_spatial_temporal_metrics as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp_trunc as sample_hour,\n        any_value(station_id) as station_id,\n        any_value(station_type) as station_type,\n        any_value(lane) as lane,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(length) as length,\n        sum(volume_sum) as hourly_volume,\n        avg(occupancy_avg) as hourly_occupancy,\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as hourly_speed,\n        sum(vmt) as hourly_vmt,\n        sum(vht) as hourly_vht,\n        hourly_vmt / nullifzero(hourly_vht) as hourly_q_value,\n        -- travel time\n        60 / nullifzero(hourly_q_value) as hourly_tti,\n        \n            sum(delay_35_mph)\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            sum(delay_40_mph)\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            sum(delay_45_mph)\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            sum(delay_50_mph)\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            sum(delay_55_mph)\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            sum(delay_60_mph)\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_five_mins_data\n    group by detector_id, sample_date, sample_hour\n)\n\nselect * from hourly_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_weekly.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_weekly"], "alias": "int_performance__station_metrics_agg_weekly", "checksum": {"name": "sha256", "checksum": "a2c95443645f395767acb3f4f1b3c57666875bfda3a72860c49476eba3747750"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Weekly aggregation of volume, speed and occupancy along with delays and lost productivity by\nacross all lanes of the station. This can be used to understand the state highway system\nperformance from week to week.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The week associated with weekly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with weekly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK_START_DATE": {"name": "SAMPLE_WEEK_START_DATE", "description": "the begining date of a sample week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_SPEED": {"name": "WEEKLY_SPEED", "description": "flow weighted weekly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VOLUME": {"name": "WEEKLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_OCCUPANCY": {"name": "WEEKLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VMT": {"name": "WEEKLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given week and a given section\nof the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_VHT": {"name": "WEEKLY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given week and a\ngiven section of freeway across all the lanes. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given week.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TTI": {"name": "WEEKLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_Q_VALUE": {"name": "WEEKLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given week across all the lanes. For a single location\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "The Delay performance metric is the amount of additional time spent by the\nvehicles on a section of road due to congestion at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 35 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 40 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 45 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 50 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 55 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "The Productivity performance metric is the number of lane-mile-week on the freeway\nlost due to operating under congested conditions instead of under free-flow\nconditions at 60 mph.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.1294148, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_weekly", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- read the volume, occupancy and speed daily level data\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting the week and year\r\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions-date-time#label-calendar-weeks-weekdays\r\n        year(sample_date) as sample_year,\r\n        weekofyear(sample_date) as sample_week,\r\n        date_trunc('week', sample_date) as sample_week_start_date\r\n    from {{ ref('int_performance__station_metrics_agg_daily') }}\r\n    -- we do not want to calculate incomplete week aggregation\r\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\r\n),\r\n\r\n-- now aggregate daily volume, occupancy and speed to weekly\r\nweekly_station_level_spatial_temporal_metrics as (\r\n    select\r\n        station_id,\r\n        length,\r\n        sample_year,\r\n        sample_week,\r\n        sample_week_start_date,\r\n        any_value(station_type) as station_type,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        sum(daily_volume) as weekly_volume,\r\n        avg(daily_occupancy) as weekly_occupancy,\r\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as weekly_speed,\r\n        sum(daily_vmt) as weekly_vmt,\r\n        sum(daily_vht) as weekly_vht,\r\n        weekly_vmt / nullifzero(weekly_vht) as weekly_q_value,\r\n        -- travel time\r\n        60 / nullifzero(weekly_q_value) as weekly_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(\r\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / {{ value }})), 0\r\n            )\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by\r\n        station_id, sample_year, sample_week, sample_week_start_date, length\r\n)\r\n\r\nselect * from weekly_station_level_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_weekly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed daily level data\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting the week and year\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions-date-time#label-calendar-weeks-weekdays\n        year(sample_date) as sample_year,\n        weekofyear(sample_date) as sample_week,\n        date_trunc('week', sample_date) as sample_week_start_date\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_daily\n    -- we do not want to calculate incomplete week aggregation\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\n),\n\n-- now aggregate daily volume, occupancy and speed to weekly\nweekly_station_level_spatial_temporal_metrics as (\n    select\n        station_id,\n        length,\n        sample_year,\n        sample_week,\n        sample_week_start_date,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        sum(daily_volume) as weekly_volume,\n        avg(daily_occupancy) as weekly_occupancy,\n        sum(daily_volume * daily_speed) / nullifzero(sum(daily_volume)) as weekly_speed,\n        sum(daily_vmt) as weekly_vmt,\n        sum(daily_vht) as weekly_vht,\n        weekly_vmt / nullifzero(weekly_vht) as weekly_q_value,\n        -- travel time\n        60 / nullifzero(weekly_q_value) as weekly_tti,\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 35)), 0\n            )\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 40)), 0\n            )\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 45)), 0\n            )\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 50)), 0\n            )\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 55)), 0\n            )\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            greatest(\n                weekly_volume * ((length / nullifzero(weekly_speed)) - (length / 60)), 0\n            )\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_daily_data\n    group by\n        station_id, sample_year, sample_week, sample_week_start_date, length\n)\n\nselect * from weekly_station_level_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_yearly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_yearly.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_yearly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_yearly"], "alias": "int_performance__station_metrics_agg_yearly", "checksum": {"name": "sha256", "checksum": "81ffa5ac303282a9d724f1145c13cff26b46c628d73093ea6ed7f3b1356081d7"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Yearly aggregation of volume, speed, and occupancy along with delays and lost productivity\nacross all lanes of the station. This can be used to understand the state highway system\nperformance trends from year to year.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely identifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two-character string identifying the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "Length of the station in miles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S, or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The year associated with yearly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_SPEED": {"name": "YEARLY_SPEED", "description": "Flow-weighted yearly speed across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VOLUME": {"name": "YEARLY_VOLUME", "description": "The sum of the flow values for a detector over the sample period\nacross all the lanes in a given year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_OCCUPANCY": {"name": "YEARLY_OCCUPANCY", "description": "The average of the occupancy values over the sample period across all the lanes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VMT": {"name": "YEARLY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given year and a given section\nof the freeway across all the lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_VHT": {"name": "YEARLY_VHT", "description": "Vehicle Hours Traveled (VHT) is calculated in a given year and a\ngiven section of freeway across all the lanes. VHT represents the total time spent\nby all vehicles on the freeway in a given year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_TTI": {"name": "YEARLY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60 MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "YEARLY_Q_VALUE": {"name": "YEARLY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given year across all the lanes. For a single location,\nits interpretation is the average speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Yearly delay for threshold of 35 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Yearly delay for threshold of 40 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Yearly delay for threshold of 45 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Yearly delay for threshold of 50 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Yearly delay for threshold of 55 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Yearly delay for threshold of 60 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\nof road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Yearly lost productivity for threshold of 35 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Yearly lost productivity for threshold of 40 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Yearly lost productivity for threshold of 45 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Yearly lost productivity for threshold of 50 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Yearly lost productivity for threshold of 55 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Yearly lost productivity for threshold of 60 mph for each detector lane.\nThe lost Productivity performance metric is the number of lane-mile-month on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.132597, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_yearly", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Read the monthly-level data and extract the year\r\nwith station_monthly_data as (\r\n    select\r\n        *,\r\n        -- Extracting first day of each year\r\n        date_trunc('year', sample_month) as sample_year\r\n    from {{ ref('int_performance__station_metrics_agg_monthly') }}\r\n    -- Exclude incomplete years\r\n    where date_trunc('year', sample_month) != date_trunc('year', current_date)\r\n),\r\n\r\n-- Aggregate monthly volume, occupancy, and speed to yearly\r\nyearly_station_level_spatial_temporal_metrics as (\r\n    select\r\n        station_id,\r\n        sample_year,\r\n        any_value(station_type) as station_type,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(length) as length,\r\n\r\n        -- Summing volume-based metrics\r\n        sum(monthly_volume) as yearly_volume,\r\n        avg(monthly_occupancy) as yearly_occupancy,\r\n        sum(monthly_vmt) as yearly_vmt,\r\n        sum(monthly_vht) as yearly_vht,\r\n\r\n        -- Weighted average speed: sum(volume * speed) / sum(volume)\r\n        sum(monthly_volume * monthly_speed) / nullif(sum(monthly_volume), 0) as yearly_speed,\r\n\r\n        -- Compute Q-value and TTI safely\r\n        sum(monthly_vmt) / nullif(sum(monthly_vht), 0) as yearly_q_value,\r\n        -- Travel time\r\n        60 / nullif(sum(monthly_vmt) / nullif(sum(monthly_vht), 0), 0) as yearly_tti,\r\n\r\n        {% for value in var(\"V_t\") %}\r\n            greatest(\r\n                sum(monthly_volume)\r\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / {{ value }})),\r\n                0\r\n            ) as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %},\r\n\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph) as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n\r\n    from station_monthly_data\r\n    group by station_id, sample_year\r\n)\r\n\r\nselect * from yearly_station_level_spatial_temporal_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_metrics_agg_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_yearly.sql", "compiled": true, "compiled_code": "\n\n-- Read the monthly-level data and extract the year\nwith station_monthly_data as (\n    select\n        *,\n        -- Extracting first day of each year\n        date_trunc('year', sample_month) as sample_year\n    from ANALYTICS_PRD.performance.int_performance__station_metrics_agg_monthly\n    -- Exclude incomplete years\n    where date_trunc('year', sample_month) != date_trunc('year', current_date)\n),\n\n-- Aggregate monthly volume, occupancy, and speed to yearly\nyearly_station_level_spatial_temporal_metrics as (\n    select\n        station_id,\n        sample_year,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(length) as length,\n\n        -- Summing volume-based metrics\n        sum(monthly_volume) as yearly_volume,\n        avg(monthly_occupancy) as yearly_occupancy,\n        sum(monthly_vmt) as yearly_vmt,\n        sum(monthly_vht) as yearly_vht,\n\n        -- Weighted average speed: sum(volume * speed) / sum(volume)\n        sum(monthly_volume * monthly_speed) / nullif(sum(monthly_volume), 0) as yearly_speed,\n\n        -- Compute Q-value and TTI safely\n        sum(monthly_vmt) / nullif(sum(monthly_vht), 0) as yearly_q_value,\n        -- Travel time\n        60 / nullif(sum(monthly_vmt) / nullif(sum(monthly_vht), 0), 0) as yearly_tti,\n\n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 35)),\n                0\n            ) as delay_35_mph\n            \n                ,\n            \n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 40)),\n                0\n            ) as delay_40_mph\n            \n                ,\n            \n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 45)),\n                0\n            ) as delay_45_mph\n            \n                ,\n            \n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 50)),\n                0\n            ) as delay_50_mph\n            \n                ,\n            \n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 55)),\n                0\n            ) as delay_55_mph\n            \n                ,\n            \n        \n            greatest(\n                sum(monthly_volume)\n                * ((any_value(length) / nullif(sum(monthly_speed), 0)) - (any_value(length) / 60)),\n                0\n            ) as delay_60_mph\n            \n        ,\n\n        \n            sum(lost_productivity_35_mph) as lost_productivity_35_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_40_mph) as lost_productivity_40_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_45_mph) as lost_productivity_45_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_50_mph) as lost_productivity_50_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_55_mph) as lost_productivity_55_mph\n            \n                ,\n            \n        \n            sum(lost_productivity_60_mph) as lost_productivity_60_mph\n            \n        \n\n    from station_monthly_data\n    group by station_id, sample_year\n)\n\nselect * from yearly_station_level_spatial_temporal_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__bottleneck_delay_metrics_agg_monthly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__bottleneck_delay_metrics_agg_monthly.sql", "original_file_path": "models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_monthly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__bottleneck_delay_metrics_agg_monthly"], "alias": "int_performance__bottleneck_delay_metrics_agg_monthly", "checksum": {"name": "sha256", "checksum": "dd1ca8e231ae61647b7a8c927576defe0cbb0c1b99d639ee2280bdac16aa8fa1"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly aggregation of bottleneck performance by each station. This measures the monthly performance\nof the state highway system at the station level. This can be used for monthly aggregation of bottleneck\nperformance metrics.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_MONTH": {"name": "SAMPLE_MONTH", "description": "The starting date of each month of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TIME_SHIFT": {"name": "TIME_SHIFT", "description": "- AM shift (5am - 10am)\n- PM shift (3pm - 8pm)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_DURATION": {"name": "MONTHLY_TIME_SHIFT_DURATION", "description": "How long the bottleneck was active within a month during that particular shift on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_ACTIVE_DAYS": {"name": "MONTHLY_ACTIVE_DAYS", "description": "How many days the bottleneck was active within a month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_EXTENT": {"name": "MONTHLY_TIME_SHIFT_EXTENT", "description": "Calculates the monthly congestion region starting from the bottleneck location towards upstream adjacent\ncongested stations, which is the summation of congestion lengths with same congestion sequence values.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_35_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_35_MPH", "description": "Monthly delay for threshold of 35 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_40_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_40_MPH", "description": "Monthly delay for threshold of 40 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_45_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_45_MPH", "description": "Monthly delay for threshold of 45 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_50_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_50_MPH", "description": "Monthly delay for threshold of 50 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_55_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_55_MPH", "description": "Monthly delay for threshold of 55 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_60_MPH": {"name": "MONTHLY_TIME_SHIFT_SPATIAL_DELAY_60_MPH", "description": "Monthly delay for threshold of 60 mph for each detector lane.\nThe Delay performance metric is the amount of additional time spent by the vehicles on a section\n of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_bottleneck_delay.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance"}, "created_at": 1755632024.113151, "relation_name": "ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_monthly", "raw_code": "{{ config(materialized='table') }}\r\n\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting first day of each month\r\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\r\n        date_trunc(month, sample_date) as sample_month\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_daily') }}\r\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\r\n),\r\n\r\nmonthly_spatial_bottleneck_delay_metrics as (\r\n    select\r\n        station_id,\r\n        sample_month,\r\n        time_shift,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(absolute_postmile) as absolute_postmile,\r\n        avg(daily_time_shift_duration) as monthly_time_shift_duration,\r\n        sum(case when daily_time_shift_duration > 0 then 1 else 0 end) as monthly_active_days,\r\n        avg(daily_time_shift_bottleneck_extent) as monthly_time_shift_extent,\r\n        -- spatial delay aggregation in monthly level, decomposed into time shift\r\n        {% for value in var(\"V_t\") %}\r\n            sum(daily_time_shift_spatial_delay_{{ value }}_mph)\r\n                as monthly_time_shift_spatial_delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by station_id, sample_month, time_shift\r\n)\r\n\r\nselect * from monthly_spatial_bottleneck_delay_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_monthly.sql", "compiled": true, "compiled_code": "\n\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting first day of each month\n        -- reference: https://docs.snowflake.com/en/sql-reference/functions/year\n        date_trunc(month, sample_date) as sample_month\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_daily\n    where date_trunc(month, sample_date) != date_trunc(month, current_date)\n),\n\nmonthly_spatial_bottleneck_delay_metrics as (\n    select\n        station_id,\n        sample_month,\n        time_shift,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(absolute_postmile) as absolute_postmile,\n        avg(daily_time_shift_duration) as monthly_time_shift_duration,\n        sum(case when daily_time_shift_duration > 0 then 1 else 0 end) as monthly_active_days,\n        avg(daily_time_shift_bottleneck_extent) as monthly_time_shift_extent,\n        -- spatial delay aggregation in monthly level, decomposed into time shift\n        \n            sum(daily_time_shift_spatial_delay_35_mph)\n                as monthly_time_shift_spatial_delay_35_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_40_mph)\n                as monthly_time_shift_spatial_delay_40_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_45_mph)\n                as monthly_time_shift_spatial_delay_45_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_50_mph)\n                as monthly_time_shift_spatial_delay_50_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_55_mph)\n                as monthly_time_shift_spatial_delay_55_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_60_mph)\n                as monthly_time_shift_spatial_delay_60_mph\n            \n        \n    from station_daily_data\n    group by station_id, sample_month, time_shift\n)\n\nselect * from monthly_spatial_bottleneck_delay_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_metrics_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_metrics_agg_five_minutes.sql", "original_file_path": "models/intermediate/performance/int_performance__station_metrics_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_metrics_agg_five_minutes"], "alias": "int_performance__station_metrics_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "c7dab1735a7fe350efff0b379319b5dc88a55e0fbf520d6493b701e88d194665"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["station_id", "sample_date", "sample_timestamp"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "Five-minute aggregation of volume, occupancy, and speed, along with delays and lost productivity by each\nstation and lane. This model measures the performance of the state highway system at a fine temporal\nresolution, enabling detailed analysis of congestion and productivity losses at the station level.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely identifies a station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two-character string identifying the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "Length of the station in miles.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S, or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with five-minute aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the five-minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VMT": {"name": "VMT", "description": "The sum of the miles of freeway driven by each vehicle in five minutes for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VHT": {"name": "VHT", "description": "Vehicle Hours Traveled (VHT) for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Delay due to congestion at 35 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Delay due to congestion at 40 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Delay due to congestion at 45 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Delay due to congestion at 50 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Delay due to congestion at 55 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Delay due to congestion at 60 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Lost productivity at 35 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Lost productivity at 40 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Lost productivity at 45 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Lost productivity at 50 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Lost productivity at 55 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Lost productivity at 60 mph for the lane in five minutes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_FROM": {"name": "STATION_VALID_FROM", "description": "The date from which the station is considered valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_TO": {"name": "STATION_VALID_TO", "description": "The date until which the station is considered valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "The count of samples in the five-minute aggregation period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "The sum of volume for the five-minute aggregation period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "The average occupancy for the five-minute aggregation period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_FIVE_MINS": {"name": "SPEED_FIVE_MINS", "description": "The speed measured for the five-minute aggregation period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_station_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='station_id'), Const(value='sample_date'), Const(value='sample_timestamp')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1355455, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_metrics_agg_five_minutes", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    on_schema_change=\"append_new_columns\",\n    cluster_by=[\"sample_date\"],\n    unique_key=[\"station_id\", \"sample_date\", \"sample_timestamp\"],\n    snowflake_warehouse = get_snowflake_refresh_warehouse(big=\"XL\")\n) }}\n\nwith detector_agg_five_minutes as (\n    select *\n    from {{ ref('int_performance__detector_metrics_agg_five_minutes') }}\n    where {{ make_model_incremental('sample_date') }}\n),\n\nstation_aggregated as (\n    select\n        station_id,\n        sample_date,\n        sample_timestamp,\n        any_value(absolute_postmile) as absolute_postmile,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(length) as length,\n        any_value(station_valid_from) as station_valid_from,\n        any_value(station_valid_to) as station_valid_to,\n        round(sum(vmt), 1) as vmt,\n        round(sum(vht), 2) as vht,\n        sum(sample_ct) as sample_ct,\n        round(sum(volume_sum), 0) as volume_sum,\n        round(avg(occupancy_avg), 4) as occupancy_avg,\n        round(sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)), 1) as speed_five_mins,\n        {% for value in var(\"V_t\") %}\n            round(sum(lost_productivity_{{ value }}_mph), 2) as lost_productivity_{{ value }}_mph\n            {% if not loop.last %}\n                ,\n            {% endif %}\n        {% endfor %}\n    from detector_agg_five_minutes\n    group by station_id, sample_date, sample_timestamp\n),\n\nstation_aggregated_with_delay as (\n    select\n        *,\n        {% for value in var(\"V_t\") %}\n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / {{ value }})), 0), 2)\n                as delay_{{ value }}_mph\n            {% if not loop.last %}\n                ,\n            {% endif %}\n        {% endfor %}\n    from station_aggregated\n)\n\nselect * from station_aggregated_with_delay", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_metrics_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\nwith detector_agg_five_minutes as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\n    where \n    1=1\n    \n),\n\nstation_aggregated as (\n    select\n        station_id,\n        sample_date,\n        sample_timestamp,\n        any_value(absolute_postmile) as absolute_postmile,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(station_type) as station_type,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(length) as length,\n        any_value(station_valid_from) as station_valid_from,\n        any_value(station_valid_to) as station_valid_to,\n        round(sum(vmt), 1) as vmt,\n        round(sum(vht), 2) as vht,\n        sum(sample_ct) as sample_ct,\n        round(sum(volume_sum), 0) as volume_sum,\n        round(avg(occupancy_avg), 4) as occupancy_avg,\n        round(sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)), 1) as speed_five_mins,\n        \n            round(sum(lost_productivity_35_mph), 2) as lost_productivity_35_mph\n            \n                ,\n            \n        \n            round(sum(lost_productivity_40_mph), 2) as lost_productivity_40_mph\n            \n                ,\n            \n        \n            round(sum(lost_productivity_45_mph), 2) as lost_productivity_45_mph\n            \n                ,\n            \n        \n            round(sum(lost_productivity_50_mph), 2) as lost_productivity_50_mph\n            \n                ,\n            \n        \n            round(sum(lost_productivity_55_mph), 2) as lost_productivity_55_mph\n            \n                ,\n            \n        \n            round(sum(lost_productivity_60_mph), 2) as lost_productivity_60_mph\n            \n        \n    from detector_agg_five_minutes\n    group by station_id, sample_date, sample_timestamp\n),\n\nstation_aggregated_with_delay as (\n    select\n        *,\n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 35)), 0), 2)\n                as delay_35_mph\n            \n                ,\n            \n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 40)), 0), 2)\n                as delay_40_mph\n            \n                ,\n            \n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 45)), 0), 2)\n                as delay_45_mph\n            \n                ,\n            \n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 50)), 0), 2)\n                as delay_50_mph\n            \n                ,\n            \n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 55)), 0), 2)\n                as delay_55_mph\n            \n                ,\n            \n        \n            round(greatest(volume_sum * ((length / nullifzero(speed_five_mins)) - (length / 60)), 0), 2)\n                as delay_60_mph\n            \n        \n    from station_aggregated\n)\n\nselect * from station_aggregated_with_delay", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__detector_metrics_agg_daily", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__detector_metrics_agg_daily.sql", "original_file_path": "models/intermediate/performance/int_performance__detector_metrics_agg_daily.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__detector_metrics_agg_daily"], "alias": "int_performance__detector_metrics_agg_daily", "checksum": {"name": "sha256", "checksum": "0c9ad31f21e80c504056d6a4d1635ee7dbfe8bbeff524bf6028e0fe470242ed6"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Daily aggregation of volume, occupancy and speed along with delays and lost productivity by\neach detetcor lane. This measures the daily performance of the state highway system.\nThis can be used for weekly and monthly aggregation of PeMS performance metrics in a given lane.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "An integer value that uniquely indentifies a detector.\nUse this value to 'join' other files or tables that contain the detector ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with daily aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VOLUME": {"name": "DAILY_VOLUME", "description": "The sum of the flow values for a detector over the sample period for each detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_SPEED": {"name": "DAILY_SPEED", "description": "flow weighted daily speed for each detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_OCCUPANCY": {"name": "DAILY_OCCUPANCY", "description": "The average of the occupancy values over the sample period for each detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VMT": {"name": "DAILY_VMT", "description": "The sum of the miles of freeway driven by each vehicle in a given day and a given section of\n the freeway for each detector.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_VHT": {"name": "DAILY_VHT", "description": "Vehicle Hours Travelled (VHT) is calculated in a given day and a\ngiven section of freeway for each detector. VHT is the amount of time spent by all of the\nvehicles on the freeway in a given day.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_TTI": {"name": "DAILY_TTI", "description": "The Travel Time Index (TTI) is the ratio of the average travel time for all users\nacross a region to the free-flow travel time. The free-flow travel time is taken\nto be the time to traverse the link when traveling at 60MPH. For loop-based\nperformance measures, the TTI is simply the free-flow speed divided by the\nperformance measure Q.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DAILY_Q_VALUE": {"name": "DAILY_Q_VALUE", "description": "Q is the sum of the VMT in a spatial and temporal region divided by the sum of\nthe VHT in the same region in a given day for each detector lane. For a single location\nits interpretation is the\naverage speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_35_MPH": {"name": "DELAY_35_MPH", "description": "Hourly delay for threshold of 35 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_40_MPH": {"name": "DELAY_40_MPH", "description": "Hourly delay for threshold of 40 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_45_MPH": {"name": "DELAY_45_MPH", "description": "Hourly delay for threshold of 45 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_50_MPH": {"name": "DELAY_50_MPH", "description": "Hourly delay for threshold of 50 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_55_MPH": {"name": "DELAY_55_MPH", "description": "Hourly delay for threshold of 55 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELAY_60_MPH": {"name": "DELAY_60_MPH", "description": "Hourly delay for threshold of 60 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_35_MPH": {"name": "LOST_PRODUCTIVITY_35_MPH", "description": "Hourly lost productivity for threshold of 35 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_40_MPH": {"name": "LOST_PRODUCTIVITY_40_MPH", "description": "Hourly lost productivity for threshold of 40 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_45_MPH": {"name": "LOST_PRODUCTIVITY_45_MPH", "description": "Hourly lost productivity for threshold of 45 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_50_MPH": {"name": "LOST_PRODUCTIVITY_50_MPH", "description": "Hourly lost productivity for threshold of 50 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_55_MPH": {"name": "LOST_PRODUCTIVITY_55_MPH", "description": "Hourly lost productivity for threshold of 55 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOST_PRODUCTIVITY_60_MPH": {"name": "LOST_PRODUCTIVITY_60_MPH", "description": "Hourly lost productivity for threshold of 60 mph for each detector lane. The lost Productivity\nperformance metric is the number of lane-mile-hours on the freeway lost due to operating\nunder congested conditions instead of under free-flow conditions.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_detector_metrics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))"}, "created_at": 1755632024.1505764, "relation_name": "ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_daily", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=[\"detector_id\", \"sample_date\"],\r\n    on_schema_change=\"sync_all_columns\",\r\n) }}\r\n\r\n-- read the station hourly data\r\nwith station_hourly_data as (\r\n    select *\r\n    from {{ ref('int_performance__detector_metrics_agg_hourly') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- now aggregate hourly volume, occupancy and speed to daily level\r\ndaily_spatial_temporal_agg as (\r\n    select\r\n        detector_id,\r\n        sample_date,\r\n        any_value(station_id) as station_id,\r\n        any_value(station_type) as station_type,\r\n        any_value(lane) as lane,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(city) as city,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        sum(hourly_volume) as daily_volume,\r\n        avg(hourly_occupancy) as daily_occupancy,\r\n        sum(hourly_volume * hourly_speed) / nullifzero(sum(hourly_volume)) as daily_speed,\r\n        sum(hourly_vmt) as daily_vmt,\r\n        sum(hourly_vht) as daily_vht,\r\n        daily_vmt / nullifzero(daily_vht) as daily_q_value,\r\n        -- travel time\r\n        60 / nullifzero(daily_q_value) as daily_tti,\r\n        {% for value in var(\"V_t\") %}\r\n            sum(delay_{{ value }}_mph)\r\n                as delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %},\r\n        {% for value in var(\"V_t\") %}\r\n            sum(lost_productivity_{{ value }}_mph)\r\n                as lost_productivity_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n\r\n        {% endfor %}\r\n    from station_hourly_data\r\n    group by detector_id, sample_date\r\n)\r\n\r\nselect * from daily_spatial_temporal_agg", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__detector_metrics_agg_daily.sql", "compiled": true, "compiled_code": "\n\n-- read the station hourly data\nwith station_hourly_data as (\n    select *\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_hourly\n    where \n    1=1\n    \n),\n\n-- now aggregate hourly volume, occupancy and speed to daily level\ndaily_spatial_temporal_agg as (\n    select\n        detector_id,\n        sample_date,\n        any_value(station_id) as station_id,\n        any_value(station_type) as station_type,\n        any_value(lane) as lane,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(city) as city,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        sum(hourly_volume) as daily_volume,\n        avg(hourly_occupancy) as daily_occupancy,\n        sum(hourly_volume * hourly_speed) / nullifzero(sum(hourly_volume)) as daily_speed,\n        sum(hourly_vmt) as daily_vmt,\n        sum(hourly_vht) as daily_vht,\n        daily_vmt / nullifzero(daily_vht) as daily_q_value,\n        -- travel time\n        60 / nullifzero(daily_q_value) as daily_tti,\n        \n            sum(delay_35_mph)\n                as delay_35_mph\n            \n                ,\n            \n\n        \n            sum(delay_40_mph)\n                as delay_40_mph\n            \n                ,\n            \n\n        \n            sum(delay_45_mph)\n                as delay_45_mph\n            \n                ,\n            \n\n        \n            sum(delay_50_mph)\n                as delay_50_mph\n            \n                ,\n            \n\n        \n            sum(delay_55_mph)\n                as delay_55_mph\n            \n                ,\n            \n\n        \n            sum(delay_60_mph)\n                as delay_60_mph\n            \n\n        ,\n        \n            sum(lost_productivity_35_mph)\n                as lost_productivity_35_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_40_mph)\n                as lost_productivity_40_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_45_mph)\n                as lost_productivity_45_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_50_mph)\n                as lost_productivity_50_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_55_mph)\n                as lost_productivity_55_mph\n            \n                ,\n            \n\n        \n            sum(lost_productivity_60_mph)\n                as lost_productivity_60_mph\n            \n\n        \n    from station_hourly_data\n    group by detector_id, sample_date\n)\n\nselect * from daily_spatial_temporal_agg", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__bottleneck_delay_metrics_agg_hourly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__bottleneck_delay_metrics_agg_hourly.sql", "original_file_path": "models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_hourly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__bottleneck_delay_metrics_agg_hourly"], "alias": "int_performance__bottleneck_delay_metrics_agg_hourly", "checksum": {"name": "sha256", "checksum": "4efd582e160ee992e7498d0f01b2445c844845f1a024f16c9d45ed36dadef1e0"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["station_id", "sample_date", "sample_hour"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "Hourly aggregation of bottleneck performance by each station. This measures the hourly performance\nof the state highway system at the station level. This can be used for hourly aggregation of bottleneck\nperformance metrics.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_HOUR": {"name": "SAMPLE_HOUR", "description": "The hour associated with hourly aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TIME_SHIFT": {"name": "TIME_SHIFT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_DURATION": {"name": "HOURLY_DURATION", "description": "This is how long the bottleneck was active within an hour during that particular shift on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_BOTTLENECK_EXTENT": {"name": "HOURLY_BOTTLENECK_EXTENT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_35_MPH": {"name": "HOURLY_SPATIAL_DELAY_35_MPH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_40_MPH": {"name": "HOURLY_SPATIAL_DELAY_40_MPH", "description": "Hourly delay for threshold of 40 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_45_MPH": {"name": "HOURLY_SPATIAL_DELAY_45_MPH", "description": "Hourly delay for threshold of 45 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_50_MPH": {"name": "HOURLY_SPATIAL_DELAY_50_MPH", "description": "Hourly delay for threshold of 50 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_55_MPH": {"name": "HOURLY_SPATIAL_DELAY_55_MPH", "description": "Hourly delay for threshold of 55 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HOURLY_SPATIAL_DELAY_60_MPH": {"name": "HOURLY_SPATIAL_DELAY_60_MPH", "description": "Hourly delay for threshold of 60 mph for each detector lane. The Delay performance metric is the\namount of additional time spent by the vehicles on a section of road due to congestion.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_bottleneck_delay.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "performance", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='station_id'), Const(value='sample_date'), Const(value='sample_hour')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1052294, "relation_name": "ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_hourly", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    unique_key=['station_id','sample_date', 'sample_hour'],\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\n-- read the volume, occupancy and speed five minutes data\r\nwith station_five_mins_data as (\r\n    select\r\n        *,\r\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- aggregate five mins delay and calculate the average bottleneck extent in an hourly basis\r\nhourly_spatial_bottleneck_delay_metrics as (\r\n    select\r\n        station_id,\r\n        sample_date,\r\n        sample_timestamp_trunc as sample_hour,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(absolute_postmile) as absolute_postmile,\r\n        any_value(time_shift) as time_shift,\r\n        sum(case when is_bottleneck = true then 1 else 0 end) * 5 as hourly_duration,\r\n        avg(bottleneck_extent) as hourly_bottleneck_extent,\r\n        -- spatial delay aggregation in hourly level\r\n        {% for value in var(\"V_t\") %}\r\n            sum(spatial_delay_{{ value }}_mph)\r\n                as hourly_spatial_delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_five_mins_data\r\n    group by station_id, sample_date, sample_hour\r\n)\r\n\r\nselect * from hourly_spatial_bottleneck_delay_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_hourly.sql", "compiled": true, "compiled_code": "\n\n-- read the volume, occupancy and speed five minutes data\nwith station_five_mins_data as (\n    select\n        *,\n        date_trunc('hour', sample_timestamp) as sample_timestamp_trunc\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_five_minutes\n    where \n    1=1\n    \n),\n\n-- aggregate five mins delay and calculate the average bottleneck extent in an hourly basis\nhourly_spatial_bottleneck_delay_metrics as (\n    select\n        station_id,\n        sample_date,\n        sample_timestamp_trunc as sample_hour,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(absolute_postmile) as absolute_postmile,\n        any_value(time_shift) as time_shift,\n        sum(case when is_bottleneck = true then 1 else 0 end) * 5 as hourly_duration,\n        avg(bottleneck_extent) as hourly_bottleneck_extent,\n        -- spatial delay aggregation in hourly level\n        \n            sum(spatial_delay_35_mph)\n                as hourly_spatial_delay_35_mph\n            \n                ,\n            \n        \n            sum(spatial_delay_40_mph)\n                as hourly_spatial_delay_40_mph\n            \n                ,\n            \n        \n            sum(spatial_delay_45_mph)\n                as hourly_spatial_delay_45_mph\n            \n                ,\n            \n        \n            sum(spatial_delay_50_mph)\n                as hourly_spatial_delay_50_mph\n            \n                ,\n            \n        \n            sum(spatial_delay_55_mph)\n                as hourly_spatial_delay_55_mph\n            \n                ,\n            \n        \n            sum(spatial_delay_60_mph)\n                as hourly_spatial_delay_60_mph\n            \n        \n    from station_five_mins_data\n    group by station_id, sample_date, sample_hour\n)\n\nselect * from hourly_spatial_bottleneck_delay_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__station_aadt_with_K_value", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__station_aadt_with_K_value.sql", "original_file_path": "models/intermediate/performance/int_performance__station_aadt_with_K_value.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__station_aadt_with_K_value"], "alias": "int_performance__station_aadt_with_K_value", "checksum": {"name": "sha256", "checksum": "b07cdfb221ff986c7121d7358760bae30731f37e90cd4d69e32352acc1202eba"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Station level annual average daily traffic and k th highest hour volume in the preceeding year.\nThis model only uses detectors' reported observed values and does not impute any missing values to\ncalculate the AADT and k value. More details can be found in the paper \"Using Incomplete Archived\nITS Data to Calculate Annual Average Traffic Statistics\" by Shawn Turner and Eun Sug Park\n(Proceedings of the Transportation Research Board 87th Annual Meeting, Washington, D.C., 2008).\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_YEAR": {"name": "SAMPLE_YEAR", "description": "The first date of the year associated with the data sample.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_1": {"name": "AADT_1", "description": "This is simply the average of all daily traffic flows over the entire year. it is known as Arithmetic Mean.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_2": {"name": "AADT_2", "description": "This procedure begins by calculating Monthly Average Days of the Week (MADW) values,\nwhich are the average daily flows for each day of the week and each month of the\nyear (a total of 84 values). From these, 12 Monthly Average Daily Traffic (MADT)\nvalues are calculated as the average of the non-missing MADW values for each month.\nFinally, AADT_2 is computed as the average of all MADT values. This algorithm allows\none or more of the 7 weekday values to be missing for the MADT computation,\nbut none of the 12 MADT values may be missing for the final average. This is known as\nASTM Standard 1442.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_3": {"name": "AADT_3", "description": "This algorithm also starts with the MADW values, computed as described above for AADT_2.\nFrom these, an Annual Average Days of the Week (AADW) value is computed for each day of\nthe week as the average across all 12 months. Finally, AADT_3 is computed as the average\nof these 7 AADW values.Missing data are not imputed; therefore, incomplete days are not\nused in the calculation of MADW values.This is known as Conventional AASHTO Procedures.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_4": {"name": "AADT_4", "description": "This procedure first calculates, across all 12 months, the monthly average flow for each\nhour of the week (MAHW), which results in 24 x 7 = 168 values per month. Then for each month\nand day of the week, the 24 MAHW values are summed to produce a MADW value. Then, just as in\nAADT_3, 7 AADW values are produced as the averages of MADW across 12 months, which are then\naveraged to yield AADT_4.This method is known as Provisional AASHTO Procedures.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_5": {"name": "AADT_5", "description": "For each hour of the day, hourly traffic flow is averaged across all days of the year,\nresulting in 24 annual average hourly values. AADT_5 is computed as the sum of the 24 hourly\nvalues.This method is known as Sum of 24 Annual Average Hourly Traffic Volumes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_6": {"name": "AADT_6", "description": "This procedure is a modified version of AADT_2, in which 1 of the 12 MADT values may be\nmissing for the final AADT calculation. This is the Modified ASTM Standard.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_7": {"name": "AADT_7", "description": "This procedure is a modified version of AADT_3, in which 1 of the 12 MADW values may be\nmissing in the AADW subcomputation, and/or 1 of the 7 AADW values may be missing in the\nfinal AADT_7 computation. This is Modified Conventional AASHTO.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AADT_8": {"name": "AADT_8", "description": "Similarly, this procedure is a modified version of AADT_4, in which 1 of the 12 MADW\nvalues may be missing in the AADW subcomputation, and/or 1 of the 7 AADW values may\nbe missing in the final AADT_8 computation. This is Modified Provisional AASHTO.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_30": {"name": "K_30", "description": "30th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_50": {"name": "K_50", "description": "50th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "K_100": {"name": "K_100", "description": "100th highest hour volume in the precceding year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_other.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "schema": "performance"}, "created_at": 1755632024.137993, "relation_name": "ANALYTICS_PRD.performance.int_performance__station_aadt_with_K_value", "raw_code": "{{ config(materialized='table') }}\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\nwith good_detectors as (\n    select\n        station_id,\n        lane,\n        district,\n        sample_date\n    from {{ ref(\"int_diagnostics__detector_status\") }}\n    where status = 'Good'\n),\n\n-- read detector daily aggregated performance metrics\n-- join with good dectors\ngood_detectors_daily_agg as (\n    select sd.*\n    from {{ ref('int_performance__detector_metrics_agg_daily') }} as sd\n    inner join good_detectors on\n        sd.station_id = good_detectors.station_id\n        and sd.lane = good_detectors.lane\n        and sd.sample_date = good_detectors.sample_date\n),\n\n--  calculate station level metrics first\ngood_station_daily_agg as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- aggregate station volume over all lanes\n        sum(daily_volume) as daily_volume,\n        sample_date\n    from good_detectors_daily_agg\n    group by station_id, city, county, district, freeway, direction, station_type, sample_date\n),\n\n-- AADT_1: Arithmetic Mean\naadt_1 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        avg(daily_volume) as aadt_1,\n        date_trunc('year', sample_date) as sample_year\n    from good_station_daily_agg\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n),\n\n-- AADT_2: ASTM Standard 1442\nmadw as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate  Monthly Average Days of the Week (MADW).\n        avg(daily_volume) as madw,\n        extract(dow from sample_date) as day_of_week,\n        date_trunc('month', sample_date) as sample_month,\n        date_trunc('year', sample_date) as sample_year\n    from good_station_daily_agg\n    group by\n        station_id, city, county, freeway, direction, district, station_type, day_of_week, sample_month, sample_year\n),\n\nmadt as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_month,\n        sample_year,\n        count(station_id) as sample_ct,\n        avg(madw) as madt\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, sample_month, sample_year\n),\n\naadt_2 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_year,\n        count(sample_month) as sample_ct,\n        avg(madt) as aadt_2\n    from madt\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- all 12 months average traffic volume is required to calculate this metric\n    having count(sample_month) = 12\n),\n\n-- AADT_3: Conventional AASHTO Procedures\naadw as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate Annual Average Days of the Week (AADW)\n        avg(madw) as aadw,\n        day_of_week,\n        sample_year\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, day_of_week, sample_year\n),\n\naadt_3 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        sample_year,\n        avg(aadw) as aadt_3\n    from aadw\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n),\n\n-- read the detector hourly aggregated model\n-- filter out the good dectors data only\ngood_detectors_hourly_agg as (\n    select sh.*\n    from {{ ref('int_performance__detector_metrics_agg_hourly') }} as sh\n    inner join good_detectors on\n        sh.station_id = good_detectors.station_id\n        and sh.lane = good_detectors.lane\n        and sh.sample_date = good_detectors.sample_date\n),\n\n--  aggregate the hourly volume in station level first\ngood_station_hourly_agg as (\n    select\n        station_id,\n        district,\n        station_type,\n        sample_hour,\n        sample_date,\n        sum(hourly_volume) as hourly_volume\n    from good_detectors_hourly_agg\n    group by station_id, sample_date, sample_hour, district, station_type\n\n),\n\n-- AADT_4: Provisional AASHTO Procedures\nmahw as (\n    select\n        station_id,\n        district,\n        station_type,\n        extract(dow from sample_date) as day_of_week,\n        extract(hour from sample_hour) as hour_of_day,\n        date_trunc('month', sample_date) as sample_month,\n        date_trunc('year', sample_date) as sample_year,\n        -- calculate monthly average flow for each hour of the week\n        avg(hourly_volume) as mahw\n    from good_station_hourly_agg\n    group by station_id, district, station_type, hour_of_day, day_of_week, sample_month, sample_year\n),\n\nmonthly_average_days_of_the_week_traffic as (\n    select\n        station_id,\n        district,\n        station_type,\n        day_of_week,\n        sample_month,\n        sample_year,\n        sum(mahw) as madw\n    from mahw\n    group by station_id, district, station_type, day_of_week, sample_month, sample_year\n),\n\naverages_of_madw as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(madw) as aadw,\n        day_of_week,\n        sample_year\n    from monthly_average_days_of_the_week_traffic\n    where madw > 0\n    group by station_id, district, station_type, day_of_week, sample_year\n),\n\naadt_4 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(aadw) as aadt_4,\n        sample_year\n    from averages_of_madw\n    group by station_id, district, station_type, sample_year\n),\n\n-- AADT_5: Sum of 24 Annual Average Hourly Traffic Volumes\n\nannual_average_hourly_traffic as (\n    select\n        station_id,\n        district,\n        station_type,\n        extract(hour from sample_hour) as hour_of_day,\n        date_trunc('year', sample_date) as sample_year,\n        avg(hourly_volume) as aaht\n    from good_station_hourly_agg\n    group by station_id, district, station_type, hour_of_day, sample_year\n),\n\naadt_5 as (\n    select\n        station_id,\n        district,\n        station_type,\n        sample_year,\n        sum(aaht) as aadt_5\n    from annual_average_hourly_traffic\n    group by station_id, district, station_type, sample_year\n),\n\n-- AADT_6: Modified ASTM Standard\naadt_6 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_year,\n        avg(madt) as aadt_6\n    from madt\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- 1 of the 12 madt values may be missing for this final AADT calculation.\n    having count(madt) >= 11\n),\n\n-- AADT_7: Modified Conventional AASHTO\naadw1 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate Annual Average Days of the Week (AADW)\n        avg(madw) as aadw,\n        count(madw) as sample_ct,\n        day_of_week,\n        sample_year\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, day_of_week, sample_year\n    -- 1 of the 12 MADW values may be missing in the AADW subcomputation.\n    having count(madw) >= 11\n),\n\naadt_7 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        sample_year,\n        avg(aadw) as aadt_7,\n        count(aadw) as sample_ct\n    from aadw1\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- 1 of the 7 aadw values may be missing for this final AADT calculation.\n    having count(aadw) >= 6\n),\n\n-- AADT_8: Modified Provisional AASHTO\naverages_of_madw1 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(madw) as aadw,\n        day_of_week,\n        count(madw) as sample_ct,\n        sample_year\n    from monthly_average_days_of_the_week_traffic\n    where madw > 0\n    group by station_id, district, station_type, day_of_week, sample_year\n    -- 1 of the 12 MADW values may be missing in the AADW subcomputation\n    having count(madw) >= 11\n),\n\naadt_8 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(aadw) as aadt_8,\n        sample_year\n    from averages_of_madw1\n    group by station_id, district, station_type, sample_year\n    -- 1 of the 7 aadw values may be missing for this final AADT calculation.\n    having count(aadw) >= 6\n),\n\n-- now join all aadt_CTE together\naadt_1_8 as (\n    select\n        aadt_1.*,\n        aadt_2.aadt_2,\n        aadt_3.aadt_3,\n        aadt_4.aadt_4,\n        aadt_5.aadt_5,\n        aadt_6.aadt_6,\n        aadt_7.aadt_7,\n        aadt_8.aadt_8\n    from aadt_1\n    left join aadt_2\n        on\n            aadt_1.station_id = aadt_2.station_id\n            and aadt_1.sample_year = aadt_2.sample_year\n    left join aadt_3\n        on\n            aadt_1.station_id = aadt_3.station_id\n            and aadt_1.sample_year = aadt_3.sample_year\n    left join aadt_4\n        on\n            aadt_1.station_id = aadt_4.station_id\n            and aadt_1.sample_year = aadt_4.sample_year\n    left join aadt_5\n        on\n            aadt_1.station_id = aadt_5.station_id\n            and aadt_1.sample_year = aadt_5.sample_year\n    left join aadt_6\n        on\n            aadt_1.station_id = aadt_6.station_id\n            and aadt_1.sample_year = aadt_6.sample_year\n    left join aadt_7\n        on\n            aadt_1.station_id = aadt_7.station_id\n            and aadt_1.sample_year = aadt_7.sample_year\n    left join aadt_8\n        on\n            aadt_1.station_id = aadt_8.station_id\n            and aadt_1.sample_year = aadt_8.sample_year\n),\n\n-- Calculate k-factors\ntraffic_data as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume,\n        sample_date,\n        date_trunc('year', sample_date) as observation_year\n    from good_station_hourly_agg\n),\n\n-- get 30th highest hour volume in preceding year\nk_30 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_30,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 30\n),\n\n-- get 50th highest hour volume in preceding year\nk_50 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_50,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 50\n),\n\n-- get 100th highest hour volume in preceding year\nk_100 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_100,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 100\n),\n\n-- join all k factors with all AADT\naadt_1_8_kfactors as (\n    select\n        aadt_1_8.*,\n        k_30.k_30,\n        k_50.k_50,\n        k_100.k_100\n    from aadt_1_8\n    left join k_30\n        on\n            aadt_1_8.station_id = k_30.station_id\n            and aadt_1_8.sample_year = k_30.kfactor_year\n    left join k_50\n        on\n            aadt_1_8.station_id = k_50.station_id\n            and aadt_1_8.sample_year = k_50.kfactor_year\n    left join k_100\n        on\n            aadt_1_8.station_id = k_100.station_id\n            and aadt_1_8.sample_year = k_100.kfactor_year\n)\n\nselect distinct\n    station_id,\n    station_type,\n    sample_year,\n    city,\n    county,\n    direction,\n    district,\n    freeway,\n    aadt_1,\n    aadt_2,\n    aadt_3,\n    aadt_4,\n    aadt_5,\n    aadt_6,\n    aadt_7,\n    aadt_8,\n    k_30,\n    k_50,\n    k_100\nfrom aadt_1_8_kfactors", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_performance__detector_metrics_agg_daily", "package": null, "version": null}, {"name": "int_performance__detector_metrics_agg_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__station_aadt_with_K_value.sql", "compiled": true, "compiled_code": "\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\nwith good_detectors as (\n    select\n        station_id,\n        lane,\n        district,\n        sample_date\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where status = 'Good'\n),\n\n-- read detector daily aggregated performance metrics\n-- join with good dectors\ngood_detectors_daily_agg as (\n    select sd.*\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_daily as sd\n    inner join good_detectors on\n        sd.station_id = good_detectors.station_id\n        and sd.lane = good_detectors.lane\n        and sd.sample_date = good_detectors.sample_date\n),\n\n--  calculate station level metrics first\ngood_station_daily_agg as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- aggregate station volume over all lanes\n        sum(daily_volume) as daily_volume,\n        sample_date\n    from good_detectors_daily_agg\n    group by station_id, city, county, district, freeway, direction, station_type, sample_date\n),\n\n-- AADT_1: Arithmetic Mean\naadt_1 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        avg(daily_volume) as aadt_1,\n        date_trunc('year', sample_date) as sample_year\n    from good_station_daily_agg\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n),\n\n-- AADT_2: ASTM Standard 1442\nmadw as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate  Monthly Average Days of the Week (MADW).\n        avg(daily_volume) as madw,\n        extract(dow from sample_date) as day_of_week,\n        date_trunc('month', sample_date) as sample_month,\n        date_trunc('year', sample_date) as sample_year\n    from good_station_daily_agg\n    group by\n        station_id, city, county, freeway, direction, district, station_type, day_of_week, sample_month, sample_year\n),\n\nmadt as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_month,\n        sample_year,\n        count(station_id) as sample_ct,\n        avg(madw) as madt\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, sample_month, sample_year\n),\n\naadt_2 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_year,\n        count(sample_month) as sample_ct,\n        avg(madt) as aadt_2\n    from madt\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- all 12 months average traffic volume is required to calculate this metric\n    having count(sample_month) = 12\n),\n\n-- AADT_3: Conventional AASHTO Procedures\naadw as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate Annual Average Days of the Week (AADW)\n        avg(madw) as aadw,\n        day_of_week,\n        sample_year\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, day_of_week, sample_year\n),\n\naadt_3 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        sample_year,\n        avg(aadw) as aadt_3\n    from aadw\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n),\n\n-- read the detector hourly aggregated model\n-- filter out the good dectors data only\ngood_detectors_hourly_agg as (\n    select sh.*\n    from ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_hourly as sh\n    inner join good_detectors on\n        sh.station_id = good_detectors.station_id\n        and sh.lane = good_detectors.lane\n        and sh.sample_date = good_detectors.sample_date\n),\n\n--  aggregate the hourly volume in station level first\ngood_station_hourly_agg as (\n    select\n        station_id,\n        district,\n        station_type,\n        sample_hour,\n        sample_date,\n        sum(hourly_volume) as hourly_volume\n    from good_detectors_hourly_agg\n    group by station_id, sample_date, sample_hour, district, station_type\n\n),\n\n-- AADT_4: Provisional AASHTO Procedures\nmahw as (\n    select\n        station_id,\n        district,\n        station_type,\n        extract(dow from sample_date) as day_of_week,\n        extract(hour from sample_hour) as hour_of_day,\n        date_trunc('month', sample_date) as sample_month,\n        date_trunc('year', sample_date) as sample_year,\n        -- calculate monthly average flow for each hour of the week\n        avg(hourly_volume) as mahw\n    from good_station_hourly_agg\n    group by station_id, district, station_type, hour_of_day, day_of_week, sample_month, sample_year\n),\n\nmonthly_average_days_of_the_week_traffic as (\n    select\n        station_id,\n        district,\n        station_type,\n        day_of_week,\n        sample_month,\n        sample_year,\n        sum(mahw) as madw\n    from mahw\n    group by station_id, district, station_type, day_of_week, sample_month, sample_year\n),\n\naverages_of_madw as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(madw) as aadw,\n        day_of_week,\n        sample_year\n    from monthly_average_days_of_the_week_traffic\n    where madw > 0\n    group by station_id, district, station_type, day_of_week, sample_year\n),\n\naadt_4 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(aadw) as aadt_4,\n        sample_year\n    from averages_of_madw\n    group by station_id, district, station_type, sample_year\n),\n\n-- AADT_5: Sum of 24 Annual Average Hourly Traffic Volumes\n\nannual_average_hourly_traffic as (\n    select\n        station_id,\n        district,\n        station_type,\n        extract(hour from sample_hour) as hour_of_day,\n        date_trunc('year', sample_date) as sample_year,\n        avg(hourly_volume) as aaht\n    from good_station_hourly_agg\n    group by station_id, district, station_type, hour_of_day, sample_year\n),\n\naadt_5 as (\n    select\n        station_id,\n        district,\n        station_type,\n        sample_year,\n        sum(aaht) as aadt_5\n    from annual_average_hourly_traffic\n    group by station_id, district, station_type, sample_year\n),\n\n-- AADT_6: Modified ASTM Standard\naadt_6 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        direction,\n        freeway,\n        station_type,\n        sample_year,\n        avg(madt) as aadt_6\n    from madt\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- 1 of the 12 madt values may be missing for this final AADT calculation.\n    having count(madt) >= 11\n),\n\n-- AADT_7: Modified Conventional AASHTO\naadw1 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        -- calculate Annual Average Days of the Week (AADW)\n        avg(madw) as aadw,\n        count(madw) as sample_ct,\n        day_of_week,\n        sample_year\n    from madw\n    where madw > 0\n    group by station_id, city, county, district, freeway, direction, station_type, day_of_week, sample_year\n    -- 1 of the 12 MADW values may be missing in the AADW subcomputation.\n    having count(madw) >= 11\n),\n\naadt_7 as (\n    select\n        station_id,\n        city,\n        county,\n        district,\n        freeway,\n        direction,\n        station_type,\n        sample_year,\n        avg(aadw) as aadt_7,\n        count(aadw) as sample_ct\n    from aadw1\n    group by station_id, city, county, district, freeway, direction, station_type, sample_year\n    -- 1 of the 7 aadw values may be missing for this final AADT calculation.\n    having count(aadw) >= 6\n),\n\n-- AADT_8: Modified Provisional AASHTO\naverages_of_madw1 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(madw) as aadw,\n        day_of_week,\n        count(madw) as sample_ct,\n        sample_year\n    from monthly_average_days_of_the_week_traffic\n    where madw > 0\n    group by station_id, district, station_type, day_of_week, sample_year\n    -- 1 of the 12 MADW values may be missing in the AADW subcomputation\n    having count(madw) >= 11\n),\n\naadt_8 as (\n    select\n        station_id,\n        district,\n        station_type,\n        avg(aadw) as aadt_8,\n        sample_year\n    from averages_of_madw1\n    group by station_id, district, station_type, sample_year\n    -- 1 of the 7 aadw values may be missing for this final AADT calculation.\n    having count(aadw) >= 6\n),\n\n-- now join all aadt_CTE together\naadt_1_8 as (\n    select\n        aadt_1.*,\n        aadt_2.aadt_2,\n        aadt_3.aadt_3,\n        aadt_4.aadt_4,\n        aadt_5.aadt_5,\n        aadt_6.aadt_6,\n        aadt_7.aadt_7,\n        aadt_8.aadt_8\n    from aadt_1\n    left join aadt_2\n        on\n            aadt_1.station_id = aadt_2.station_id\n            and aadt_1.sample_year = aadt_2.sample_year\n    left join aadt_3\n        on\n            aadt_1.station_id = aadt_3.station_id\n            and aadt_1.sample_year = aadt_3.sample_year\n    left join aadt_4\n        on\n            aadt_1.station_id = aadt_4.station_id\n            and aadt_1.sample_year = aadt_4.sample_year\n    left join aadt_5\n        on\n            aadt_1.station_id = aadt_5.station_id\n            and aadt_1.sample_year = aadt_5.sample_year\n    left join aadt_6\n        on\n            aadt_1.station_id = aadt_6.station_id\n            and aadt_1.sample_year = aadt_6.sample_year\n    left join aadt_7\n        on\n            aadt_1.station_id = aadt_7.station_id\n            and aadt_1.sample_year = aadt_7.sample_year\n    left join aadt_8\n        on\n            aadt_1.station_id = aadt_8.station_id\n            and aadt_1.sample_year = aadt_8.sample_year\n),\n\n-- Calculate k-factors\ntraffic_data as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume,\n        sample_date,\n        date_trunc('year', sample_date) as observation_year\n    from good_station_hourly_agg\n),\n\n-- get 30th highest hour volume in preceding year\nk_30 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_30,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 30\n),\n\n-- get 50th highest hour volume in preceding year\nk_50 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_50,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 50\n),\n\n-- get 100th highest hour volume in preceding year\nk_100 as (\n    select\n        station_id,\n        district,\n        station_type,\n        hourly_volume as k_100,\n        observation_year,\n        dateadd(year, 1, observation_year) as kfactor_year\n    from traffic_data\n    qualify rank() over (\n        partition by station_id, observation_year\n        order by hourly_volume desc\n    ) = 100\n),\n\n-- join all k factors with all AADT\naadt_1_8_kfactors as (\n    select\n        aadt_1_8.*,\n        k_30.k_30,\n        k_50.k_50,\n        k_100.k_100\n    from aadt_1_8\n    left join k_30\n        on\n            aadt_1_8.station_id = k_30.station_id\n            and aadt_1_8.sample_year = k_30.kfactor_year\n    left join k_50\n        on\n            aadt_1_8.station_id = k_50.station_id\n            and aadt_1_8.sample_year = k_50.kfactor_year\n    left join k_100\n        on\n            aadt_1_8.station_id = k_100.station_id\n            and aadt_1_8.sample_year = k_100.kfactor_year\n)\n\nselect distinct\n    station_id,\n    station_type,\n    sample_year,\n    city,\n    county,\n    direction,\n    district,\n    freeway,\n    aadt_1,\n    aadt_2,\n    aadt_3,\n    aadt_4,\n    aadt_5,\n    aadt_6,\n    aadt_7,\n    aadt_8,\n    k_30,\n    k_50,\n    k_100\nfrom aadt_1_8_kfactors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly": {"database": "ANALYTICS_PRD", "schema": "performance", "name": "int_performance__bottleneck_delay_metrics_agg_weekly", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/performance/int_performance__bottleneck_delay_metrics_agg_weekly.sql", "original_file_path": "models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_weekly.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "int_performance__bottleneck_delay_metrics_agg_weekly"], "alias": "int_performance__bottleneck_delay_metrics_agg_weekly", "checksum": {"name": "sha256", "checksum": "b9a788e82b2d7e8163120d5fc9b23b54427ae1fb3599296b03057157119779f6"}, "config": {"enabled": true, "alias": null, "schema": "performance", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "unload_partitioning": "('year=' || to_varchar(date_part('year', sample_date)) || '/week=' || to_varchar(date_part('week', sample_date)))"}, "tags": [], "description": "Weekly aggregation of bottleneck performance by each station. This model measures the weekly performance\nof the state highway system at the station level, allowing for analysis of bottleneck metrics over weekly periods.\nIt is useful for identifying trends and recurring congestion patterns across weeks.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "An integer value that uniquely identifies a station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_WEEK": {"name": "SAMPLE_WEEK", "description": "The starting date of the week for aggregated data samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TIME_SHIFT": {"name": "TIME_SHIFT", "description": "- AM shift (5am - 10am)\n- PM shift (3pm - 8pm)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identifying the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "The absolute postmile location of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_DURATION": {"name": "WEEKLY_TIME_SHIFT_DURATION", "description": "How long the bottleneck was active within a week during that particular shift.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_ACTIVE_DAYS": {"name": "WEEKLY_ACTIVE_DAYS", "description": "How many days the bottleneck was active within a week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_EXTENT": {"name": "WEEKLY_TIME_SHIFT_EXTENT", "description": "Calculates the weekly congestion region from the bottleneck location towards upstream stations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_35_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_35_MPH", "description": "Weekly delay for threshold of 35 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_40_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_40_MPH", "description": "Weekly delay for threshold of 40 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_45_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_45_MPH", "description": "Weekly delay for threshold of 45 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_50_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_50_MPH", "description": "Weekly delay for threshold of 50 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_55_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_55_MPH", "description": "Weekly delay for threshold of 55 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_60_MPH": {"name": "WEEKLY_TIME_SHIFT_SPATIAL_DELAY_60_MPH", "description": "Weekly delay for threshold of 60 mph for each detector lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/performance/_bottleneck_delay.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "performance", "unload_partitioning": "Keyword(key='unload_partitioning', value=Const(value=\"('year=' || to_varchar(date_part('year', sample_date)) || '/week=' || to_varchar(date_part('week', sample_date)))\"))"}, "created_at": 1755632024.118398, "relation_name": "ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_weekly", "raw_code": "{{ config(\r\n    materialized='table',\r\n    unload_partitioning=\"('year=' || to_varchar(date_part('year', sample_date)) || '/week=' || to_varchar(date_part('week', sample_date)))\",\r\n) }}\r\n\r\nwith station_daily_data as (\r\n    select\r\n        *,\r\n        -- Extracting the start of each week\r\n        date_trunc(week, sample_date) as sample_week\r\n    from {{ ref('int_performance__bottleneck_delay_metrics_agg_daily') }}\r\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\r\n),\r\n\r\nweekly_spatial_bottleneck_delay_metrics as (\r\n    select\r\n        station_id,\r\n        sample_week,\r\n        time_shift,\r\n        any_value(district) as district,\r\n        any_value(county) as county,\r\n        any_value(station_type) as station_type,\r\n        any_value(freeway) as freeway,\r\n        any_value(direction) as direction,\r\n        any_value(absolute_postmile) as absolute_postmile,\r\n        avg(daily_time_shift_duration) as weekly_time_shift_duration,\r\n        sum(case when daily_time_shift_duration > 0 then 1 else 0 end) as weekly_active_days,\r\n        avg(daily_time_shift_bottleneck_extent) as weekly_time_shift_extent,\r\n        -- Spatial delay aggregation at weekly level, decomposed into time shift\r\n        {% for value in var(\"V_t\") %}\r\n            sum(daily_time_shift_spatial_delay_{{ value }}_mph)\r\n                as weekly_time_shift_spatial_delay_{{ value }}_mph\r\n            {% if not loop.last %}\r\n                ,\r\n            {% endif %}\r\n        {% endfor %}\r\n    from station_daily_data\r\n    group by\r\n        station_id,\r\n        sample_week,\r\n        time_shift,\r\n        district,\r\n        county,\r\n        station_type,\r\n        freeway,\r\n        direction,\r\n        absolute_postmile\r\n)\r\n\r\nselect * from weekly_spatial_bottleneck_delay_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__bottleneck_delay_metrics_agg_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/int_performance__bottleneck_delay_metrics_agg_weekly.sql", "compiled": true, "compiled_code": "\n\nwith station_daily_data as (\n    select\n        *,\n        -- Extracting the start of each week\n        date_trunc(week, sample_date) as sample_week\n    from ANALYTICS_PRD.performance.int_performance__bottleneck_delay_metrics_agg_daily\n    where date_trunc(week, sample_date) != date_trunc(week, current_date)\n),\n\nweekly_spatial_bottleneck_delay_metrics as (\n    select\n        station_id,\n        sample_week,\n        time_shift,\n        any_value(district) as district,\n        any_value(county) as county,\n        any_value(station_type) as station_type,\n        any_value(freeway) as freeway,\n        any_value(direction) as direction,\n        any_value(absolute_postmile) as absolute_postmile,\n        avg(daily_time_shift_duration) as weekly_time_shift_duration,\n        sum(case when daily_time_shift_duration > 0 then 1 else 0 end) as weekly_active_days,\n        avg(daily_time_shift_bottleneck_extent) as weekly_time_shift_extent,\n        -- Spatial delay aggregation at weekly level, decomposed into time shift\n        \n            sum(daily_time_shift_spatial_delay_35_mph)\n                as weekly_time_shift_spatial_delay_35_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_40_mph)\n                as weekly_time_shift_spatial_delay_40_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_45_mph)\n                as weekly_time_shift_spatial_delay_45_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_50_mph)\n                as weekly_time_shift_spatial_delay_50_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_55_mph)\n                as weekly_time_shift_spatial_delay_55_mph\n            \n                ,\n            \n        \n            sum(daily_time_shift_spatial_delay_60_mph)\n                as weekly_time_shift_spatial_delay_60_mph\n            \n        \n    from station_daily_data\n    group by\n        station_id,\n        sample_week,\n        time_shift,\n        district,\n        county,\n        station_type,\n        freeway,\n        direction,\n        absolute_postmile\n)\n\nselect * from weekly_spatial_bottleneck_delay_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__detector_outlier_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__detector_outlier_agg_five_minutes.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__detector_outlier_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__detector_outlier_agg_five_minutes"], "alias": "int_clearinghouse__detector_outlier_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "6671c5549100f79564441934e814e1ec31d0becc950af25aa54cdff3ac13fcef"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "This model takes the `int_clearinghouse__detector_agg_five_minutes` model and detects extreme values for\nflow and occupancy using z-score statistics in last month. All extreme values are filled with 95th percentile\nof data and labeled as 'observed_outlier'.\n", "columns": {"updated_volume_sum": {"name": "updated_volume_sum", "description": "Replace volume with 'volume_95th' if it is diagnosed as outlier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_label": {"name": "volume_label", "description": "Generate a new label indicating whether volume value is an outlier or normal data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_occupancy_avg": {"name": "updated_occupancy_avg", "description": "Replace occupancy with 'occupancy_95th' if it is diagnosed as outlier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_label": {"name": "occupancy_label", "description": "Generate a new label indicating whether occupancy value is an outlier or normal data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_timestamp": {"name": "sample_timestamp", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy values contain any non-null value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a detector located along a route and station from raw data.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_observed": {"name": "volume_observed", "description": "Number of vehicles that passed over the detector during the sample period for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_sum": {"name": "volume_sum", "description": "For the 5-minute aggregation there should be 10 30-second samples collected. If 10 or more\nsamples are collected the aggregated (sum) volume rounded to the nearest integer value is used\nbut if less than 10 samples are recieved in the 5-minute timeframe the flow is normalized using\nthe equation: 10 / sample count * sum(volume).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_ct": {"name": "zero_vol_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_avg": {"name": "occupancy_avg", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_ct": {"name": "zero_occ_ct", "description": "Counts the number of raw data samples where a lane's occupancy value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_pos_occ_ct": {"name": "zero_vol_pos_occ_ct", "description": "Counts the number of raw data samples where a lane's volume\n(flow) value equals 0 but occupancy is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_pos_vol_ct": {"name": "zero_occ_pos_vol_ct", "description": "Counts the number of raw data samples where a lane's occupancy value\nequals 0 but volume (flow) is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_volume_ct": {"name": "high_volume_ct", "description": "Counts the number of volume (flow) values in a lane that exceeded the high\nvalue threshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_ct": {"name": "high_occupancy_ct", "description": "Counts the number of occupancy values in a lane that exceeded the high value\nthreshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_weighted": {"name": "speed_weighted", "description": "Speed in the lane as measured by the detector in miles/hour.\nWeighted by number of vehicles in each sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "State Postmile value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "The length associated with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_from": {"name": "station_valid_from", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`station_valid_from <= date < station_valid_to`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_to": {"name": "station_valid_to", "description": "The date that this metadata became *invalid*.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "clearinghouse", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1811373, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_outlier_agg_five_minutes", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"sample_date\"],\r\n    unique_key=[\"detector_id\", \"sample_timestamp\"],\r\n    on_schema_change=\"append_new_columns\",\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\", big=\"XL\")\r\n) }}\r\n\r\n/*We dynamically select dataset for last week and calculate the statistics (mean, std)\r\nfor outlier detection*/\r\nwith\r\nfive_minute_agg_lastweek as (\r\n    select\r\n        detector_id,\r\n        sample_date,\r\n        volume_sum,\r\n        occupancy_avg\r\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\r\n    where\r\n        sample_date >= dateadd(week, -1, date_trunc('week', current_date))\r\n        and sample_date < date_trunc('week', current_date)\r\n        and station_type in ('ML', 'HV')\r\n),\r\n\r\n-- get all good detectors\r\ngood_detectors as (\r\n    select\r\n        detector_id,\r\n        sample_date\r\n    from {{ ref('int_diagnostics__detector_status') }}\r\n    where\r\n        status = 'Good'\r\n        and sample_date >= dateadd(week, -1, date_trunc('week', current_date))\r\n        and sample_date < date_trunc('week', current_date)\r\n        and station_type in ('ML', 'HV')\r\n),\r\n\r\n-- filter last week's data for good detectors only\r\nfiltered_five_minute_agg_lastweek as (\r\n    select\r\n        f.detector_id,\r\n        f.sample_date,\r\n        f.volume_sum,\r\n        f.occupancy_avg\r\n    from five_minute_agg_lastweek as f\r\n    inner join good_detectors as g\r\n        on\r\n            f.detector_id = g.detector_id\r\n            and f.sample_date = g.sample_date\r\n\r\n),\r\n\r\n-- calculate the statistics\r\nweekly_stats as (\r\n    select\r\n        detector_id,\r\n        avg(volume_sum) as volume_mean,\r\n        stddev(volume_sum) as volume_stddev,\r\n        -- consider using max_capacity\r\n        percentile_cont(0.95) within group (order by volume_sum) as volume_95th,\r\n        percentile_cont(0.95) within group (order by occupancy_avg) as occupancy_95th\r\n    from filtered_five_minute_agg_lastweek\r\n    group by detector_id\r\n),\r\n\r\n-- retrieve recent five-minute data\r\nfive_minute_agg as (\r\n    select *\r\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- impute detected outliers\r\noutlier_removed_data as (\r\n    select\r\n        fa.*,\r\n        -- update volume_sum if it's an outlier\r\n        case\r\n            when\r\n                (fa.volume_sum - ms.volume_mean) / nullifzero(ms.volume_stddev) > 3\r\n                then ms.volume_95th\r\n            else fa.volume_sum\r\n        end as updated_volume_sum,\r\n        -- add a volume_label for imputed volume\r\n        case\r\n            when\r\n                (fa.volume_sum - ms.volume_mean) / nullifzero(ms.volume_stddev) > 3\r\n                then 'observed outlier'\r\n            else 'observed data'\r\n        end as volume_label,\r\n        -- update occupancy if it's an outlier\r\n        case\r\n            when\r\n                fa.occupancy_avg > ms.occupancy_95th\r\n                then ms.occupancy_95th\r\n            else fa.occupancy_avg\r\n        end as updated_occupancy_avg,\r\n        -- add a column for imputed occupancy\r\n        case\r\n            when\r\n                fa.occupancy_avg > ms.occupancy_95th\r\n                then 'observed outlier'\r\n            else 'observed data'\r\n        end as occupancy_label\r\n    from five_minute_agg as fa\r\n    left join\r\n        weekly_stats as ms\r\n        on\r\n            fa.detector_id = ms.detector_id\r\n\r\n)\r\n\r\nselect * from outlier_removed_data", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}, {"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__detector_outlier_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n/*We dynamically select dataset for last week and calculate the statistics (mean, std)\nfor outlier detection*/\nwith\nfive_minute_agg_lastweek as (\n    select\n        detector_id,\n        sample_date,\n        volume_sum,\n        occupancy_avg\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    where\n        sample_date >= dateadd(week, -1, date_trunc('week', current_date))\n        and sample_date < date_trunc('week', current_date)\n        and station_type in ('ML', 'HV')\n),\n\n-- get all good detectors\ngood_detectors as (\n    select\n        detector_id,\n        sample_date\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where\n        status = 'Good'\n        and sample_date >= dateadd(week, -1, date_trunc('week', current_date))\n        and sample_date < date_trunc('week', current_date)\n        and station_type in ('ML', 'HV')\n),\n\n-- filter last week's data for good detectors only\nfiltered_five_minute_agg_lastweek as (\n    select\n        f.detector_id,\n        f.sample_date,\n        f.volume_sum,\n        f.occupancy_avg\n    from five_minute_agg_lastweek as f\n    inner join good_detectors as g\n        on\n            f.detector_id = g.detector_id\n            and f.sample_date = g.sample_date\n\n),\n\n-- calculate the statistics\nweekly_stats as (\n    select\n        detector_id,\n        avg(volume_sum) as volume_mean,\n        stddev(volume_sum) as volume_stddev,\n        -- consider using max_capacity\n        percentile_cont(0.95) within group (order by volume_sum) as volume_95th,\n        percentile_cont(0.95) within group (order by occupancy_avg) as occupancy_95th\n    from filtered_five_minute_agg_lastweek\n    group by detector_id\n),\n\n-- retrieve recent five-minute data\nfive_minute_agg as (\n    select *\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    where \n    1=1\n    \n),\n\n-- impute detected outliers\noutlier_removed_data as (\n    select\n        fa.*,\n        -- update volume_sum if it's an outlier\n        case\n            when\n                (fa.volume_sum - ms.volume_mean) / nullifzero(ms.volume_stddev) > 3\n                then ms.volume_95th\n            else fa.volume_sum\n        end as updated_volume_sum,\n        -- add a volume_label for imputed volume\n        case\n            when\n                (fa.volume_sum - ms.volume_mean) / nullifzero(ms.volume_stddev) > 3\n                then 'observed outlier'\n            else 'observed data'\n        end as volume_label,\n        -- update occupancy if it's an outlier\n        case\n            when\n                fa.occupancy_avg > ms.occupancy_95th\n                then ms.occupancy_95th\n            else fa.occupancy_avg\n        end as updated_occupancy_avg,\n        -- add a column for imputed occupancy\n        case\n            when\n                fa.occupancy_avg > ms.occupancy_95th\n                then 'observed outlier'\n            else 'observed data'\n        end as occupancy_label\n    from five_minute_agg as fa\n    left join\n        weekly_stats as ms\n        on\n            fa.detector_id = ms.detector_id\n\n)\n\nselect * from outlier_removed_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__station_status", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__station_status.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__station_status.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__station_status"], "alias": "int_clearinghouse__station_status", "checksum": {"name": "sha256", "checksum": "2def6cdb66364145969606f16b8ae620e2db9180a5f510cf058a55d22db21bbe"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "TMDD Status data from PeMS Clearinghouse. This seems to be the main source of detector\nID to station ID mapping. This model is unique at the level of META_DATE + DETECTOR_ID.\n", "columns": {"META_DATE": {"name": "META_DATE", "description": "The date of the XML metadata file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_NAME": {"name": "DETECTOR_NAME", "description": "The name of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_STATUS": {"name": "DETECTOR_STATUS", "description": "Detector status as reported by the XML file. Probably not useful when determining\n*actual* status of the detector.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LAST_UPDATE_TIME": {"name": "LAST_UPDATE_TIME", "description": "The last updated time. This seems to be empty for the whole dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE_NUMBER": {"name": "LANE_NUMBER", "description": "The lane number for the detector. This seems to be reported as\n1, 10, 100, 1000, 10000, etc for each successive lane, rather than counting up\nfrom one.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_FROM": {"name": "_VALID_FROM", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_TO": {"name": "_VALID_TO", "description": "The date that this metadata became *invalid*.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FILENAME": {"name": "FILENAME", "description": "the clearinghouse path and filename where the data models meta data was\nobtained from\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "clearinghouse"}, "created_at": 1755632024.1655238, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status", "raw_code": "with station_status as (\n    select * from {{ ref(\"stg_clearinghouse__station_status\") }}\n),\n\nstatus_dates as (\n    select distinct\n        district,\n        meta_date\n    from station_status\n),\n\nvalidity_dates as (\n    select\n        district,\n        meta_date,\n        meta_date as _valid_from,\n        lead(meta_date) over (partition by district order by meta_date asc) as _valid_to\n    from status_dates\n),\n\nstation_status_scd as (\n    select\n        station_status.*,\n        validity_dates._valid_from,\n        validity_dates._valid_to\n    from station_status\n    inner join validity_dates\n        on\n            station_status.meta_date = validity_dates.meta_date\n            and station_status.district = validity_dates.district\n)\n\nselect * from station_status_scd", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__station_status.sql", "compiled": true, "compiled_code": "with station_status as (\n    select * from ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_status\n),\n\nstatus_dates as (\n    select distinct\n        district,\n        meta_date\n    from station_status\n),\n\nvalidity_dates as (\n    select\n        district,\n        meta_date,\n        meta_date as _valid_from,\n        lead(meta_date) over (partition by district order by meta_date asc) as _valid_to\n    from status_dates\n),\n\nstation_status_scd as (\n    select\n        station_status.*,\n        validity_dates._valid_from,\n        validity_dates._valid_to\n    from station_status\n    inner join validity_dates\n        on\n            station_status.meta_date = validity_dates.meta_date\n            and station_status.district = validity_dates.district\n)\n\nselect * from station_status_scd", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DETECTOR_ID", "META_DATE"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__detector_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__detector_agg_five_minutes"], "alias": "int_clearinghouse__detector_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "27c7f958d173a5c09a211349cbc8cbe821347ffc1c1225c1859a934a92e5275a"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp", "sample_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "The data model contains the raw 30 second sample data aggregated to the 5 minute level.\nThis model should be unique at the level of SAMPLE_TIMESTAMP + DETECTOR_ID.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_POSTMILE": {"name": "STATE_POSTMILE", "description": "State Postmile value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length associated with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PHYSICAL_LANES": {"name": "PHYSICAL_LANES", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow)\nand occupancy values contain any non-null value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a detector located along a route and station from raw data.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_observed": {"name": "volume_observed", "description": "Number of vehicles that passed over the detector during the sample period for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_sum": {"name": "volume_sum", "description": "For the 5-minute aggregation there should be 10 30-second samples collected. If 10 or more\nsamples are collected the aggregated (sum) volume rounded to the nearest integer value is used\nbut if less than 10 samples are recieved in the 5-minute timeframe the flow is normalized using\nthe equation: 10 / sample count * sum(volume)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_ct": {"name": "zero_vol_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_avg": {"name": "occupancy_avg", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_ct": {"name": "zero_occ_ct", "description": "Counts the number of raw data samples where a lane's occupancy value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_pos_occ_ct": {"name": "zero_vol_pos_occ_ct", "description": "Counts the number of raw data samples where a lane's volume\n(flow) value equals 0 but occupancy is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_pos_vol_ct": {"name": "zero_occ_pos_vol_ct", "description": "Counts the number of raw data samples where a lane's occupancy value\nequals 0 but volume (flow) is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_volume_ct": {"name": "high_volume_ct", "description": "Counts the number of volume (flow) values in a lane that exceeded the high\nvalue threshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_ct": {"name": "high_occupancy_ct", "description": "Counts the number of occupancy values in a lane that exceeded the high value\nthreshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_weighted": {"name": "speed_weighted", "description": "Speed in the lane as measured by the detector in miles/hour.\nWeighted by number of vehicles in each sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_FROM": {"name": "STATION_VALID_FROM", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`STATION_VALID_FROM <= date < STATION_VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_TO": {"name": "STATION_VALID_TO", "description": "The date that this metadata became *invalid*.\nFinding the right metadata for a date should involve a check with\n`STATION_VALID_FROM <= date < STATION_VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "clearinghouse", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1680772, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    cluster_by=[\"sample_date\"],\n    unique_key=[\"detector_id\", \"sample_timestamp\",\"sample_date\"],\n    on_schema_change=\"append_new_columns\",\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\", big=\"XL\")\n) }}\n{% set n_lanes = 8 %}\n\nwith raw as (\n    select\n        *,\n        /* Create a timestamp truncated down to the nearest five\n         minute bucket. This will be the the timestamp on which\n         we aggregate. If a 30-second interval straddles two different\n         buckets, it will be assigned to the one latter one due to\n         the floor() call.\n        */\n        dateadd(\n            'minute',\n            floor(minute(sample_timestamp) / 5) * 5,\n            trunc(sample_timestamp, 'hour')\n        ) as sample_timestamp_trunc\n    from {{ ref('stg_clearinghouse__station_raw') }}\n\n    where {{ make_model_incremental('sample_date') }}\n),\n\ndmeta as (\n    select * from {{ ref('int_vds__detector_config') }}\n),\n\nagg as (\n    select\n        id as station_id,\n        sample_date,\n        sample_timestamp_trunc as sample_timestamp,\n        district,\n        {% for lane in range(1, n_lanes+1) %}\n            sum(volume_{{ lane }}) as volume_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(volume_{{ lane }} = 0) as zero_vol_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            avg(occupancy_{{ lane }}) as occupancy_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(occupancy_{{ lane }} = 0) as zero_occ_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(volume_{{ lane }} = 0 and occupancy_{{ lane }} > 0) as zero_vol_pos_occ_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(volume_{{ lane }} > 0 and occupancy_{{ lane }} = 0) as zero_occ_pos_vol_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(volume_{{ lane }} > {{ var(\"high_volume_threshold\") }}) as high_volume_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(occupancy_{{ lane }} > {{ var(\"high_occupancy_threshold\") }}) as high_occupancy_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            count_if(volume_{{ lane }} is not null and occupancy_{{ lane }} is not null) as sample_ct_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            sum(volume_{{ lane }} * speed_{{ lane }})\n            / nullifzero(sum(volume_{{ lane }})) as speed_weighted_{{ lane }}        {% if not loop.last %}\n                ,\n            {% endif %}\n        {% endfor %}\n    from raw\n    group by station_id, sample_date, sample_timestamp_trunc, district\n),\n\n{% for lane in range(1, n_lanes+1) %}\n    agg_{{ lane }} as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_{{ lane }} as sample_ct,\n            {{ lane }} as lane,\n            volume_{{ lane }} as volume_observed,\n            round(iff(\n                sample_ct_{{ lane }} >= 10, volume_{{ lane }},\n                10 / nullifzero(sample_ct_{{ lane }}) * volume_{{ lane }}\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_{{ lane }} as zero_vol_ct,\n            occupancy_{{ lane }} as occupancy_avg,\n            zero_occ_ct_{{ lane }} as zero_occ_ct,\n            zero_vol_pos_occ_ct_{{ lane }} as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_{{ lane }} as zero_occ_pos_vol_ct,\n            high_volume_ct_{{ lane }} as high_volume_ct,\n            high_occupancy_ct_{{ lane }} as high_occupancy_ct,\n            speed_weighted_{{ lane }} as speed_weighted\n        from agg\n    ),\n{% endfor %}\n\nagg_unioned as (\n    {% for lane in range(1, n_lanes+1) %}\n        select * from agg_{{ lane }}\n        {{ \"union all\" if not loop.last }}\n    {% endfor %}\n),\n\nagg_with_metadata as (\n    select\n        agg.*,\n        dmeta.detector_id,\n        dmeta.state_postmile,\n        dmeta.absolute_postmile,\n        dmeta.latitude,\n        dmeta.longitude,\n        dmeta.physical_lanes,\n        dmeta.station_type,\n        dmeta.county,\n        dmeta.city,\n        dmeta.freeway,\n        dmeta.direction,\n        dmeta.length,\n        dmeta._valid_from as station_valid_from,\n        dmeta._valid_to as station_valid_to\n    from agg_unioned as agg inner join dmeta\n        on\n            agg.station_id = dmeta.station_id\n            and agg.lane = dmeta.lane\n            and {{ get_scd_2_data('agg.sample_date','dmeta._valid_from','dmeta._valid_to') }}\n\n)\n\nselect * from agg_with_metadata", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_raw", "package": null, "version": null}, {"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n\nwith raw as (\n    select\n        *,\n        /* Create a timestamp truncated down to the nearest five\n         minute bucket. This will be the the timestamp on which\n         we aggregate. If a 30-second interval straddles two different\n         buckets, it will be assigned to the one latter one due to\n         the floor() call.\n        */\n        dateadd(\n            'minute',\n            floor(minute(sample_timestamp) / 5) * 5,\n            trunc(sample_timestamp, 'hour')\n        ) as sample_timestamp_trunc\n    from ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_raw\n\n    where \n    1=1\n    \n),\n\ndmeta as (\n    select * from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\nagg as (\n    select\n        id as station_id,\n        sample_date,\n        sample_timestamp_trunc as sample_timestamp,\n        district,\n        \n            sum(volume_1) as volume_1,\n        \n            sum(volume_2) as volume_2,\n        \n            sum(volume_3) as volume_3,\n        \n            sum(volume_4) as volume_4,\n        \n            sum(volume_5) as volume_5,\n        \n            sum(volume_6) as volume_6,\n        \n            sum(volume_7) as volume_7,\n        \n            sum(volume_8) as volume_8,\n        \n        \n            count_if(volume_1 = 0) as zero_vol_ct_1,\n        \n            count_if(volume_2 = 0) as zero_vol_ct_2,\n        \n            count_if(volume_3 = 0) as zero_vol_ct_3,\n        \n            count_if(volume_4 = 0) as zero_vol_ct_4,\n        \n            count_if(volume_5 = 0) as zero_vol_ct_5,\n        \n            count_if(volume_6 = 0) as zero_vol_ct_6,\n        \n            count_if(volume_7 = 0) as zero_vol_ct_7,\n        \n            count_if(volume_8 = 0) as zero_vol_ct_8,\n        \n        \n            avg(occupancy_1) as occupancy_1,\n        \n            avg(occupancy_2) as occupancy_2,\n        \n            avg(occupancy_3) as occupancy_3,\n        \n            avg(occupancy_4) as occupancy_4,\n        \n            avg(occupancy_5) as occupancy_5,\n        \n            avg(occupancy_6) as occupancy_6,\n        \n            avg(occupancy_7) as occupancy_7,\n        \n            avg(occupancy_8) as occupancy_8,\n        \n        \n            count_if(occupancy_1 = 0) as zero_occ_ct_1,\n        \n            count_if(occupancy_2 = 0) as zero_occ_ct_2,\n        \n            count_if(occupancy_3 = 0) as zero_occ_ct_3,\n        \n            count_if(occupancy_4 = 0) as zero_occ_ct_4,\n        \n            count_if(occupancy_5 = 0) as zero_occ_ct_5,\n        \n            count_if(occupancy_6 = 0) as zero_occ_ct_6,\n        \n            count_if(occupancy_7 = 0) as zero_occ_ct_7,\n        \n            count_if(occupancy_8 = 0) as zero_occ_ct_8,\n        \n        \n            count_if(volume_1 = 0 and occupancy_1 > 0) as zero_vol_pos_occ_ct_1,\n        \n            count_if(volume_2 = 0 and occupancy_2 > 0) as zero_vol_pos_occ_ct_2,\n        \n            count_if(volume_3 = 0 and occupancy_3 > 0) as zero_vol_pos_occ_ct_3,\n        \n            count_if(volume_4 = 0 and occupancy_4 > 0) as zero_vol_pos_occ_ct_4,\n        \n            count_if(volume_5 = 0 and occupancy_5 > 0) as zero_vol_pos_occ_ct_5,\n        \n            count_if(volume_6 = 0 and occupancy_6 > 0) as zero_vol_pos_occ_ct_6,\n        \n            count_if(volume_7 = 0 and occupancy_7 > 0) as zero_vol_pos_occ_ct_7,\n        \n            count_if(volume_8 = 0 and occupancy_8 > 0) as zero_vol_pos_occ_ct_8,\n        \n        \n            count_if(volume_1 > 0 and occupancy_1 = 0) as zero_occ_pos_vol_ct_1,\n        \n            count_if(volume_2 > 0 and occupancy_2 = 0) as zero_occ_pos_vol_ct_2,\n        \n            count_if(volume_3 > 0 and occupancy_3 = 0) as zero_occ_pos_vol_ct_3,\n        \n            count_if(volume_4 > 0 and occupancy_4 = 0) as zero_occ_pos_vol_ct_4,\n        \n            count_if(volume_5 > 0 and occupancy_5 = 0) as zero_occ_pos_vol_ct_5,\n        \n            count_if(volume_6 > 0 and occupancy_6 = 0) as zero_occ_pos_vol_ct_6,\n        \n            count_if(volume_7 > 0 and occupancy_7 = 0) as zero_occ_pos_vol_ct_7,\n        \n            count_if(volume_8 > 0 and occupancy_8 = 0) as zero_occ_pos_vol_ct_8,\n        \n        \n            count_if(volume_1 > 20) as high_volume_ct_1,\n        \n            count_if(volume_2 > 20) as high_volume_ct_2,\n        \n            count_if(volume_3 > 20) as high_volume_ct_3,\n        \n            count_if(volume_4 > 20) as high_volume_ct_4,\n        \n            count_if(volume_5 > 20) as high_volume_ct_5,\n        \n            count_if(volume_6 > 20) as high_volume_ct_6,\n        \n            count_if(volume_7 > 20) as high_volume_ct_7,\n        \n            count_if(volume_8 > 20) as high_volume_ct_8,\n        \n        \n            count_if(occupancy_1 > 0.7) as high_occupancy_ct_1,\n        \n            count_if(occupancy_2 > 0.7) as high_occupancy_ct_2,\n        \n            count_if(occupancy_3 > 0.7) as high_occupancy_ct_3,\n        \n            count_if(occupancy_4 > 0.7) as high_occupancy_ct_4,\n        \n            count_if(occupancy_5 > 0.7) as high_occupancy_ct_5,\n        \n            count_if(occupancy_6 > 0.7) as high_occupancy_ct_6,\n        \n            count_if(occupancy_7 > 0.7) as high_occupancy_ct_7,\n        \n            count_if(occupancy_8 > 0.7) as high_occupancy_ct_8,\n        \n        \n            count_if(volume_1 is not null and occupancy_1 is not null) as sample_ct_1,\n        \n            count_if(volume_2 is not null and occupancy_2 is not null) as sample_ct_2,\n        \n            count_if(volume_3 is not null and occupancy_3 is not null) as sample_ct_3,\n        \n            count_if(volume_4 is not null and occupancy_4 is not null) as sample_ct_4,\n        \n            count_if(volume_5 is not null and occupancy_5 is not null) as sample_ct_5,\n        \n            count_if(volume_6 is not null and occupancy_6 is not null) as sample_ct_6,\n        \n            count_if(volume_7 is not null and occupancy_7 is not null) as sample_ct_7,\n        \n            count_if(volume_8 is not null and occupancy_8 is not null) as sample_ct_8,\n        \n        \n            sum(volume_1 * speed_1)\n            / nullifzero(sum(volume_1)) as speed_weighted_1        \n                ,\n            \n        \n            sum(volume_2 * speed_2)\n            / nullifzero(sum(volume_2)) as speed_weighted_2        \n                ,\n            \n        \n            sum(volume_3 * speed_3)\n            / nullifzero(sum(volume_3)) as speed_weighted_3        \n                ,\n            \n        \n            sum(volume_4 * speed_4)\n            / nullifzero(sum(volume_4)) as speed_weighted_4        \n                ,\n            \n        \n            sum(volume_5 * speed_5)\n            / nullifzero(sum(volume_5)) as speed_weighted_5        \n                ,\n            \n        \n            sum(volume_6 * speed_6)\n            / nullifzero(sum(volume_6)) as speed_weighted_6        \n                ,\n            \n        \n            sum(volume_7 * speed_7)\n            / nullifzero(sum(volume_7)) as speed_weighted_7        \n                ,\n            \n        \n            sum(volume_8 * speed_8)\n            / nullifzero(sum(volume_8)) as speed_weighted_8        \n        \n    from raw\n    group by station_id, sample_date, sample_timestamp_trunc, district\n),\n\n\n    agg_1 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_1 as sample_ct,\n            1 as lane,\n            volume_1 as volume_observed,\n            round(iff(\n                sample_ct_1 >= 10, volume_1,\n                10 / nullifzero(sample_ct_1) * volume_1\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_1 as zero_vol_ct,\n            occupancy_1 as occupancy_avg,\n            zero_occ_ct_1 as zero_occ_ct,\n            zero_vol_pos_occ_ct_1 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_1 as zero_occ_pos_vol_ct,\n            high_volume_ct_1 as high_volume_ct,\n            high_occupancy_ct_1 as high_occupancy_ct,\n            speed_weighted_1 as speed_weighted\n        from agg\n    ),\n\n    agg_2 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_2 as sample_ct,\n            2 as lane,\n            volume_2 as volume_observed,\n            round(iff(\n                sample_ct_2 >= 10, volume_2,\n                10 / nullifzero(sample_ct_2) * volume_2\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_2 as zero_vol_ct,\n            occupancy_2 as occupancy_avg,\n            zero_occ_ct_2 as zero_occ_ct,\n            zero_vol_pos_occ_ct_2 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_2 as zero_occ_pos_vol_ct,\n            high_volume_ct_2 as high_volume_ct,\n            high_occupancy_ct_2 as high_occupancy_ct,\n            speed_weighted_2 as speed_weighted\n        from agg\n    ),\n\n    agg_3 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_3 as sample_ct,\n            3 as lane,\n            volume_3 as volume_observed,\n            round(iff(\n                sample_ct_3 >= 10, volume_3,\n                10 / nullifzero(sample_ct_3) * volume_3\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_3 as zero_vol_ct,\n            occupancy_3 as occupancy_avg,\n            zero_occ_ct_3 as zero_occ_ct,\n            zero_vol_pos_occ_ct_3 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_3 as zero_occ_pos_vol_ct,\n            high_volume_ct_3 as high_volume_ct,\n            high_occupancy_ct_3 as high_occupancy_ct,\n            speed_weighted_3 as speed_weighted\n        from agg\n    ),\n\n    agg_4 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_4 as sample_ct,\n            4 as lane,\n            volume_4 as volume_observed,\n            round(iff(\n                sample_ct_4 >= 10, volume_4,\n                10 / nullifzero(sample_ct_4) * volume_4\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_4 as zero_vol_ct,\n            occupancy_4 as occupancy_avg,\n            zero_occ_ct_4 as zero_occ_ct,\n            zero_vol_pos_occ_ct_4 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_4 as zero_occ_pos_vol_ct,\n            high_volume_ct_4 as high_volume_ct,\n            high_occupancy_ct_4 as high_occupancy_ct,\n            speed_weighted_4 as speed_weighted\n        from agg\n    ),\n\n    agg_5 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_5 as sample_ct,\n            5 as lane,\n            volume_5 as volume_observed,\n            round(iff(\n                sample_ct_5 >= 10, volume_5,\n                10 / nullifzero(sample_ct_5) * volume_5\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_5 as zero_vol_ct,\n            occupancy_5 as occupancy_avg,\n            zero_occ_ct_5 as zero_occ_ct,\n            zero_vol_pos_occ_ct_5 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_5 as zero_occ_pos_vol_ct,\n            high_volume_ct_5 as high_volume_ct,\n            high_occupancy_ct_5 as high_occupancy_ct,\n            speed_weighted_5 as speed_weighted\n        from agg\n    ),\n\n    agg_6 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_6 as sample_ct,\n            6 as lane,\n            volume_6 as volume_observed,\n            round(iff(\n                sample_ct_6 >= 10, volume_6,\n                10 / nullifzero(sample_ct_6) * volume_6\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_6 as zero_vol_ct,\n            occupancy_6 as occupancy_avg,\n            zero_occ_ct_6 as zero_occ_ct,\n            zero_vol_pos_occ_ct_6 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_6 as zero_occ_pos_vol_ct,\n            high_volume_ct_6 as high_volume_ct,\n            high_occupancy_ct_6 as high_occupancy_ct,\n            speed_weighted_6 as speed_weighted\n        from agg\n    ),\n\n    agg_7 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_7 as sample_ct,\n            7 as lane,\n            volume_7 as volume_observed,\n            round(iff(\n                sample_ct_7 >= 10, volume_7,\n                10 / nullifzero(sample_ct_7) * volume_7\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_7 as zero_vol_ct,\n            occupancy_7 as occupancy_avg,\n            zero_occ_ct_7 as zero_occ_ct,\n            zero_vol_pos_occ_ct_7 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_7 as zero_occ_pos_vol_ct,\n            high_volume_ct_7 as high_volume_ct,\n            high_occupancy_ct_7 as high_occupancy_ct,\n            speed_weighted_7 as speed_weighted\n        from agg\n    ),\n\n    agg_8 as (\n        select\n            station_id,\n            sample_date,\n            sample_timestamp,\n            district,\n            sample_ct_8 as sample_ct,\n            8 as lane,\n            volume_8 as volume_observed,\n            round(iff(\n                sample_ct_8 >= 10, volume_8,\n                10 / nullifzero(sample_ct_8) * volume_8\n            ))\n                as volume_sum,\n                --Represents the observed or normalized flow value based on the\n                --number of samples recieved by the device\n            zero_vol_ct_8 as zero_vol_ct,\n            occupancy_8 as occupancy_avg,\n            zero_occ_ct_8 as zero_occ_ct,\n            zero_vol_pos_occ_ct_8 as zero_vol_pos_occ_ct,\n            zero_occ_pos_vol_ct_8 as zero_occ_pos_vol_ct,\n            high_volume_ct_8 as high_volume_ct,\n            high_occupancy_ct_8 as high_occupancy_ct,\n            speed_weighted_8 as speed_weighted\n        from agg\n    ),\n\n\nagg_unioned as (\n    \n        select * from agg_1\n        union all\n    \n        select * from agg_2\n        union all\n    \n        select * from agg_3\n        union all\n    \n        select * from agg_4\n        union all\n    \n        select * from agg_5\n        union all\n    \n        select * from agg_6\n        union all\n    \n        select * from agg_7\n        union all\n    \n        select * from agg_8\n        \n    \n),\n\nagg_with_metadata as (\n    select\n        agg.*,\n        dmeta.detector_id,\n        dmeta.state_postmile,\n        dmeta.absolute_postmile,\n        dmeta.latitude,\n        dmeta.longitude,\n        dmeta.physical_lanes,\n        dmeta.station_type,\n        dmeta.county,\n        dmeta.city,\n        dmeta.freeway,\n        dmeta.direction,\n        dmeta.length,\n        dmeta._valid_from as station_valid_from,\n        dmeta._valid_to as station_valid_to\n    from agg_unioned as agg inner join dmeta\n        on\n            agg.station_id = dmeta.station_id\n            and agg.lane = dmeta.lane\n            and \n\n    agg.sample_date >= dmeta._valid_from\n    and ( agg.sample_date < dmeta._valid_to or dmeta._valid_to is null)\n\n\n\n)\n\nselect * from agg_with_metadata", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__station_meta", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__station_meta.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__station_meta.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__station_meta"], "alias": "int_clearinghouse__station_meta", "checksum": {"name": "sha256", "checksum": "e0fb3d3e1518158b4783f9fb6b2c9afad081865b2d5634acf0c0ac7098710722"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Vehicle detector station metadata from the [PeMS Clearinghouse feeds](https://pems.dot.ca.gov/feeds/clhouse/).\nThis model is not recommended for further use, instead use int_vds__detector_config or int_vds__station_config.\n", "columns": {"META_DATE": {"name": "META_DATE", "description": "Date of the metadata file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ID": {"name": "ID", "description": "An integer value that uniquely indenties the Station Metadata.\nUse this value to 'join' other clearinghouse files that contain Station Metadata.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_POSTMILE": {"name": "STATE_POSTMILE", "description": "State Postmile value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANES": {"name": "LANES", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length associated with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME": {"name": "NAME", "description": "A descriptive name assocaited with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE": {"name": "TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_FROM": {"name": "_VALID_FROM", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_TO": {"name": "_VALID_TO", "description": "The date that this metadata became *invalid*.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FILENAME": {"name": "FILENAME", "description": "the clearinghouse path and filename where the station meta data was\nobtained from\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "clearinghouse"}, "created_at": 1755632024.1628432, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_meta", "raw_code": "with station_meta as (\n    select * from {{ ref(\"stg_clearinghouse__station_meta\") }}\n),\n\nmeta_dates as (\n    select distinct\n        district,\n        meta_date\n    from station_meta\n),\n\nvalidity_dates as (\n    select\n        district,\n        meta_date,\n        meta_date as _valid_from,\n        lead(meta_date) over (partition by district order by meta_date asc) as _valid_to\n    from meta_dates\n),\n\nstation_meta_scd as (\n    select\n        station_meta.*,\n        validity_dates._valid_from,\n        validity_dates._valid_to\n    from station_meta\n    inner join validity_dates\n        on\n            station_meta.meta_date = validity_dates.meta_date\n            and station_meta.district = validity_dates.district\n)\n\nselect * from station_meta_scd", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__station_meta.sql", "compiled": true, "compiled_code": "with station_meta as (\n    select * from ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_meta\n),\n\nmeta_dates as (\n    select distinct\n        district,\n        meta_date\n    from station_meta\n),\n\nvalidity_dates as (\n    select\n        district,\n        meta_date,\n        meta_date as _valid_from,\n        lead(meta_date) over (partition by district order by meta_date asc) as _valid_to\n    from meta_dates\n),\n\nstation_meta_scd as (\n    select\n        station_meta.*,\n        validity_dates._valid_from,\n        validity_dates._valid_to\n    from station_meta\n    inner join validity_dates\n        on\n            station_meta.meta_date = validity_dates.meta_date\n            and station_meta.district = validity_dates.district\n)\n\nselect * from station_meta_scd", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__detector_g_factor_based_speed", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__detector_g_factor_based_speed.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__detector_g_factor_based_speed.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__detector_g_factor_based_speed"], "alias": "int_clearinghouse__detector_g_factor_based_speed", "checksum": {"name": "sha256", "checksum": "778e7cc6355353510f7b5b64eb1bcc929652c1eaac6e39494208f9bf987d7e3a"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp", "sample_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "This model calculates the g-factor based smoothing speed. According to the PeMS documentation, the\nPeMS system computes speed for sensors that don't report speed, like single loop detectors. The g-factor\nis a value that represents the effective length of the vehicles. Typically, a constant value for the g-factor\nis used which leads to inaccurate speeds because the g-factor varies by lane, time-of-day, as well as the loop\nsensitivity. PeMS estimates a g-factor for each loop for every 5 minutes over an average week to provide accurate\nspeed estimates.\n", "columns": {"week_start": {"name": "week_start", "description": "Generate a shared temporal label for aggregation of weekly data.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "hour": {"name": "hour", "description": "Hour of day data collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "day": {"name": "day", "description": "Day of month data collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_threshold": {"name": "occupancy_threshold", "description": "Count the 60th percentile of observed occupancies within a week.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane_number": {"name": "lane_number", "description": "The number of lanes for each station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "free_flow_speed": {"name": "free_flow_speed", "description": "A specific free flow speed based on the type of freeway (meaning the total number of lanes)\nand the particular lane that the detector is. For example, the free-flow speed in lane 2 of\na 2-lane freeway is different from the free-flow speed in lane 2 of a 5-lane freeway.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "raw_g_factor": {"name": "raw_g_factor", "description": "Dynamic vehicle length which is an unbiased estimator based on threshold, free_flow_speed\nand real-time occupancy.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "p_factor": {"name": "p_factor", "description": "An exponential filter with weights that vary as a function of the flow.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_preliminary": {"name": "speed_preliminary", "description": "An initial speed estimate is passed through the p_factor based exponential filter. When the\nflow at the loop is low the smoothing is quite severe. When the flow is high, there is little\nsmoothing. This allows us to quickly adapt to periods of congestion as well as to have stable\nspeeds when the data is sparse (like in the middle of the night).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_smoothed": {"name": "speed_smoothed", "description": "A smoothed version of the estimated speed by passing through the exponential filter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "imputed_speed": {"name": "imputed_speed", "description": "An imputed version of g-factor based speed, adjusted using upper and lower bounds. Boundaries vary\nbased on different scenarios for specific lanes.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The unique detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "The lane number of the detector, starting from 1.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "For the 5-minute aggregation there should be 10 30-second samples collected. If 10 or more\nsamples are collected the aggregated (sum) volume rounded to the nearest integer value is used\nbut if less than 10 samples are recieved in the 5-minute timeframe the flow is normalized using\nthe equation: 10 / sample count * sum(volume).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_OBSERVED": {"name": "VOLUME_OBSERVED", "description": "Number of vehicles that passed over the detector during the sample period for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "G_FACTOR": {"name": "G_FACTOR", "description": "The g-factor value used to calculate the speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "clearinghouse", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.1778717, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"sample_date\"],\r\n    unique_key=[\"detector_id\", \"sample_timestamp\",\"sample_date\"],\r\n    on_schema_change=\"append_new_columns\",\r\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\", big=\"XL\")\r\n) }}\r\n\r\nwith\r\n\r\ndetector_agg as (\r\n    select\r\n        detector_id,\r\n        sample_date,\r\n        sample_timestamp,\r\n        station_id,\r\n        lane,\r\n        station_type,\r\n        updated_volume_sum as volume_sum,\r\n        updated_occupancy_avg as occupancy_avg,\r\n        volume_observed\r\n    from {{ ref('int_clearinghouse__detector_outlier_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\nweek_gen as (\r\n    select\r\n        *,\r\n        date_trunc('week', sample_date) as week_start,\r\n        date_trunc('hour', sample_timestamp) as hour,\r\n        date_trunc('day', sample_date) as day\r\n    from detector_agg\r\n),\r\n\r\n/* Generate 60-th percentile of the observed occupancies as occupancy threshold for a week dataset */\r\nthreshold as (\r\n    select\r\n        *,\r\n        percentile_cont(0.6) within group (order by occupancy_avg)\r\n            over (partition by detector_id, week_start)\r\n            as occupancy_threshold,\r\n\r\n        max(lane)\r\n            over (partition by station_id, station_type)\r\n            as lane_number\r\n\r\n    from week_gen\r\n),\r\n\r\n/* Generate a table of free-flow speeds that are used to calculate g factor.\r\n * For detailed information, please refer to https://pems.dot.ca.gov/?dnode=Help&content=help_calc#speeds\r\n*/\r\nfree_speed as (\r\n    select\r\n        *,\r\n        case\r\n            when\r\n                station_type = 'HV'\r\n                then 65\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 1\r\n                then 65\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 2\r\n                and lane = 1\r\n                then 71.2\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 2\r\n                and lane = 2\r\n                then 65.1\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 3\r\n                and lane = 1\r\n                then 71.9\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 3\r\n                and lane = 2\r\n                then 69.7\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 3\r\n                and lane = 3\r\n                then 62.7\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 4\r\n                and lane = 1\r\n                then 74.8\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 4\r\n                and lane = 2\r\n                then 70.9\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 4\r\n                and lane = 3\r\n                then 67.4\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 4\r\n                and lane = 4\r\n                then 62.8\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 5\r\n                and lane = 1\r\n                then 76.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 5\r\n                and lane = 2\r\n                then 74.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 5\r\n                and lane = 3\r\n                then 72.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 5\r\n                and lane = 4\r\n                then 69.2\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 5\r\n                and lane = 5\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 1\r\n                then 76.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 2\r\n                then 74.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 3\r\n                then 72.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 4\r\n                then 69.2\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 5\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 6\r\n                and lane = 6\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 1\r\n                then 76.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 2\r\n                then 74.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 3\r\n                then 72.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 4\r\n                then 69.2\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 5\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 6\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 7\r\n                and lane = 7\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 1\r\n                then 76.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 2\r\n                then 74.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 3\r\n                then 72.0\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 4\r\n                then 69.2\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 5\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 6\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 7\r\n                then 64.5\r\n            when\r\n                station_type = 'ML'\r\n                and lane_number = 8\r\n                and lane = 8\r\n                then 64.5\r\n            else 64.5\r\n        end as free_flow_speed\r\n\r\n    from threshold\r\n),\r\n\r\n/* Calculate hourly based g factor, set as 22 if there is a null dataset in the mean function */\r\nhourly_g_factor as (\r\n    select\r\n        *,\r\n        coalesce(\r\n            avg(case\r\n                when occupancy_avg < occupancy_threshold\r\n                    then occupancy_avg / nullifzero(volume_sum) * free_flow_speed * {{ var(\"mph_conversion\") }}\r\n            end)\r\n                over (partition by detector_id, week_start, day, hour),\r\n            {{ var(\"vehicle_effective_length\") }})\r\n            as raw_g_factor\r\n    from free_speed\r\n),\r\n\r\n/* smoothing g factor */\r\nsmoothed_g_factor as (\r\n    select\r\n        *,\r\n        avg(raw_g_factor) over (partition by detector_id, day order by hour rows between 6 preceding and 6 following)\r\n            as g_factor\r\n    from hourly_g_factor\r\n),\r\n\r\n/* Calculate exponential filter denoted as p factor */\r\np_factor_value as (\r\n    select\r\n        *,\r\n        volume_sum / (volume_sum + {{ var(\"p_factor_smoothing_constant\") }}) as p_factor\r\n    from smoothed_g_factor\r\n),\r\n\r\n/* Calculate preliminary speed based on g factor, occupancy, and flow */\r\nspeed_preliminary_value as (\r\n    select\r\n        *,\r\n        volume_sum * g_factor / nullifzero(occupancy_avg) * (1 / {{ var(\"mph_conversion\") }}) as speed_preliminary\r\n    from p_factor_value\r\n),\r\n\r\nspeed_smoothed_value as (\r\n    select\r\n        spv.*,\r\n        res.value_smoothed as speed_smoothed\r\n    from\r\n        speed_preliminary_value as spv,\r\n        table(\r\n            {{ target.database }}.public.exponential_smooth(spv.speed_preliminary, spv.p_factor::float)\r\n                over (partition by spv.detector_id order by spv.sample_timestamp)\r\n        ) as res\r\n),\r\n\r\ng_factor_speed_smoothed as (\r\n    select\r\n        *,\r\n        case\r\n            when\r\n                lane = 1\r\n                and speed_smoothed > 86.5\r\n                then 86.5\r\n            when\r\n                lane = 2\r\n                and speed_smoothed > 84\r\n                then 84\r\n            when\r\n                lane = 3\r\n                and speed_smoothed > 82\r\n                then 82\r\n            when\r\n                lane = 4\r\n                and speed_smoothed > 79.5\r\n                then 79.5\r\n            when\r\n                lane in (5, 6, 7, 8)\r\n                and speed_smoothed > 74.5\r\n                then 74.5\r\n            when\r\n                lane in (1, 2, 3, 4, 5, 6, 7, 8)\r\n                and speed_smoothed < 3\r\n                then 3\r\n            else speed_smoothed\r\n        end as imputed_speed\r\n    from speed_smoothed_value\r\n)\r\n\r\nselect * from g_factor_speed_smoothed", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_outlier_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__detector_g_factor_based_speed.sql", "compiled": true, "compiled_code": "\n\nwith\n\ndetector_agg as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        station_id,\n        lane,\n        station_type,\n        updated_volume_sum as volume_sum,\n        updated_occupancy_avg as occupancy_avg,\n        volume_observed\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_outlier_agg_five_minutes\n    where \n    1=1\n    \n),\n\nweek_gen as (\n    select\n        *,\n        date_trunc('week', sample_date) as week_start,\n        date_trunc('hour', sample_timestamp) as hour,\n        date_trunc('day', sample_date) as day\n    from detector_agg\n),\n\n/* Generate 60-th percentile of the observed occupancies as occupancy threshold for a week dataset */\nthreshold as (\n    select\n        *,\n        percentile_cont(0.6) within group (order by occupancy_avg)\n            over (partition by detector_id, week_start)\n            as occupancy_threshold,\n\n        max(lane)\n            over (partition by station_id, station_type)\n            as lane_number\n\n    from week_gen\n),\n\n/* Generate a table of free-flow speeds that are used to calculate g factor.\n * For detailed information, please refer to https://pems.dot.ca.gov/?dnode=Help&content=help_calc#speeds\n*/\nfree_speed as (\n    select\n        *,\n        case\n            when\n                station_type = 'HV'\n                then 65\n            when\n                station_type = 'ML'\n                and lane_number = 1\n                then 65\n            when\n                station_type = 'ML'\n                and lane_number = 2\n                and lane = 1\n                then 71.2\n            when\n                station_type = 'ML'\n                and lane_number = 2\n                and lane = 2\n                then 65.1\n            when\n                station_type = 'ML'\n                and lane_number = 3\n                and lane = 1\n                then 71.9\n            when\n                station_type = 'ML'\n                and lane_number = 3\n                and lane = 2\n                then 69.7\n            when\n                station_type = 'ML'\n                and lane_number = 3\n                and lane = 3\n                then 62.7\n            when\n                station_type = 'ML'\n                and lane_number = 4\n                and lane = 1\n                then 74.8\n            when\n                station_type = 'ML'\n                and lane_number = 4\n                and lane = 2\n                then 70.9\n            when\n                station_type = 'ML'\n                and lane_number = 4\n                and lane = 3\n                then 67.4\n            when\n                station_type = 'ML'\n                and lane_number = 4\n                and lane = 4\n                then 62.8\n            when\n                station_type = 'ML'\n                and lane_number = 5\n                and lane = 1\n                then 76.5\n            when\n                station_type = 'ML'\n                and lane_number = 5\n                and lane = 2\n                then 74.0\n            when\n                station_type = 'ML'\n                and lane_number = 5\n                and lane = 3\n                then 72.0\n            when\n                station_type = 'ML'\n                and lane_number = 5\n                and lane = 4\n                then 69.2\n            when\n                station_type = 'ML'\n                and lane_number = 5\n                and lane = 5\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 1\n                then 76.5\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 2\n                then 74.0\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 3\n                then 72.0\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 4\n                then 69.2\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 5\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 6\n                and lane = 6\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 1\n                then 76.5\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 2\n                then 74.0\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 3\n                then 72.0\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 4\n                then 69.2\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 5\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 6\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 7\n                and lane = 7\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 1\n                then 76.5\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 2\n                then 74.0\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 3\n                then 72.0\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 4\n                then 69.2\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 5\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 6\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 7\n                then 64.5\n            when\n                station_type = 'ML'\n                and lane_number = 8\n                and lane = 8\n                then 64.5\n            else 64.5\n        end as free_flow_speed\n\n    from threshold\n),\n\n/* Calculate hourly based g factor, set as 22 if there is a null dataset in the mean function */\nhourly_g_factor as (\n    select\n        *,\n        coalesce(\n            avg(case\n                when occupancy_avg < occupancy_threshold\n                    then occupancy_avg / nullifzero(volume_sum) * free_flow_speed * 440\n            end)\n                over (partition by detector_id, week_start, day, hour),\n            22)\n            as raw_g_factor\n    from free_speed\n),\n\n/* smoothing g factor */\nsmoothed_g_factor as (\n    select\n        *,\n        avg(raw_g_factor) over (partition by detector_id, day order by hour rows between 6 preceding and 6 following)\n            as g_factor\n    from hourly_g_factor\n),\n\n/* Calculate exponential filter denoted as p factor */\np_factor_value as (\n    select\n        *,\n        volume_sum / (volume_sum + 50) as p_factor\n    from smoothed_g_factor\n),\n\n/* Calculate preliminary speed based on g factor, occupancy, and flow */\nspeed_preliminary_value as (\n    select\n        *,\n        volume_sum * g_factor / nullifzero(occupancy_avg) * (1 / 440) as speed_preliminary\n    from p_factor_value\n),\n\nspeed_smoothed_value as (\n    select\n        spv.*,\n        res.value_smoothed as speed_smoothed\n    from\n        speed_preliminary_value as spv,\n        table(\n            ANALYTICS_PRD.public.exponential_smooth(spv.speed_preliminary, spv.p_factor::float)\n                over (partition by spv.detector_id order by spv.sample_timestamp)\n        ) as res\n),\n\ng_factor_speed_smoothed as (\n    select\n        *,\n        case\n            when\n                lane = 1\n                and speed_smoothed > 86.5\n                then 86.5\n            when\n                lane = 2\n                and speed_smoothed > 84\n                then 84\n            when\n                lane = 3\n                and speed_smoothed > 82\n                then 82\n            when\n                lane = 4\n                and speed_smoothed > 79.5\n                then 79.5\n            when\n                lane in (5, 6, 7, 8)\n                and speed_smoothed > 74.5\n                then 74.5\n            when\n                lane in (1, 2, 3, 4, 5, 6, 7, 8)\n                and speed_smoothed < 3\n                then 3\n            else speed_smoothed\n        end as imputed_speed\n    from speed_smoothed_value\n)\n\nselect * from g_factor_speed_smoothed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes_with_missing_rows.sql", "original_file_path": "models/intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes_with_missing_rows.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "alias": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "checksum": {"name": "sha256", "checksum": "8dbebf539df29dd6b20741682135a90c1db8f393e582aa812f081bebe8253318"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp", "sample_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This model takes the `int_clearinghouse__detector_agg_five_minutes` model and fills in \"missing\"\nrows. Missing rows are added at the 5-minute timestamp level between each detector's min and max sample\ndates (from the parent model). For all resulting rows, metadata is filled in but data values (eg.\n`volume_sum`, `occupancy_avg`, etc) are set to null, to be imputed later. Column descriptions can be found\nin `int_clearinghouse__detector_agg_five_minutes`.\nThis model is unique at the level of SAMPLE_TIMESTAMP + DETECTOR_ID.\n", "columns": {"speed_weighted": {"name": "speed_weighted", "description": "If the detector reports a measured speed (miles/hour) in the lane then that value will be used.\nThe reported value is weighted by the number of vehicles in each sample period. If no speed is\nreported by the device than the speed value calculated from the\nint_clearinghouse__detector_g_factor_based_speed model will be placed in the corresponding\ndetector and timestamp row. If there is no device or g-factor provided speed the value will remain\nnull and be populated using imputation in downstream models.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The unique detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "The lane number of the detector, starting from 1.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "For the 5-minute aggregation there should be 10 30-second samples collected. If 10 or more\nsamples are collected the aggregated (sum) volume rounded to the nearest integer value is used\nbut if less than 10 samples are recieved in the 5-minute timeframe the flow is normalized using\nthe equation: 10 / sample count * sum(volume).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_OBSERVED": {"name": "VOLUME_OBSERVED", "description": "Number of vehicles that passed over the detector during the sample period for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ZERO_VOL_CT": {"name": "ZERO_VOL_CT", "description": "Counts the number of raw data samples where a lane's volume (flow) value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ZERO_OCC_CT": {"name": "ZERO_OCC_CT", "description": "Counts the number of raw data samples where a lane's occupancy value equals 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ZERO_VOL_POS_OCC_CT": {"name": "ZERO_VOL_POS_OCC_CT", "description": "Counts the number of raw data samples where a lane's volume\n(flow) value equals 0 but occupancy is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ZERO_OCC_POS_VOL_CT": {"name": "ZERO_OCC_POS_VOL_CT", "description": "Counts the number of raw data samples where a lane's occupancy value\nequals 0 but volume (flow) is greater than 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HIGH_VOLUME_CT": {"name": "HIGH_VOLUME_CT", "description": "Counts the number of volume (flow) values in a lane that exceeded the high\nvalue threshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "HIGH_OCCUPANCY_CT": {"name": "HIGH_OCCUPANCY_CT", "description": "Counts the number of occupancy values in a lane that exceeded the high value\nthreshold detector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_POSTMILE": {"name": "STATE_POSTMILE", "description": "State Postmile value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length associated with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PHYSICAL_LANES": {"name": "PHYSICAL_LANES", "description": "Total number of lanes for a specific VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_FROM": {"name": "STATION_VALID_FROM", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`STATION_VALID_FROM <= date < STATION_VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_TO": {"name": "STATION_VALID_TO", "description": "The date that this metadata became *invalid*.\nFinding the right metadata for a date should involve a check with\n`STATION_VALID_FROM <= date < STATION_VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "clearinghouse", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.172389, "relation_name": "ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    cluster_by=[\"sample_date\"],\n    unique_key=[\"detector_id\", \"sample_timestamp\",\"sample_date\"],\n    on_schema_change=\"append_new_columns\",\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XL\", big=\"XL\")\n) }}\n\nwith timestamp_spine as (\n    {{ timestamp_spine(start_date=var(\"pems_clearinghouse_start_date\"),\n        end_date=\"current_date()\",\n        second_increment=60*5\n    ) }}\n),\n\ndetector_agg as (\n    select * from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\n    -- This clause isn't strictly necessary but helps with performance on incremental builds\n    where {{ make_model_incremental('sample_date') }}\n),\n\ndetector_meta as (\n    select * from {{ ref('int_vds__detector_config') }}\n),\n\n/* Get date range where a detector is expected to be collecting data. */\ndetector_date_range as (\n    select\n        detector_id,\n        active_date as sample_date\n    from {{ ref('int_vds__active_detectors') }}\n    where {{ make_model_incremental('sample_date') }}\n),\n\n/* Expand timestamp spine to include values per detector but only for days within the detector's date range */\nspine as (\n    select\n        ts.timestamp_column,\n        dd.detector_id\n    from timestamp_spine as ts inner join detector_date_range as dd\n        on to_date(ts.timestamp_column) = dd.sample_date\n),\n\n-- Add the model where gfactor speed has been calculated\ngfactor_speed as (\n    select\n        detector_id,\n        sample_timestamp,\n        imputed_speed\n    from {{ ref('int_clearinghouse__detector_g_factor_based_speed') }}\n),\n\n/* Join 5-minute aggregated data to the spine to get a table without missing rows */\nbase as (\n    select\n        spine.detector_id,\n        coalesce(agg.sample_date, to_date(spine.timestamp_column)) as sample_date,\n        coalesce(agg.sample_timestamp, spine.timestamp_column) as sample_timestamp,\n        coalesce(agg.station_id, dmeta.station_id) as station_id,\n        coalesce(agg.district, dmeta.district) as district,\n        agg.sample_ct,\n        coalesce(agg.lane, dmeta.lane) as lane,\n        agg.volume_sum,\n        agg.zero_vol_ct,\n        agg.occupancy_avg,\n        agg.zero_occ_ct,\n        agg.zero_vol_pos_occ_ct,\n        agg.zero_occ_pos_vol_ct,\n        agg.high_volume_ct,\n        agg.high_occupancy_ct,\n        coalesce(agg.speed_weighted, gs.imputed_speed) as speed_weighted,\n        agg.volume_observed,\n        coalesce(agg.state_postmile, dmeta.state_postmile) as state_postmile,\n        coalesce(agg.absolute_postmile, dmeta.absolute_postmile) as absolute_postmile,\n        coalesce(agg.latitude, dmeta.latitude) as latitude,\n        coalesce(agg.longitude, dmeta.longitude) as longitude,\n        coalesce(agg.physical_lanes, dmeta.physical_lanes) as physical_lanes,\n        coalesce(agg.station_type, dmeta.station_type) as station_type,\n        coalesce(agg.county, dmeta.county) as county,\n        coalesce(agg.city, dmeta.city) as city,\n        coalesce(agg.freeway, dmeta.freeway) as freeway,\n        coalesce(agg.direction, dmeta.direction) as direction,\n        coalesce(agg.length, dmeta.length) as length,\n        coalesce(agg.station_valid_from, dmeta._valid_from) as station_valid_from,\n        coalesce(agg.station_valid_to, dmeta._valid_to) as station_valid_to\n    from spine\n    left join detector_agg as agg\n        on spine.timestamp_column = agg.sample_timestamp and spine.detector_id = agg.detector_id\n\n    -- The previously \"missing\" rows will need metadata filled in\n    left join detector_meta as dmeta\n        on\n            agg.sample_ct is null -- this filters for missing rows since it is a computed value in upstream models\n            and spine.detector_id = dmeta.detector_id\n            and to_date(spine.timestamp_column) >= dmeta._valid_from\n            and (\n                to_date(spine.timestamp_column) < dmeta._valid_to\n                or dmeta._valid_to is null\n            )\n    left join gfactor_speed as gs\n        on\n            agg.detector_id = gs.detector_id\n            and agg.sample_timestamp = gs.sample_timestamp\n)\n\nselect * from base", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}, {"name": "int_vds__detector_config", "package": null, "version": null}, {"name": "int_vds__active_detectors", "package": null, "version": null}, {"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.timestamp_spine", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/int_clearinghouse__detector_agg_five_minutes_with_missing_rows.sql", "compiled": true, "compiled_code": "\n\nwith timestamp_spine as (\n    \n\n  \n  \n\n  with date_spine as (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 961\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2023-01-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date()\n\n)\n\nselect * from filtered\n\n\n  ),\n\n  series as (\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 288.0\n    order by generated_number\n\n\n  )\n\n  select DATEADD(s, (generated_number - 1) * 300, date_day) as timestamp_column\n  from date_spine\n  cross join series\n\n\n),\n\ndetector_agg as (\n    select * from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    -- This clause isn't strictly necessary but helps with performance on incremental builds\n    where \n    1=1\n    \n),\n\ndetector_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\n/* Get date range where a detector is expected to be collecting data. */\ndetector_date_range as (\n    select\n        detector_id,\n        active_date as sample_date\n    from ANALYTICS_PRD.vds.int_vds__active_detectors\n    where \n    1=1\n    \n),\n\n/* Expand timestamp spine to include values per detector but only for days within the detector's date range */\nspine as (\n    select\n        ts.timestamp_column,\n        dd.detector_id\n    from timestamp_spine as ts inner join detector_date_range as dd\n        on to_date(ts.timestamp_column) = dd.sample_date\n),\n\n-- Add the model where gfactor speed has been calculated\ngfactor_speed as (\n    select\n        detector_id,\n        sample_timestamp,\n        imputed_speed\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\n),\n\n/* Join 5-minute aggregated data to the spine to get a table without missing rows */\nbase as (\n    select\n        spine.detector_id,\n        coalesce(agg.sample_date, to_date(spine.timestamp_column)) as sample_date,\n        coalesce(agg.sample_timestamp, spine.timestamp_column) as sample_timestamp,\n        coalesce(agg.station_id, dmeta.station_id) as station_id,\n        coalesce(agg.district, dmeta.district) as district,\n        agg.sample_ct,\n        coalesce(agg.lane, dmeta.lane) as lane,\n        agg.volume_sum,\n        agg.zero_vol_ct,\n        agg.occupancy_avg,\n        agg.zero_occ_ct,\n        agg.zero_vol_pos_occ_ct,\n        agg.zero_occ_pos_vol_ct,\n        agg.high_volume_ct,\n        agg.high_occupancy_ct,\n        coalesce(agg.speed_weighted, gs.imputed_speed) as speed_weighted,\n        agg.volume_observed,\n        coalesce(agg.state_postmile, dmeta.state_postmile) as state_postmile,\n        coalesce(agg.absolute_postmile, dmeta.absolute_postmile) as absolute_postmile,\n        coalesce(agg.latitude, dmeta.latitude) as latitude,\n        coalesce(agg.longitude, dmeta.longitude) as longitude,\n        coalesce(agg.physical_lanes, dmeta.physical_lanes) as physical_lanes,\n        coalesce(agg.station_type, dmeta.station_type) as station_type,\n        coalesce(agg.county, dmeta.county) as county,\n        coalesce(agg.city, dmeta.city) as city,\n        coalesce(agg.freeway, dmeta.freeway) as freeway,\n        coalesce(agg.direction, dmeta.direction) as direction,\n        coalesce(agg.length, dmeta.length) as length,\n        coalesce(agg.station_valid_from, dmeta._valid_from) as station_valid_from,\n        coalesce(agg.station_valid_to, dmeta._valid_to) as station_valid_to\n    from spine\n    left join detector_agg as agg\n        on spine.timestamp_column = agg.sample_timestamp and spine.detector_id = agg.detector_id\n\n    -- The previously \"missing\" rows will need metadata filled in\n    left join detector_meta as dmeta\n        on\n            agg.sample_ct is null -- this filters for missing rows since it is a computed value in upstream models\n            and spine.detector_id = dmeta.detector_id\n            and to_date(spine.timestamp_column) >= dmeta._valid_from\n            and (\n                to_date(spine.timestamp_column) < dmeta._valid_to\n                or dmeta._valid_to is null\n            )\n    left join gfactor_speed as gs\n        on\n            agg.detector_id = gs.detector_id\n            and agg.sample_timestamp = gs.sample_timestamp\n)\n\nselect * from base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "int_imputation__detector_imputed_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/imputation/int_imputation__detector_imputed_agg_five_minutes.sql", "original_file_path": "models/intermediate/imputation/int_imputation__detector_imputed_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "int_imputation__detector_imputed_agg_five_minutes"], "alias": "int_imputation__detector_imputed_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "ecf1f338458708dd23a2d5bbd56cb743e8854f49712d874c8e6024143d43dc57"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp", "sample_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "This model compares the imputed values (speed, volume and occupancy) obtained\nfrom three different methods (local, regional and global) for bad detectors and\nchooses the imputed based on the following priorities 'observe', 'local', 'regional'\nand 'global' respectively. The model reports the observed values for all good detetcors.\nThis model should be unique at the level of SAMPLE_TIMESTAMP + DETECTOR_ID.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "The lane number of the detector, starting from 1.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_IS_GOOD": {"name": "DETECTOR_IS_GOOD", "description": "Status of the detector based detector's diagonostics.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "observed or imputed flow values for a detector over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_FIVE_MINS": {"name": "SPEED_FIVE_MINS", "description": "Flow-weighted observed or imputed speed for five minutes time period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_IMPUTATION_METHOD": {"name": "SPEED_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the speed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_IMPUTATION_METHOD": {"name": "VOLUME_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_IMPUTATION_METHOD": {"name": "OCCUPANCY_IMPUTATION_METHOD", "description": "The method (local/regional/global) used to impute the occupancy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGRESSION_DATE": {"name": "REGRESSION_DATE", "description": "The date on which the coefficients in the regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The county in which the detector is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city in which the detector is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "The number of samples taken for the detector in the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_FROM": {"name": "STATION_VALID_FROM", "description": "The date from which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_TO": {"name": "STATION_VALID_TO", "description": "The date until which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "imputation", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL')), Keyword(key='small', value=Const(value='XS'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2788296, "relation_name": "ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes", "raw_code": "{{ config(\r\n        materialized='incremental',\r\n        on_schema_change=\"append_new_columns\",\r\n        cluster_by=[\"sample_date\"],\r\n        unique_key=[\"detector_id\", \"sample_timestamp\", \"sample_date\"],\r\n        snowflake_warehouse = get_snowflake_refresh_warehouse(big=\"XL\", small=\"XS\"),\r\n    )\r\n}}\r\n\r\n-- read observed and imputed five minutes data\r\nwith obs_imputed_five_minutes_agg as (\r\n    select *\r\n    from {{ ref('int_imputation__detector_agg_five_minutes') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n-- now select the final speed, volume and occupancy\r\n-- tag if it is observed or imputed\r\nhybrid_five_mins_agg as (\r\n    select\r\n        station_id,\r\n        detector_id,\r\n        station_type,\r\n        lane,\r\n        direction,\r\n        county,\r\n        city,\r\n        district,\r\n        freeway,\r\n        length,\r\n        detector_is_good,\r\n        sample_date,\r\n        sample_timestamp,\r\n        absolute_postmile,\r\n        sample_ct,\r\n        station_valid_from,\r\n        station_valid_to,\r\n        -- select the imputed value\r\n        case\r\n            when detector_is_good = false or volume_sum is null\r\n                then\r\n                    coalesce(\r\n                        volume_local_regression,\r\n                        volume_regional_regression,\r\n                        volume_global_regression,\r\n                        volume_local_avg,\r\n                        volume_regional_avg\r\n                    )\r\n            else volume_sum\r\n        end as volume_sum,\r\n        case\r\n            when detector_is_good = false or speed_five_mins is null\r\n                then\r\n                    coalesce(\r\n                        speed_local_regression,\r\n                        speed_regional_regression,\r\n                        speed_global_regression,\r\n                        speed_local_avg,\r\n                        speed_regional_avg\r\n                    )\r\n            else speed_five_mins\r\n        end as speed_five_mins,\r\n        case\r\n            when detector_is_good = false or occupancy_avg is null\r\n                then\r\n                    coalesce(\r\n                        occupancy_local_regression,\r\n                        occupancy_regional_regression,\r\n                        occupancy_global_regression,\r\n                        occupancy_local_avg,\r\n                        occupancy_regional_avg\r\n                    )\r\n            else occupancy_avg\r\n        end as occupancy_avg,\r\n        -- assign the imputation date\r\n        case\r\n            when\r\n                detector_is_good = false\r\n                or volume_sum is null\r\n                or occupancy_avg is null\r\n                or speed_five_mins is null\r\n                then\r\n                    coalesce(local_regression_date, regional_regression_date, global_regression_date)\r\n            else sample_date\r\n        end as regression_date,\r\n\r\n        -- assign the imputation method\r\n        case\r\n            when\r\n                (detector_is_good = false or volume_sum is null) and volume_local_regression is not null\r\n                then 'local'\r\n            when\r\n                (detector_is_good = false or volume_sum is null) and volume_regional_regression is not null\r\n                then 'regional'\r\n            when\r\n                (detector_is_good = false or volume_sum is null) and volume_global_regression is not null\r\n                then 'global'\r\n            when\r\n                (detector_is_good = false or volume_sum is null) and volume_local_avg is not null\r\n                then 'local_avg'\r\n            when\r\n                (detector_is_good = false or volume_sum is null) and volume_regional_avg is not null\r\n                then 'regional_avg'\r\n            when\r\n                (detector_is_good = false or volume_sum is null)\r\n                and volume_local_regression is null\r\n                and volume_regional_regression is null\r\n                and volume_global_regression is null\r\n                and volume_local_avg is null\r\n                and volume_regional_avg is null\r\n                then 'observed_unimputed'\r\n            else 'observed'\r\n        end as volume_imputation_method,\r\n        case\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null) and speed_local_regression is not null\r\n                then 'local'\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null) and speed_regional_regression is not null\r\n                then 'regional'\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null) and speed_global_regression is not null\r\n                then 'global'\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null) and speed_local_avg is not null\r\n                then 'local_avg'\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null) and speed_regional_avg is not null\r\n                then 'regional_avg'\r\n            when\r\n                (detector_is_good = false or speed_five_mins is null)\r\n                and speed_local_regression is null\r\n                and speed_regional_regression is null\r\n                and speed_global_regression is null\r\n                and speed_local_avg is null\r\n                and speed_regional_avg is null\r\n                then 'observed_unimputed'\r\n            else 'observed'\r\n        end as speed_imputation_method,\r\n        case\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null) and occupancy_local_regression is not null\r\n                then 'local'\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null) and occupancy_regional_regression is not null\r\n                then 'regional'\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null) and occupancy_global_regression is not null\r\n                then 'global'\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null) and occupancy_local_avg is not null\r\n                then 'local_avg'\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null) and occupancy_regional_avg is not null\r\n                then 'regional_avg'\r\n            when\r\n                (detector_is_good = false or occupancy_avg is null)\r\n                and occupancy_local_regression is null\r\n                and occupancy_regional_regression is null\r\n                and occupancy_global_regression is null\r\n                and occupancy_local_avg is null\r\n                and occupancy_regional_avg is null\r\n                then 'observed_unimputed'\r\n            else 'observed'\r\n        end as occupancy_imputation_method\r\n    from obs_imputed_five_minutes_agg\r\n)\r\n\r\n-- select the final observed and imputed five mins agg table\r\nselect * from hybrid_five_mins_agg", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/int_imputation__detector_imputed_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n-- read observed and imputed five minutes data\nwith obs_imputed_five_minutes_agg as (\n    select *\n    from ANALYTICS_PRD.imputation.int_imputation__detector_agg_five_minutes\n    where \n    1=1\n    \n),\n\n-- now select the final speed, volume and occupancy\n-- tag if it is observed or imputed\nhybrid_five_mins_agg as (\n    select\n        station_id,\n        detector_id,\n        station_type,\n        lane,\n        direction,\n        county,\n        city,\n        district,\n        freeway,\n        length,\n        detector_is_good,\n        sample_date,\n        sample_timestamp,\n        absolute_postmile,\n        sample_ct,\n        station_valid_from,\n        station_valid_to,\n        -- select the imputed value\n        case\n            when detector_is_good = false or volume_sum is null\n                then\n                    coalesce(\n                        volume_local_regression,\n                        volume_regional_regression,\n                        volume_global_regression,\n                        volume_local_avg,\n                        volume_regional_avg\n                    )\n            else volume_sum\n        end as volume_sum,\n        case\n            when detector_is_good = false or speed_five_mins is null\n                then\n                    coalesce(\n                        speed_local_regression,\n                        speed_regional_regression,\n                        speed_global_regression,\n                        speed_local_avg,\n                        speed_regional_avg\n                    )\n            else speed_five_mins\n        end as speed_five_mins,\n        case\n            when detector_is_good = false or occupancy_avg is null\n                then\n                    coalesce(\n                        occupancy_local_regression,\n                        occupancy_regional_regression,\n                        occupancy_global_regression,\n                        occupancy_local_avg,\n                        occupancy_regional_avg\n                    )\n            else occupancy_avg\n        end as occupancy_avg,\n        -- assign the imputation date\n        case\n            when\n                detector_is_good = false\n                or volume_sum is null\n                or occupancy_avg is null\n                or speed_five_mins is null\n                then\n                    coalesce(local_regression_date, regional_regression_date, global_regression_date)\n            else sample_date\n        end as regression_date,\n\n        -- assign the imputation method\n        case\n            when\n                (detector_is_good = false or volume_sum is null) and volume_local_regression is not null\n                then 'local'\n            when\n                (detector_is_good = false or volume_sum is null) and volume_regional_regression is not null\n                then 'regional'\n            when\n                (detector_is_good = false or volume_sum is null) and volume_global_regression is not null\n                then 'global'\n            when\n                (detector_is_good = false or volume_sum is null) and volume_local_avg is not null\n                then 'local_avg'\n            when\n                (detector_is_good = false or volume_sum is null) and volume_regional_avg is not null\n                then 'regional_avg'\n            when\n                (detector_is_good = false or volume_sum is null)\n                and volume_local_regression is null\n                and volume_regional_regression is null\n                and volume_global_regression is null\n                and volume_local_avg is null\n                and volume_regional_avg is null\n                then 'observed_unimputed'\n            else 'observed'\n        end as volume_imputation_method,\n        case\n            when\n                (detector_is_good = false or speed_five_mins is null) and speed_local_regression is not null\n                then 'local'\n            when\n                (detector_is_good = false or speed_five_mins is null) and speed_regional_regression is not null\n                then 'regional'\n            when\n                (detector_is_good = false or speed_five_mins is null) and speed_global_regression is not null\n                then 'global'\n            when\n                (detector_is_good = false or speed_five_mins is null) and speed_local_avg is not null\n                then 'local_avg'\n            when\n                (detector_is_good = false or speed_five_mins is null) and speed_regional_avg is not null\n                then 'regional_avg'\n            when\n                (detector_is_good = false or speed_five_mins is null)\n                and speed_local_regression is null\n                and speed_regional_regression is null\n                and speed_global_regression is null\n                and speed_local_avg is null\n                and speed_regional_avg is null\n                then 'observed_unimputed'\n            else 'observed'\n        end as speed_imputation_method,\n        case\n            when\n                (detector_is_good = false or occupancy_avg is null) and occupancy_local_regression is not null\n                then 'local'\n            when\n                (detector_is_good = false or occupancy_avg is null) and occupancy_regional_regression is not null\n                then 'regional'\n            when\n                (detector_is_good = false or occupancy_avg is null) and occupancy_global_regression is not null\n                then 'global'\n            when\n                (detector_is_good = false or occupancy_avg is null) and occupancy_local_avg is not null\n                then 'local_avg'\n            when\n                (detector_is_good = false or occupancy_avg is null) and occupancy_regional_avg is not null\n                then 'regional_avg'\n            when\n                (detector_is_good = false or occupancy_avg is null)\n                and occupancy_local_regression is null\n                and occupancy_regional_regression is null\n                and occupancy_global_regression is null\n                and occupancy_local_avg is null\n                and occupancy_regional_avg is null\n                then 'observed_unimputed'\n            else 'observed'\n        end as occupancy_imputation_method\n    from obs_imputed_five_minutes_agg\n)\n\n-- select the final observed and imputed five mins agg table\nselect * from hybrid_five_mins_agg", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "int_imputation__detector_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/imputation/int_imputation__detector_agg_five_minutes.sql", "original_file_path": "models/intermediate/imputation/int_imputation__detector_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "int_imputation__detector_agg_five_minutes"], "alias": "int_imputation__detector_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "e6ced552fe54bcc78a5e8f02d386bef54a3721a471cdb27e3f8b8cf12e1cb152"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_timestamp", "sample_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "This model presents the imputed values (speed, volume and occupancy)\nfrom all three (local, regional and global) imputation methods. We impute\nonly for bad detectors while observed value is reported for the good\ndetectors. This model should be unique at the level of\nSAMPLE_TIMESTAMP + DETECTOR_ID.\n", "columns": {"STATION_ID": {"name": "STATION_ID", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE": {"name": "LANE", "description": "The lane number of the detector, starting from 1.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_IS_GOOD": {"name": "DETECTOR_IS_GOOD", "description": "Status of the detector based detector's diagonostics.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SUM": {"name": "VOLUME_SUM", "description": "The sum of the flow values for a detector over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_AVG": {"name": "OCCUPANCY_AVG", "description": "The average of the occupancy values over the sample period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_WEIGHTED": {"name": "SPEED_WEIGHTED", "description": "Flow-weighted speed reported by the device.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_FIVE_MINS": {"name": "SPEED_FIVE_MINS", "description": "Flow-weighted observed or imputed speed for five minutes time period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_LOCAL_REGRESSION": {"name": "VOLUME_LOCAL_REGRESSION", "description": "The volume based on local regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_LOCAL_REGRESSION": {"name": "OCCUPANCY_LOCAL_REGRESSION", "description": "The occupancy based on local regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_LOCAL_REGRESSION": {"name": "SPEED_LOCAL_REGRESSION", "description": "The speed based on local regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_REGIONAL_REGRESSION": {"name": "VOLUME_REGIONAL_REGRESSION", "description": "The volume based on regional regressions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_REGIONAL_REGRESSION": {"name": "OCCUPANCY_REGIONAL_REGRESSION", "description": "The occupancy based on regional regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_REGIONAL_REGRESSION": {"name": "SPEED_REGIONAL_REGRESSION", "description": "The speed based on regional regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_GLOBAL_REGRESSION": {"name": "VOLUME_GLOBAL_REGRESSION", "description": "The volume based on global regressions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_GLOBAL_REGRESSION": {"name": "OCCUPANCY_GLOBAL_REGRESSION", "description": "The occupancy based on global regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_GLOBAL_REGRESSION": {"name": "SPEED_GLOBAL_REGRESSION", "description": "The speed based on global regressions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_LOCAL_AVG": {"name": "VOLUME_LOCAL_AVG", "description": "The average volume from local detectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_REGIONAL_AVG": {"name": "VOLUME_REGIONAL_AVG", "description": "The average volume from regional detectors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_LOCAL_AVG": {"name": "SPEED_LOCAL_AVG", "description": "The average speed from local detectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_REGIONAL_AVG": {"name": "SPEED_REGIONAL_AVG", "description": "The average speed from regional detectors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_LOCAL_AVG": {"name": "OCCUPANCY_LOCAL_AVG", "description": "The average occupancy from local detectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_REGIONAL_AVG": {"name": "OCCUPANCY_REGIONAL_AVG", "description": "The average occupancy from regional detectors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LOCAL_REGRESSION_DATE": {"name": "LOCAL_REGRESSION_DATE", "description": "The date on which the coefficients in the local regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGIONAL_REGRESSION_DATE": {"name": "REGIONAL_REGRESSION_DATE", "description": "The date on which the coefficients in the regional regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GLOBAL_REGRESSION_DATE": {"name": "GLOBAL_REGRESSION_DATE", "description": "The date on which the coefficients in the global regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The county in which the detector is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city in which the detector is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_CT": {"name": "SAMPLE_CT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_FROM": {"name": "STATION_VALID_FROM", "description": "The date from which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_VALID_TO": {"name": "STATION_VALID_TO", "description": "The date until which the station is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a particular state route where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "imputation", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL')), Keyword(key='small', value=Const(value='XS'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.277325, "relation_name": "ANALYTICS_PRD.imputation.int_imputation__detector_agg_five_minutes", "raw_code": "{{ config(\n        materialized='incremental',\n        on_schema_change=\"append_new_columns\",\n        cluster_by=[\"sample_date\"],\n        unique_key=[\"detector_id\", \"sample_timestamp\", \"sample_date\"],\n        snowflake_warehouse = get_snowflake_refresh_warehouse(big=\"XL\", small=\"XS\"),\n    )\n}}\n\n/* Unimputed data aggregated to five minutes\" */\nwith base as (\n    select\n        station_id,\n        detector_id,\n        lane,\n        district,\n        sample_date,\n        sample_timestamp,\n        volume_sum,\n        occupancy_avg,\n        freeway,\n        direction,\n        county,\n        city,\n        length,\n        station_type,\n        absolute_postmile,\n        sample_ct,\n        station_valid_from,\n        station_valid_to,\n        case\n            when volume_sum = 0 and occupancy_avg = 0 then 0\n            else speed_weighted\n        end as speed_weighted\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows') }}\n    where {{ make_model_incremental('sample_date') }}\n),\n\n/* Get all detectors that are \"real\" in that they represent lanes that exist\n   (rather than lane 8 in a two lane road) with a status of \"Good\" */\ngood_detectors as (\n    select * from {{ ref('int_diagnostics__detector_status') }}\n    where status = 'Good'\n),\n\nnearby_stations as (\n    select * from {{ ref(\"int_vds__nearby_stations\") }}\n),\n\n/* Local/regional regression coefficients. These are pairwise betweens detectors\n   that are near to each other. If they are within five miles, they are considered\n   \"regional\". If they are in the same station or the immediate upstream/downstream\n   station they are considered \"local\" */\nlocal_regional_coeffs as (\n    select * from {{ ref('int_imputation__local_regional_regression_coefficients') }}\n),\n\n/* Global regression coefficients. These are per-detector, and regress the detector's\n   values with the freeway-direction-type-district average for those values at the same\n   timestamp. */\nglobal_coeffs as (\n    select * from {{ ref('int_imputation__global_coefficients') }}\n),\n\n/* Join unimputed data with the \"good detectors\" model to flag whether we consider a\ndetector to be operating correctly for a given day. */\nunimputed as (\n    select\n        base.station_id,\n        base.detector_id,\n        base.lane,\n        base.district,\n        base.sample_date,\n        base.sample_timestamp,\n        base.volume_sum,\n        base.occupancy_avg,\n        base.speed_weighted,\n        base.freeway,\n        base.direction,\n        base.county,\n        base.city,\n        base.length,\n        base.station_type,\n        base.absolute_postmile,\n        base.sample_ct,\n        base.station_valid_from,\n        base.station_valid_to,\n        -- If the detector_id in the join is not null, it means that the detector\n        -- is considered to be \"good\" for a given date.\n        (good_detectors.detector_id is not null) as detector_is_good,\n        base.speed_weighted as speed_five_mins\n    from base\n    left join good_detectors\n        on\n            base.detector_id = good_detectors.detector_id\n            and base.sample_date = good_detectors.sample_date\n    where base.station_type in ('ML', 'HV') -- TODO: make a variable for \"travel station types\"\n),\n\n/* Split the unimputed data into two sets, one requiring imputation\n  (it's status is not \"Good\") and one not requiring imputation (it's status is\n  \"Good\") */\nsamples_requiring_imputation as (\n    select\n        station_id,\n        detector_id,\n        district,\n        sample_date,\n        sample_timestamp,\n        freeway,\n        direction,\n        station_type,\n        volume_sum,\n        occupancy_avg,\n        speed_five_mins\n    from unimputed\n    where not detector_is_good\n    -- there can still be gaps in detectors that are \"Good\",\n    -- so we try to impute for those as well.\n    or volume_sum is null\n    or occupancy_avg is null\n    or speed_five_mins is null\n),\n\nsamples_not_requiring_imputation as (\n    select\n        station_id,\n        detector_id,\n        district,\n        sample_date,\n        sample_timestamp,\n        freeway,\n        direction,\n        station_type,\n        volume_sum,\n        occupancy_avg,\n        speed_five_mins\n    from unimputed\n    where\n        detector_is_good\n        and volume_sum is not null\n        and occupancy_avg is not null\n        and speed_five_mins is not null\n),\n\n/** LOCAL/REGIONAL Regression follows **/\n\n/* Join the samples requiring imputation with all neighboring stations\n   not requiring imputation. These neighbors will be considered candidates\n   for helping to impute missing data. */\nsamples_requiring_imputation_with_local_regional_neighbors as (\n    select\n        imp.*,\n        non_imp.station_id as other_station_id,\n        non_imp.detector_id as other_detector_id,\n        non_imp.occupancy_avg as occupancy_avg_nbr,\n        non_imp.volume_sum as volume_sum_nbr,\n        non_imp.speed_five_mins as speed_five_mins_nbr,\n        nearby_stations.other_station_is_local\n    from samples_requiring_imputation as imp\n    inner join nearby_stations\n        on\n            imp.station_id = nearby_stations.station_id\n            and imp.sample_date >= nearby_stations._valid_from\n            and (imp.sample_date < nearby_stations._valid_to or nearby_stations._valid_to is null)\n    inner join samples_not_requiring_imputation as non_imp\n        on\n            nearby_stations.other_station_id = non_imp.station_id\n            and (imp.detector_id != non_imp.detector_id)\n            and imp.sample_date = non_imp.sample_date\n            and imp.sample_timestamp = non_imp.sample_timestamp\n),\n\n/* Join the samples requiring imputation with the local and regional\n   coefficients. This will both give us the coefficients needed for\n   regressing, as well as give us the ID/Lane of the other station\n   that we'll be regressing against. This makes the number of rows\n   increase significantly, as we get pairwise coefficients for a\n   detector and all of its regional neighbors! */\nsamples_requiring_imputation_with_local_regional_coeffs as (\n    select\n        samples.*,\n        local_regional_coeffs.speed_slope,\n        local_regional_coeffs.speed_intercept,\n        local_regional_coeffs.volume_slope,\n        local_regional_coeffs.volume_intercept,\n        local_regional_coeffs.occupancy_slope,\n        local_regional_coeffs.occupancy_intercept,\n        local_regional_coeffs.regression_date\n    from samples_requiring_imputation_with_local_regional_neighbors as samples\n    asof join local_regional_coeffs\n        match_condition(samples.sample_date >= local_regional_coeffs.regression_date)\n        on\n            samples.detector_id = local_regional_coeffs.detector_id\n            and samples.district = local_regional_coeffs.district\n),\n\n/* Actually do the local and regional imputation! We compute it for all\n   the neighboring detectors, then aggregate up to the median of the imputed\n   values, and finally clamp them to physical numbers (like greater than 0). */\nlocal_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(median(volume_slope * volume_sum_nbr + volume_intercept), 0) as volume_local_regression,\n        -- Occupancy calculation\n        least(greatest(median(occupancy_slope * occupancy_avg_nbr + occupancy_intercept), 0), 1)\n            as occupancy_local_regression,\n        -- Speed calculation\n        greatest(median(speed_slope * speed_five_mins_nbr + speed_intercept), 0) as speed_local_regression,\n        avg(volume_sum_nbr) as volume_local_avg,\n        avg(occupancy_avg_nbr) as occupancy_local_avg,\n        sum(volume_sum_nbr * speed_five_mins_nbr) / nullifzero(sum(volume_sum_nbr)) as speed_local_avg,\n        any_value(regression_date) as regression_date\n    from\n        samples_requiring_imputation_with_local_regional_coeffs\n    where other_station_is_local = true\n    group by detector_id, sample_date, sample_timestamp\n),\n\nregional_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(median(volume_slope * volume_sum_nbr + volume_intercept), 0) as volume_regional_regression,\n        -- Occupancy calculation\n        least(greatest(median(occupancy_slope * occupancy_avg_nbr + occupancy_intercept), 0), 1)\n            as occupancy_regional_regression,\n        -- Speed calculation\n        greatest(median(speed_slope * speed_five_mins_nbr + speed_intercept), 0) as speed_regional_regression,\n        avg(volume_sum_nbr) as volume_regional_avg,\n        avg(occupancy_avg_nbr) as occupancy_regional_avg,\n        sum(volume_sum_nbr * speed_five_mins_nbr) / nullifzero(sum(volume_sum_nbr)) as speed_regional_avg,\n        any_value(regression_date) as regression_date\n    from\n        samples_requiring_imputation_with_local_regional_coeffs\n    group by detector_id, sample_date, sample_timestamp\n),\n\n/** Global regression follows! **/\n\n/* Join the samples requiring imputation with the global\n   coefficients. */\nsamples_requiring_imputation_with_global_coeffs as (\n    select\n        samples_requiring_imputation.*,\n        global_coeffs.speed_slope,\n        global_coeffs.speed_intercept,\n        global_coeffs.volume_slope,\n        global_coeffs.volume_intercept,\n        global_coeffs.occupancy_slope,\n        global_coeffs.occupancy_intercept,\n        global_coeffs.regression_date\n    from samples_requiring_imputation\n    asof join global_coeffs\n        match_condition(samples_requiring_imputation.sample_date >= global_coeffs.regression_date)\n        on\n            samples_requiring_imputation.detector_id = global_coeffs.detector_id\n            and samples_requiring_imputation.district = global_coeffs.district\n),\n\n/* Aggregate the samples not requiring imputation up to the freeway/district/station-type\n   level. This creates the value against which we will be aggregating for each timestamp.\n   It's important that this aggregation look idential to that in\n   int_imputation__global_coefficients, otherwise the regression will be wrong. */\nfreeway_district_agg as (\n    select\n        sample_date,\n        sample_timestamp,\n        district,\n        freeway,\n        direction,\n        station_type,\n        /* Note: since this is an aggregate *across* stations rather than\n        within a single station, it is more appropriate to average the sum\n        rather than sum it. In any event, these averages are intended to be\n        used for computing regression coefficients, so this just makes the\n        regression coefficient the same up to a constant factor*/\n        avg(volume_sum) as volume_sum,\n        avg(occupancy_avg) as occupancy_avg,\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as speed_five_mins\n    from samples_not_requiring_imputation\n    group by sample_date, sample_timestamp, district, freeway, direction, station_type\n),\n\n/* Join the averages in with the samples requiring imputation. */\nsamples_requiring_imputation_with_global as (\n    select\n        imp.*,\n        non_imp.speed_five_mins as speed_five_mins_global,\n        non_imp.volume_sum as volume_sum_global,\n        non_imp.occupancy_avg as occupancy_avg_global\n    from samples_requiring_imputation_with_global_coeffs as imp\n    inner join freeway_district_agg as non_imp\n        on\n            imp.freeway = non_imp.freeway\n            and imp.direction = non_imp.direction\n            and imp.station_type = non_imp.station_type\n            and imp.district = non_imp.district\n            and imp.sample_date = non_imp.sample_date\n            and imp.sample_timestamp = non_imp.sample_timestamp\n),\n\n/* Finally, do the global imputation! */\nglobal_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(volume_slope * volume_sum_global + volume_intercept, 0) as volume_global_regression,\n        -- Occupancy calculation\n        least(greatest(occupancy_slope * occupancy_avg_global + occupancy_intercept, 0), 1)\n            as occupancy_global_regression,\n        -- Speed calculation\n        greatest(speed_slope * speed_five_mins_global + speed_intercept, 0) as speed_global_regression,\n        regression_date\n    from\n        samples_requiring_imputation_with_global\n),\n\n/** Put the local, regional, and global datasets all together **/\nagg_with_local_regional_global_imputation as (\n    select\n        unimputed.*,\n        local_imputed.regression_date as local_regression_date,\n        local_imputed.volume_local_regression,\n        local_imputed.occupancy_local_regression,\n        local_imputed.speed_local_regression,\n        local_imputed.volume_local_avg,\n        local_imputed.occupancy_local_avg,\n        local_imputed.speed_local_avg,\n        regional_imputed.regression_date as regional_regression_date,\n        regional_imputed.volume_regional_regression,\n        regional_imputed.occupancy_regional_regression,\n        regional_imputed.speed_regional_regression,\n        regional_imputed.volume_regional_avg,\n        regional_imputed.occupancy_regional_avg,\n        regional_imputed.speed_regional_avg,\n        global_imputed.regression_date as global_regression_date,\n        global_imputed.volume_global_regression,\n        global_imputed.occupancy_global_regression,\n        global_imputed.speed_global_regression\n    from unimputed\n    left join local_imputed\n        on\n            unimputed.detector_id = local_imputed.detector_id\n            and unimputed.sample_date = local_imputed.sample_date\n            and unimputed.sample_timestamp = local_imputed.sample_timestamp\n    left join regional_imputed\n        on\n            unimputed.detector_id = regional_imputed.detector_id\n            and unimputed.sample_date = regional_imputed.sample_date\n            and unimputed.sample_timestamp = regional_imputed.sample_timestamp\n    left join global_imputed\n        on\n            unimputed.detector_id = global_imputed.detector_id\n            and unimputed.sample_date = global_imputed.sample_date\n            and unimputed.sample_timestamp = global_imputed.sample_timestamp\n)\n\nselect * from agg_with_local_regional_global_imputation", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}, {"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_vds__nearby_stations", "package": null, "version": null}, {"name": "int_imputation__local_regional_regression_coefficients", "package": null, "version": null}, {"name": "int_imputation__global_coefficients", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/int_imputation__detector_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n/* Unimputed data aggregated to five minutes\" */\nwith base as (\n    select\n        station_id,\n        detector_id,\n        lane,\n        district,\n        sample_date,\n        sample_timestamp,\n        volume_sum,\n        occupancy_avg,\n        freeway,\n        direction,\n        county,\n        city,\n        length,\n        station_type,\n        absolute_postmile,\n        sample_ct,\n        station_valid_from,\n        station_valid_to,\n        case\n            when volume_sum = 0 and occupancy_avg = 0 then 0\n            else speed_weighted\n        end as speed_weighted\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    where \n    1=1\n    \n),\n\n/* Get all detectors that are \"real\" in that they represent lanes that exist\n   (rather than lane 8 in a two lane road) with a status of \"Good\" */\ngood_detectors as (\n    select * from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where status = 'Good'\n),\n\nnearby_stations as (\n    select * from ANALYTICS_PRD.vds.int_vds__nearby_stations\n),\n\n/* Local/regional regression coefficients. These are pairwise betweens detectors\n   that are near to each other. If they are within five miles, they are considered\n   \"regional\". If they are in the same station or the immediate upstream/downstream\n   station they are considered \"local\" */\nlocal_regional_coeffs as (\n    select * from ANALYTICS_PRD.imputation.int_imputation__local_regional_regression_coefficients\n),\n\n/* Global regression coefficients. These are per-detector, and regress the detector's\n   values with the freeway-direction-type-district average for those values at the same\n   timestamp. */\nglobal_coeffs as (\n    select * from ANALYTICS_PRD.imputation.int_imputation__global_coefficients\n),\n\n/* Join unimputed data with the \"good detectors\" model to flag whether we consider a\ndetector to be operating correctly for a given day. */\nunimputed as (\n    select\n        base.station_id,\n        base.detector_id,\n        base.lane,\n        base.district,\n        base.sample_date,\n        base.sample_timestamp,\n        base.volume_sum,\n        base.occupancy_avg,\n        base.speed_weighted,\n        base.freeway,\n        base.direction,\n        base.county,\n        base.city,\n        base.length,\n        base.station_type,\n        base.absolute_postmile,\n        base.sample_ct,\n        base.station_valid_from,\n        base.station_valid_to,\n        -- If the detector_id in the join is not null, it means that the detector\n        -- is considered to be \"good\" for a given date.\n        (good_detectors.detector_id is not null) as detector_is_good,\n        base.speed_weighted as speed_five_mins\n    from base\n    left join good_detectors\n        on\n            base.detector_id = good_detectors.detector_id\n            and base.sample_date = good_detectors.sample_date\n    where base.station_type in ('ML', 'HV') -- TODO: make a variable for \"travel station types\"\n),\n\n/* Split the unimputed data into two sets, one requiring imputation\n  (it's status is not \"Good\") and one not requiring imputation (it's status is\n  \"Good\") */\nsamples_requiring_imputation as (\n    select\n        station_id,\n        detector_id,\n        district,\n        sample_date,\n        sample_timestamp,\n        freeway,\n        direction,\n        station_type,\n        volume_sum,\n        occupancy_avg,\n        speed_five_mins\n    from unimputed\n    where not detector_is_good\n    -- there can still be gaps in detectors that are \"Good\",\n    -- so we try to impute for those as well.\n    or volume_sum is null\n    or occupancy_avg is null\n    or speed_five_mins is null\n),\n\nsamples_not_requiring_imputation as (\n    select\n        station_id,\n        detector_id,\n        district,\n        sample_date,\n        sample_timestamp,\n        freeway,\n        direction,\n        station_type,\n        volume_sum,\n        occupancy_avg,\n        speed_five_mins\n    from unimputed\n    where\n        detector_is_good\n        and volume_sum is not null\n        and occupancy_avg is not null\n        and speed_five_mins is not null\n),\n\n/** LOCAL/REGIONAL Regression follows **/\n\n/* Join the samples requiring imputation with all neighboring stations\n   not requiring imputation. These neighbors will be considered candidates\n   for helping to impute missing data. */\nsamples_requiring_imputation_with_local_regional_neighbors as (\n    select\n        imp.*,\n        non_imp.station_id as other_station_id,\n        non_imp.detector_id as other_detector_id,\n        non_imp.occupancy_avg as occupancy_avg_nbr,\n        non_imp.volume_sum as volume_sum_nbr,\n        non_imp.speed_five_mins as speed_five_mins_nbr,\n        nearby_stations.other_station_is_local\n    from samples_requiring_imputation as imp\n    inner join nearby_stations\n        on\n            imp.station_id = nearby_stations.station_id\n            and imp.sample_date >= nearby_stations._valid_from\n            and (imp.sample_date < nearby_stations._valid_to or nearby_stations._valid_to is null)\n    inner join samples_not_requiring_imputation as non_imp\n        on\n            nearby_stations.other_station_id = non_imp.station_id\n            and (imp.detector_id != non_imp.detector_id)\n            and imp.sample_date = non_imp.sample_date\n            and imp.sample_timestamp = non_imp.sample_timestamp\n),\n\n/* Join the samples requiring imputation with the local and regional\n   coefficients. This will both give us the coefficients needed for\n   regressing, as well as give us the ID/Lane of the other station\n   that we'll be regressing against. This makes the number of rows\n   increase significantly, as we get pairwise coefficients for a\n   detector and all of its regional neighbors! */\nsamples_requiring_imputation_with_local_regional_coeffs as (\n    select\n        samples.*,\n        local_regional_coeffs.speed_slope,\n        local_regional_coeffs.speed_intercept,\n        local_regional_coeffs.volume_slope,\n        local_regional_coeffs.volume_intercept,\n        local_regional_coeffs.occupancy_slope,\n        local_regional_coeffs.occupancy_intercept,\n        local_regional_coeffs.regression_date\n    from samples_requiring_imputation_with_local_regional_neighbors as samples\n    asof join local_regional_coeffs\n        match_condition(samples.sample_date >= local_regional_coeffs.regression_date)\n        on\n            samples.detector_id = local_regional_coeffs.detector_id\n            and samples.district = local_regional_coeffs.district\n),\n\n/* Actually do the local and regional imputation! We compute it for all\n   the neighboring detectors, then aggregate up to the median of the imputed\n   values, and finally clamp them to physical numbers (like greater than 0). */\nlocal_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(median(volume_slope * volume_sum_nbr + volume_intercept), 0) as volume_local_regression,\n        -- Occupancy calculation\n        least(greatest(median(occupancy_slope * occupancy_avg_nbr + occupancy_intercept), 0), 1)\n            as occupancy_local_regression,\n        -- Speed calculation\n        greatest(median(speed_slope * speed_five_mins_nbr + speed_intercept), 0) as speed_local_regression,\n        avg(volume_sum_nbr) as volume_local_avg,\n        avg(occupancy_avg_nbr) as occupancy_local_avg,\n        sum(volume_sum_nbr * speed_five_mins_nbr) / nullifzero(sum(volume_sum_nbr)) as speed_local_avg,\n        any_value(regression_date) as regression_date\n    from\n        samples_requiring_imputation_with_local_regional_coeffs\n    where other_station_is_local = true\n    group by detector_id, sample_date, sample_timestamp\n),\n\nregional_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(median(volume_slope * volume_sum_nbr + volume_intercept), 0) as volume_regional_regression,\n        -- Occupancy calculation\n        least(greatest(median(occupancy_slope * occupancy_avg_nbr + occupancy_intercept), 0), 1)\n            as occupancy_regional_regression,\n        -- Speed calculation\n        greatest(median(speed_slope * speed_five_mins_nbr + speed_intercept), 0) as speed_regional_regression,\n        avg(volume_sum_nbr) as volume_regional_avg,\n        avg(occupancy_avg_nbr) as occupancy_regional_avg,\n        sum(volume_sum_nbr * speed_five_mins_nbr) / nullifzero(sum(volume_sum_nbr)) as speed_regional_avg,\n        any_value(regression_date) as regression_date\n    from\n        samples_requiring_imputation_with_local_regional_coeffs\n    group by detector_id, sample_date, sample_timestamp\n),\n\n/** Global regression follows! **/\n\n/* Join the samples requiring imputation with the global\n   coefficients. */\nsamples_requiring_imputation_with_global_coeffs as (\n    select\n        samples_requiring_imputation.*,\n        global_coeffs.speed_slope,\n        global_coeffs.speed_intercept,\n        global_coeffs.volume_slope,\n        global_coeffs.volume_intercept,\n        global_coeffs.occupancy_slope,\n        global_coeffs.occupancy_intercept,\n        global_coeffs.regression_date\n    from samples_requiring_imputation\n    asof join global_coeffs\n        match_condition(samples_requiring_imputation.sample_date >= global_coeffs.regression_date)\n        on\n            samples_requiring_imputation.detector_id = global_coeffs.detector_id\n            and samples_requiring_imputation.district = global_coeffs.district\n),\n\n/* Aggregate the samples not requiring imputation up to the freeway/district/station-type\n   level. This creates the value against which we will be aggregating for each timestamp.\n   It's important that this aggregation look idential to that in\n   int_imputation__global_coefficients, otherwise the regression will be wrong. */\nfreeway_district_agg as (\n    select\n        sample_date,\n        sample_timestamp,\n        district,\n        freeway,\n        direction,\n        station_type,\n        /* Note: since this is an aggregate *across* stations rather than\n        within a single station, it is more appropriate to average the sum\n        rather than sum it. In any event, these averages are intended to be\n        used for computing regression coefficients, so this just makes the\n        regression coefficient the same up to a constant factor*/\n        avg(volume_sum) as volume_sum,\n        avg(occupancy_avg) as occupancy_avg,\n        sum(volume_sum * speed_five_mins) / nullifzero(sum(volume_sum)) as speed_five_mins\n    from samples_not_requiring_imputation\n    group by sample_date, sample_timestamp, district, freeway, direction, station_type\n),\n\n/* Join the averages in with the samples requiring imputation. */\nsamples_requiring_imputation_with_global as (\n    select\n        imp.*,\n        non_imp.speed_five_mins as speed_five_mins_global,\n        non_imp.volume_sum as volume_sum_global,\n        non_imp.occupancy_avg as occupancy_avg_global\n    from samples_requiring_imputation_with_global_coeffs as imp\n    inner join freeway_district_agg as non_imp\n        on\n            imp.freeway = non_imp.freeway\n            and imp.direction = non_imp.direction\n            and imp.station_type = non_imp.station_type\n            and imp.district = non_imp.district\n            and imp.sample_date = non_imp.sample_date\n            and imp.sample_timestamp = non_imp.sample_timestamp\n),\n\n/* Finally, do the global imputation! */\nglobal_imputed as (\n    select\n        detector_id,\n        sample_date,\n        sample_timestamp,\n        -- Volume calculation\n        greatest(volume_slope * volume_sum_global + volume_intercept, 0) as volume_global_regression,\n        -- Occupancy calculation\n        least(greatest(occupancy_slope * occupancy_avg_global + occupancy_intercept, 0), 1)\n            as occupancy_global_regression,\n        -- Speed calculation\n        greatest(speed_slope * speed_five_mins_global + speed_intercept, 0) as speed_global_regression,\n        regression_date\n    from\n        samples_requiring_imputation_with_global\n),\n\n/** Put the local, regional, and global datasets all together **/\nagg_with_local_regional_global_imputation as (\n    select\n        unimputed.*,\n        local_imputed.regression_date as local_regression_date,\n        local_imputed.volume_local_regression,\n        local_imputed.occupancy_local_regression,\n        local_imputed.speed_local_regression,\n        local_imputed.volume_local_avg,\n        local_imputed.occupancy_local_avg,\n        local_imputed.speed_local_avg,\n        regional_imputed.regression_date as regional_regression_date,\n        regional_imputed.volume_regional_regression,\n        regional_imputed.occupancy_regional_regression,\n        regional_imputed.speed_regional_regression,\n        regional_imputed.volume_regional_avg,\n        regional_imputed.occupancy_regional_avg,\n        regional_imputed.speed_regional_avg,\n        global_imputed.regression_date as global_regression_date,\n        global_imputed.volume_global_regression,\n        global_imputed.occupancy_global_regression,\n        global_imputed.speed_global_regression\n    from unimputed\n    left join local_imputed\n        on\n            unimputed.detector_id = local_imputed.detector_id\n            and unimputed.sample_date = local_imputed.sample_date\n            and unimputed.sample_timestamp = local_imputed.sample_timestamp\n    left join regional_imputed\n        on\n            unimputed.detector_id = regional_imputed.detector_id\n            and unimputed.sample_date = regional_imputed.sample_date\n            and unimputed.sample_timestamp = regional_imputed.sample_timestamp\n    left join global_imputed\n        on\n            unimputed.detector_id = global_imputed.detector_id\n            and unimputed.sample_date = global_imputed.sample_date\n            and unimputed.sample_timestamp = global_imputed.sample_timestamp\n)\n\nselect * from agg_with_local_regional_global_imputation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "int_imputation__global_coefficients", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/imputation/int_imputation__global_coefficients.sql", "original_file_path": "models/intermediate/imputation/int_imputation__global_coefficients.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "int_imputation__global_coefficients"], "alias": "int_imputation__global_coefficients", "checksum": {"name": "sha256", "checksum": "eb7e5a0c66fa5c59bea4b05c4815caab54fc4d22ca244ea0984e19eb1b1f4b57"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "district", "freeway", "direction", "station_type", "regression_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "Global regression slopes and intercepts for average of all\ndetectors across the  district, freeway, direction, station_type\nover the regression time period. This model only evaluates new values\non the 3rd day of Feb, May, Aug, and Nov.\nThis model is unique at the level of REGRESSION_DATE + DETECTOR_ID.\n", "columns": {"DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The detector ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGRESSION_DATE": {"name": "REGRESSION_DATE", "description": "The date on which the coefficients in the global regression\nwere evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_SLOPE": {"name": "SPEED_SLOPE", "description": "The slope of the speed regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_INTERCEPT": {"name": "SPEED_INTERCEPT", "description": "The intercept of the speed regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SLOPE": {"name": "VOLUME_SLOPE", "description": "The slope of the volume regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_INTERCEPT": {"name": "VOLUME_INTERCEPT", "description": "The intercept of the volume regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_SLOPE": {"name": "OCCUPANCY_SLOPE", "description": "The slope of the occupancy regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_INTERCEPT": {"name": "OCCUPANCY_INTERCEPT", "description": "The intercept of the occupancy regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "imputation", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='district'), Const(value='freeway'), Const(value='direction'), Const(value='station_type'), Const(value='regression_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2799542, "relation_name": "ANALYTICS_PRD.imputation.int_imputation__global_coefficients", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    unique_key=['detector_id', 'district', 'freeway', 'direction', 'station_type','regression_date'],\n    on_schema_change=\"append_new_columns\",\n    snowflake_warehouse=get_snowflake_refresh_warehouse(big=\"XL\")\n) }}\n\n-- Generate dates using dbt_utils.date_spine\nwith date_spine as (\n    select date_day::date as regression_date\n    from (\n        {{ dbt_utils.date_spine(\n            datepart=\"day\",\n            start_date=\"'1998-10-01'\",\n            end_date=\"current_date()\"\n        ) }}\n    ) as spine\n),\n\n-- Filter dates to get the desired date sequence\nregression_dates as (\n    select *\n    from date_spine\n    where\n        extract(day from regression_date) = 3\n        and extract(month from regression_date) in (2, 5, 8, 11)\n),\n\nregression_dates_to_evaluate as (\n    select * from regression_dates\n    {% if is_incremental() %}\n        minus\n        select distinct regression_date from {{ this }}\n    {% endif %}\n),\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\ngood_detectors as (\n    select\n        detector_id,\n        district,\n        sample_date\n    from {{ ref(\"int_diagnostics__detector_status\") }}\n    where status = 'Good'\n),\n\ndetector_dates_for_regression as (\n    select\n        good_detectors.*,\n        regression_dates_to_evaluate.regression_date\n    from good_detectors\n    inner join regression_dates_to_evaluate\n        on\n            good_detectors.sample_date::date >= regression_dates_to_evaluate.regression_date\n            and good_detectors.sample_date\n            < dateadd(day, {{ var(\"linear_regression_time_window\") }}, regression_dates_to_evaluate.regression_date)\n),\n\nagg as (\n    select * from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\n    where station_type in ('ML', 'HV') -- TODO: make a variable for \"travel station types\"\n),\n\n/* Get the five-minute unimputed data. This is joined on the\nregression dates to only get samples which are within a week of\nthe regression date. It's also joined with the \"good detectors\"\ntable to only get samples from dates that we think were producing\ngood data. */\ndetector_counts as (\n    select\n        agg.detector_id,\n        agg.sample_date,\n        agg.sample_timestamp,\n        agg.volume_sum,\n        agg.occupancy_avg,\n        agg.speed_weighted,\n        agg.district,\n        agg.freeway,\n        agg.direction,\n        agg.station_type,\n        -- TODO: Can we give this a better name? Can we move this into the base model?\n        coalesce(agg.speed_weighted, (agg.volume_sum * 22) / nullifzero(agg.occupancy_avg) * (1 / 5280) * 12)\n            as speed_five_mins,\n        detector_dates_for_regression.regression_date\n    from agg\n    inner join detector_dates_for_regression\n        on\n            agg.detector_id = detector_dates_for_regression.detector_id\n            and agg.sample_date = detector_dates_for_regression.sample_date\n),\n\nglobal_agg as (\n    select\n        sample_date,\n        sample_timestamp,\n        district,\n        freeway,\n        direction,\n        station_type,\n        /* Note: since this is an aggregate *across* stations rather than\n        within a single station, it is more appropriate to average the sum\n        rather than sum it. In any event, these averages are intended to be\n        used for computing regression coefficients, so this just makes the\n        regression coefficient the same up to a constant factor*/\n        avg(volume_sum) as volume_sum,\n        avg(occupancy_avg) as occupancy_avg,\n        sum(volume_sum * speed_weighted) / nullifzero(sum(volume_sum)) as speed_weighted\n    from detector_counts\n    group by sample_date, sample_timestamp, district, freeway, direction, station_type\n),\n\n-- Join the 5-minute aggregated data with the district-freeway aggregation\ndetector_counts_with_global_averages as (\n    select\n        a.detector_id,\n        a.district,\n        a.regression_date,\n        a.freeway,\n        a.direction,\n        a.station_type,\n        a.speed_five_mins as speed,\n        a.volume_sum as volume,\n        a.occupancy_avg as occupancy,\n        g.volume_sum as global_volume,\n        g.occupancy_avg as global_occupancy,\n        g.speed_weighted as global_speed\n    from detector_counts as a\n    inner join global_agg as g\n        on\n            a.sample_date = g.sample_date\n            and a.sample_timestamp = g.sample_timestamp\n            and a.district = g.district\n            and a.freeway = g.freeway\n            and a.direction = g.direction\n            and a.station_type = g.station_type\n),\n\n-- Aggregate the self-joined table to get the slope\n-- and intercept of the regression.\ndetector_counts_regression as (\n    select\n        detector_id,\n        district,\n        freeway,\n        station_type,\n        direction,\n        regression_date,\n        -- speed regression model\n        regr_slope(speed, global_speed) as speed_slope,\n        regr_intercept(speed, global_speed) as speed_intercept,\n        -- flow or volume regression model\n        regr_slope(volume, global_volume) as volume_slope,\n        regr_intercept(volume, global_volume) as volume_intercept,\n        -- occupancy regression model\n        regr_slope(occupancy, global_occupancy) as occupancy_slope,\n        regr_intercept(occupancy, global_occupancy) as occupancy_intercept\n    from detector_counts_with_global_averages\n    group by detector_id, district, freeway, direction, station_type, regression_date\n    -- No point in regressing if the variables are all null,\n    -- this can save significant time.\n    having\n        (count(volume) > 0 and count(global_volume) > 0)\n        or (count(occupancy) > 0 and count(global_occupancy) > 0)\n        or (count(speed) > 0 and count(global_speed) > 0)\n)\n\nselect * from detector_counts_regression", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}, {"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.dbt_utils.date_spine", "macro.dbt.is_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/int_imputation__global_coefficients.sql", "compiled": true, "compiled_code": "\n\n-- Generate dates using dbt_utils.date_spine\nwith date_spine as (\n    select date_day::date as regression_date\n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9819\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '1998-10-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date()\n\n)\n\nselect * from filtered\n\n\n    ) as spine\n),\n\n-- Filter dates to get the desired date sequence\nregression_dates as (\n    select *\n    from date_spine\n    where\n        extract(day from regression_date) = 3\n        and extract(month from regression_date) in (2, 5, 8, 11)\n),\n\nregression_dates_to_evaluate as (\n    select * from regression_dates\n    \n),\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\ngood_detectors as (\n    select\n        detector_id,\n        district,\n        sample_date\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where status = 'Good'\n),\n\ndetector_dates_for_regression as (\n    select\n        good_detectors.*,\n        regression_dates_to_evaluate.regression_date\n    from good_detectors\n    inner join regression_dates_to_evaluate\n        on\n            good_detectors.sample_date::date >= regression_dates_to_evaluate.regression_date\n            and good_detectors.sample_date\n            < dateadd(day, 7, regression_dates_to_evaluate.regression_date)\n),\n\nagg as (\n    select * from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    where station_type in ('ML', 'HV') -- TODO: make a variable for \"travel station types\"\n),\n\n/* Get the five-minute unimputed data. This is joined on the\nregression dates to only get samples which are within a week of\nthe regression date. It's also joined with the \"good detectors\"\ntable to only get samples from dates that we think were producing\ngood data. */\ndetector_counts as (\n    select\n        agg.detector_id,\n        agg.sample_date,\n        agg.sample_timestamp,\n        agg.volume_sum,\n        agg.occupancy_avg,\n        agg.speed_weighted,\n        agg.district,\n        agg.freeway,\n        agg.direction,\n        agg.station_type,\n        -- TODO: Can we give this a better name? Can we move this into the base model?\n        coalesce(agg.speed_weighted, (agg.volume_sum * 22) / nullifzero(agg.occupancy_avg) * (1 / 5280) * 12)\n            as speed_five_mins,\n        detector_dates_for_regression.regression_date\n    from agg\n    inner join detector_dates_for_regression\n        on\n            agg.detector_id = detector_dates_for_regression.detector_id\n            and agg.sample_date = detector_dates_for_regression.sample_date\n),\n\nglobal_agg as (\n    select\n        sample_date,\n        sample_timestamp,\n        district,\n        freeway,\n        direction,\n        station_type,\n        /* Note: since this is an aggregate *across* stations rather than\n        within a single station, it is more appropriate to average the sum\n        rather than sum it. In any event, these averages are intended to be\n        used for computing regression coefficients, so this just makes the\n        regression coefficient the same up to a constant factor*/\n        avg(volume_sum) as volume_sum,\n        avg(occupancy_avg) as occupancy_avg,\n        sum(volume_sum * speed_weighted) / nullifzero(sum(volume_sum)) as speed_weighted\n    from detector_counts\n    group by sample_date, sample_timestamp, district, freeway, direction, station_type\n),\n\n-- Join the 5-minute aggregated data with the district-freeway aggregation\ndetector_counts_with_global_averages as (\n    select\n        a.detector_id,\n        a.district,\n        a.regression_date,\n        a.freeway,\n        a.direction,\n        a.station_type,\n        a.speed_five_mins as speed,\n        a.volume_sum as volume,\n        a.occupancy_avg as occupancy,\n        g.volume_sum as global_volume,\n        g.occupancy_avg as global_occupancy,\n        g.speed_weighted as global_speed\n    from detector_counts as a\n    inner join global_agg as g\n        on\n            a.sample_date = g.sample_date\n            and a.sample_timestamp = g.sample_timestamp\n            and a.district = g.district\n            and a.freeway = g.freeway\n            and a.direction = g.direction\n            and a.station_type = g.station_type\n),\n\n-- Aggregate the self-joined table to get the slope\n-- and intercept of the regression.\ndetector_counts_regression as (\n    select\n        detector_id,\n        district,\n        freeway,\n        station_type,\n        direction,\n        regression_date,\n        -- speed regression model\n        regr_slope(speed, global_speed) as speed_slope,\n        regr_intercept(speed, global_speed) as speed_intercept,\n        -- flow or volume regression model\n        regr_slope(volume, global_volume) as volume_slope,\n        regr_intercept(volume, global_volume) as volume_intercept,\n        -- occupancy regression model\n        regr_slope(occupancy, global_occupancy) as occupancy_slope,\n        regr_intercept(occupancy, global_occupancy) as occupancy_intercept\n    from detector_counts_with_global_averages\n    group by detector_id, district, freeway, direction, station_type, regression_date\n    -- No point in regressing if the variables are all null,\n    -- this can save significant time.\n    having\n        (count(volume) > 0 and count(global_volume) > 0)\n        or (count(occupancy) > 0 and count(global_occupancy) > 0)\n        or (count(speed) > 0 and count(global_speed) > 0)\n)\n\nselect * from detector_counts_regression", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients": {"database": "ANALYTICS_PRD", "schema": "imputation", "name": "int_imputation__local_regional_regression_coefficients", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/imputation/int_imputation__local_regional_regression_coefficients.sql", "original_file_path": "models/intermediate/imputation/int_imputation__local_regional_regression_coefficients.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "int_imputation__local_regional_regression_coefficients"], "alias": "int_imputation__local_regional_regression_coefficients", "checksum": {"name": "sha256", "checksum": "e989df612bf1bdf9e3e1b3806428e03b16375d75915b8af876f39059d94e01c9"}, "config": {"enabled": true, "alias": null, "schema": "imputation", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "other_detector_id", "regression_date"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "Linear regression slopes and intercepts for pairs of detectors.\nThey are evaluated at regular dates (`regression_date`) in order to\nmake multiple measurements of the coefficients. This allows the values\nto vary with time, and for there to be backup measurements if one detector\nor the other are not operational for the regression dates.\nThis model only evaluates new values on the 3rd day of Feb, May, Aug, and Nov.\nThis model is unique at the level of REGRESSION_DATE + DETECTOR_ID + OTHER_DETECTOR_ID.\n", "columns": {"DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The ID of the detector with the dependent variables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OTHER_DETECTOR_ID": {"name": "OTHER_DETECTOR_ID", "description": "The ID of the detector with the independent variables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district of the dependent detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGRESSION_DATE": {"name": "REGRESSION_DATE", "description": "The starting date for the regression. The regressions are evaluated\nover several days, but things like joins with slowly-changing-dimensions\n(i.e., `_valid_from`) are based on the start date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_SLOPE": {"name": "SPEED_SLOPE", "description": "The slope of the speed regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_INTERCEPT": {"name": "SPEED_INTERCEPT", "description": "The intercept of the speed regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_SLOPE": {"name": "VOLUME_SLOPE", "description": "The slope of the volume regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_INTERCEPT": {"name": "VOLUME_INTERCEPT", "description": "The intercept of the volume regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_SLOPE": {"name": "OCCUPANCY_SLOPE", "description": "The slope of the occupancy regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_INTERCEPT": {"name": "OCCUPANCY_INTERCEPT", "description": "The intercept of the occupancy regression.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OTHER_STATION_IS_LOCAL": {"name": "OTHER_STATION_IS_LOCAL", "description": "tagging wheather the other id is local counters\nor regional counters. If the other id is just upstream or downstream\nthen it is considered as local counters. On the other hand\nexcept local counters if any counters are located within 5 miles\nupstream and downstream, then it is considered as regional id.\nThis boolean function where True means local counters and false means\nregional counters.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/imputation/_imputation.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "imputation", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='other_detector_id'), Const(value='regression_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='append_new_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2683547, "relation_name": "ANALYTICS_PRD.imputation.int_imputation__local_regional_regression_coefficients", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    unique_key=['detector_id','other_detector_id','regression_date'],\n    on_schema_change=\"append_new_columns\",\n    snowflake_warehouse=get_snowflake_refresh_warehouse(big=\"XL\")\n) }}\n\n-- Generate dates using dbt_utils.date_spine\nwith date_spine as (\n    select cast(date_day as date) as regression_date\n    from (\n        {{ dbt_utils.date_spine(\n            datepart=\"day\",\n            start_date=\"'1998-10-01'\",\n            end_date=\"current_date()\"\n        ) }}\n    ) as spine\n),\n\n-- -- Filter dates to get the desired date sequence\nregression_dates as (\n    select *\n    from date_spine\n    where\n        extract(day from regression_date) = 3\n        and extract(month from regression_date) in (2, 5, 8, 11)\n),\n\nregression_dates_to_evaluate as (\n    select * from regression_dates\n    {% if is_incremental() %}\n        minus\n        select distinct regression_date from {{ this }}\n    {% endif %}\n),\n\nagg as (\n    select *\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\n),\n\n-- Select all station pairs that are active for the chosen regression dates\nnearby_stations as (\n    select\n        nearby.station_id,\n        nearby.other_station_id,\n        nearby.other_station_is_local,\n        regression_dates_to_evaluate.regression_date\n    from {{ ref('int_vds__nearby_stations') }} as nearby\n    inner join regression_dates_to_evaluate\n        on\n            {{ get_scd_2_data('regression_dates_to_evaluate.regression_date','nearby._valid_from','nearby._valid_to') }}\n\n    /* This filters the nearby_stations model further to make sure we don't do the pairwise\n    join below on more dates than we need. In theory, the parwise join *should* be able to\n    do this filtering already, but in some profiling Snowflake was doing some join reordering\n    that caused an unnecessary row explosion, where the date filtering was happening\n    after the pairwise join. So this helps avoid that behavior. */\n    where regression_dates_to_evaluate.regression_date >= (select min(agg.sample_date) from agg)\n),\n\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\ngood_detectors as (\n    select\n        detector_id,\n        district,\n        sample_date\n    from {{ ref(\"int_diagnostics__detector_status\") }}\n    where status = 'Good'\n),\n\n/* Get the five-minute unimputed data. This is joined on the\nregression dates to only get samples which are within a week of\nthe regression date. It's also joined with the \"good detectors\"\ntable to only get samples from dates that we think were producing\ngood data. */\ndetector_counts as (\n    select\n        agg.station_id,\n        agg.detector_id,\n        agg.sample_date,\n        agg.sample_timestamp,\n        agg.volume_sum,\n        agg.occupancy_avg,\n        agg.speed_weighted,\n        good_detectors.district,\n        -- TODO: Can we give this a better name? Can we move this into the base model?\n        coalesce(agg.speed_weighted, (agg.volume_sum * 22) / nullifzero(agg.occupancy_avg) * (1 / 5280) * 12)\n            as speed_five_mins,\n        regression_dates_to_evaluate.regression_date\n    from agg\n    inner join regression_dates_to_evaluate\n        on\n            agg.sample_date >= regression_dates_to_evaluate.regression_date\n            and agg.sample_date\n            < dateadd(day, {{ var(\"linear_regression_time_window\") }}, regression_dates_to_evaluate.regression_date)\n    inner join good_detectors\n        on\n            agg.detector_id = good_detectors.detector_id\n            and agg.sample_date = good_detectors.sample_date\n),\n\n\n-- Self-join the 5-minute aggregated data with itself,\n-- joining on the whether a station is itself or one\n-- of it's neighbors. This is a big table, as we get\n-- the product of all of the lanes in nearby stations\ndetector_counts_pairwise as (\n    select\n        a.station_id,\n        b.station_id as other_station_id,\n        a.detector_id,\n        b.detector_id as other_detector_id,\n        a.district,\n        a.regression_date,\n        a.speed_five_mins as speed,\n        b.speed_five_mins as other_speed,\n        a.volume_sum as volume,\n        b.volume_sum as other_volume,\n        a.occupancy_avg as occupancy,\n        b.occupancy_avg as other_occupancy,\n        nearby_stations.other_station_is_local\n    from detector_counts as a\n    left join nearby_stations\n        on\n            a.station_id = nearby_stations.station_id\n            and a.regression_date = nearby_stations.regression_date\n    inner join detector_counts as b\n        on\n            nearby_stations.other_station_id = b.station_id\n            and a.sample_date = b.sample_date\n            and a.sample_timestamp = b.sample_timestamp\n),\n\n-- Aggregate the self-joined table to get the slope\n-- and intercept of the regression.\ndetector_counts_regression as (\n    select\n        detector_id,\n        other_detector_id,\n        district,\n        regression_date,\n        other_station_is_local,\n        -- speed regression model\n        regr_slope(speed, other_speed) as speed_slope,\n        regr_intercept(speed, other_speed) as speed_intercept,\n        -- flow or volume regression model\n        regr_slope(volume, other_volume) as volume_slope,\n        regr_intercept(volume, other_volume) as volume_intercept,\n        -- occupancy regression model\n        regr_slope(occupancy, other_occupancy) as occupancy_slope,\n        regr_intercept(occupancy, other_occupancy) as occupancy_intercept\n    from detector_counts_pairwise\n    where not (detector_id = other_detector_id)-- don't bother regressing on self!\n    group by detector_id, other_detector_id, district, regression_date, other_station_is_local\n    -- No point in regressing if the variables are all null,\n    -- this can save significant time.\n    having\n        (count(volume) > 0 and count(other_volume) > 0)\n        or (count(occupancy) > 0 and count(other_occupancy) > 0)\n        or (count(speed) > 0 and count(other_speed) > 0)\n)\n\nselect * from detector_counts_regression", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}, {"name": "int_vds__nearby_stations", "package": null, "version": null}, {"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.dbt_utils.date_spine", "macro.dbt.is_incremental", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/int_imputation__local_regional_regression_coefficients.sql", "compiled": true, "compiled_code": "\n\n-- Generate dates using dbt_utils.date_spine\nwith date_spine as (\n    select cast(date_day as date) as regression_date\n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9819\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '1998-10-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date()\n\n)\n\nselect * from filtered\n\n\n    ) as spine\n),\n\n-- -- Filter dates to get the desired date sequence\nregression_dates as (\n    select *\n    from date_spine\n    where\n        extract(day from regression_date) = 3\n        and extract(month from regression_date) in (2, 5, 8, 11)\n),\n\nregression_dates_to_evaluate as (\n    select * from regression_dates\n    \n),\n\nagg as (\n    select *\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n),\n\n-- Select all station pairs that are active for the chosen regression dates\nnearby_stations as (\n    select\n        nearby.station_id,\n        nearby.other_station_id,\n        nearby.other_station_is_local,\n        regression_dates_to_evaluate.regression_date\n    from ANALYTICS_PRD.vds.int_vds__nearby_stations as nearby\n    inner join regression_dates_to_evaluate\n        on\n            \n\n    regression_dates_to_evaluate.regression_date >= nearby._valid_from\n    and ( regression_dates_to_evaluate.regression_date < nearby._valid_to or nearby._valid_to is null)\n\n\n\n    /* This filters the nearby_stations model further to make sure we don't do the pairwise\n    join below on more dates than we need. In theory, the parwise join *should* be able to\n    do this filtering already, but in some profiling Snowflake was doing some join reordering\n    that caused an unnecessary row explosion, where the date filtering was happening\n    after the pairwise join. So this helps avoid that behavior. */\n    where regression_dates_to_evaluate.regression_date >= (select min(agg.sample_date) from agg)\n),\n\n\n-- Get all of the detectors that are producing good data, based on\n-- the diagnostic tests\ngood_detectors as (\n    select\n        detector_id,\n        district,\n        sample_date\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    where status = 'Good'\n),\n\n/* Get the five-minute unimputed data. This is joined on the\nregression dates to only get samples which are within a week of\nthe regression date. It's also joined with the \"good detectors\"\ntable to only get samples from dates that we think were producing\ngood data. */\ndetector_counts as (\n    select\n        agg.station_id,\n        agg.detector_id,\n        agg.sample_date,\n        agg.sample_timestamp,\n        agg.volume_sum,\n        agg.occupancy_avg,\n        agg.speed_weighted,\n        good_detectors.district,\n        -- TODO: Can we give this a better name? Can we move this into the base model?\n        coalesce(agg.speed_weighted, (agg.volume_sum * 22) / nullifzero(agg.occupancy_avg) * (1 / 5280) * 12)\n            as speed_five_mins,\n        regression_dates_to_evaluate.regression_date\n    from agg\n    inner join regression_dates_to_evaluate\n        on\n            agg.sample_date >= regression_dates_to_evaluate.regression_date\n            and agg.sample_date\n            < dateadd(day, 7, regression_dates_to_evaluate.regression_date)\n    inner join good_detectors\n        on\n            agg.detector_id = good_detectors.detector_id\n            and agg.sample_date = good_detectors.sample_date\n),\n\n\n-- Self-join the 5-minute aggregated data with itself,\n-- joining on the whether a station is itself or one\n-- of it's neighbors. This is a big table, as we get\n-- the product of all of the lanes in nearby stations\ndetector_counts_pairwise as (\n    select\n        a.station_id,\n        b.station_id as other_station_id,\n        a.detector_id,\n        b.detector_id as other_detector_id,\n        a.district,\n        a.regression_date,\n        a.speed_five_mins as speed,\n        b.speed_five_mins as other_speed,\n        a.volume_sum as volume,\n        b.volume_sum as other_volume,\n        a.occupancy_avg as occupancy,\n        b.occupancy_avg as other_occupancy,\n        nearby_stations.other_station_is_local\n    from detector_counts as a\n    left join nearby_stations\n        on\n            a.station_id = nearby_stations.station_id\n            and a.regression_date = nearby_stations.regression_date\n    inner join detector_counts as b\n        on\n            nearby_stations.other_station_id = b.station_id\n            and a.sample_date = b.sample_date\n            and a.sample_timestamp = b.sample_timestamp\n),\n\n-- Aggregate the self-joined table to get the slope\n-- and intercept of the regression.\ndetector_counts_regression as (\n    select\n        detector_id,\n        other_detector_id,\n        district,\n        regression_date,\n        other_station_is_local,\n        -- speed regression model\n        regr_slope(speed, other_speed) as speed_slope,\n        regr_intercept(speed, other_speed) as speed_intercept,\n        -- flow or volume regression model\n        regr_slope(volume, other_volume) as volume_slope,\n        regr_intercept(volume, other_volume) as volume_intercept,\n        -- occupancy regression model\n        regr_slope(occupancy, other_occupancy) as occupancy_slope,\n        regr_intercept(occupancy, other_occupancy) as occupancy_intercept\n    from detector_counts_pairwise\n    where not (detector_id = other_detector_id)-- don't bother regressing on self!\n    group by detector_id, other_detector_id, district, regression_date, other_station_is_local\n    -- No point in regressing if the variables are all null,\n    -- this can save significant time.\n    having\n        (count(volume) > 0 and count(other_volume) > 0)\n        or (count(occupancy) > 0 and count(other_occupancy) > 0)\n        or (count(speed) > 0 and count(other_speed) > 0)\n)\n\nselect * from detector_counts_regression", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "int_diagnostics__det_diag_set_assignment", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/diagnostics/int_diagnostics__det_diag_set_assignment.sql", "original_file_path": "models/intermediate/diagnostics/int_diagnostics__det_diag_set_assignment.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "int_diagnostics__det_diag_set_assignment"], "alias": "int_diagnostics__det_diag_set_assignment", "checksum": {"name": "sha256", "checksum": "1e49a1c36bf3bf2be19186bd2fa056db49d9e2e95e96dcfd8e96f106fb53dba7"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "This data model assigns diagnostic threshold values used for detector health\ndiagnostics at the station level based on the district and type of station.\nThe model also brings in operational detector data for each station where\nhealth is being calculated for each station. This model is unique at the level of ACTIVE_DATE + STATION_ID.\n", "columns": {"station_id": {"name": "station_id", "description": "An integer value that uniquely indentifies the Station Metadata.\nUse this value to 'join' other clearinghouse files that contain Station Metadata.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "active_date": {"name": "active_date", "description": "Date a station is considered active based on the meta data configuration file from district.\nThis value determines what calculations or diagnostics are associated with a station and it's\nassociated detectors on any given date while it is active.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Two character string identify the VDS type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_diagnostic_set_id": {"name": "station_diagnostic_set_id", "description": "Detector threshold set assigned to station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_diagnostic_method_id": {"name": "station_diagnostic_method_id", "description": "Detector threshold method assigned to station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy": {"name": "high_occupancy", "description": "The high-occupancy threshold for station diagnostics, above which the\nvalues are considered suspicious.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_flow": {"name": "high_flow", "description": "The high-flow threshold for station diagnostics, above which the\nvalues are considered suspicious.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_percent": {"name": "high_occupancy_percent", "description": "The high occupancy percentage threshold for station diagnostics above which\nthe number of high occupancy values that occur at a station are suspect\nNo. of high occ samples > % of the max collected samples during the test period\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occupancy_percent": {"name": "zero_occupancy_percent", "description": "The zero occupancy percentage threshold for station diagnostics above which\nthe number of zero occupancy values that occur at a station are suspect\nNo. of zero occ samples > % of the max collected samples during the test period\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flow_occupancy_percent": {"name": "flow_occupancy_percent", "description": "The percentage threshold for station diagnostics where the number of\nflow = 0 and occupancy > 0 values that occur at a station are suspect\nNo. of flow-occ mismatch samples > % of the max collected samples during the\ntest period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_flow_percent": {"name": "occupancy_flow_percent", "description": "The percentage threshold for station diagnostics where the number of\noccupany = 0 and flow > 0 values that occur at a station are suspect\nNo. of flow-occ mismatch samples > % of the max collected samples during the\ntest period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repeat_occupancy": {"name": "repeat_occupancy", "description": "The high-occupancy threshold for station diagnostics, above which the\nvalues are considered suspicious\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_flow_percent": {"name": "high_flow_percent", "description": "The percentage threshold for station diagnostics where the number of high flow\nvalues that occur at a station are suspect\nNo. of high flow samples > % of the max collected samples during the test period\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_flow_percent": {"name": "zero_flow_percent", "description": "The percentage threshold for station diagnostics where the number of zero flow\nvalues that occur at a station are suspect\nNo. of zero flow samples > % of the max collected samples during the test period\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_to": {"name": "station_valid_to", "description": "The date that this metadata became *invalid*.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_valid_from": {"name": "station_valid_from", "description": "The date that this metadata became valid. Should be the same as `META_DATE`.\nFinding the right metadata for a date should involve a check with\n`_VALID_FROM <= date < _VALID_TO`.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dt_set_id": {"name": "dt_set_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "diagnostics"}, "created_at": 1755632024.2955685, "relation_name": "ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment", "raw_code": "with\r\n\r\nstation_diagnostic_set_assign as (\r\n    /*\r\n    This SQL file assigns which sets of calculations will be used for\r\n    a station based on information in from the station metadata\r\n    The station_DIAGNOSTIC_SET_ID variable assigns 1 of 5 values for station\r\n    diagnostic evaluations. The station_DIAGNOSTIC_METHOD_ID variable assigns\r\n    1 of 2 values for station diagnostic evaluations.\r\n    */\r\n    select\r\n        active_date,\r\n        station_id,\r\n        district,\r\n        station_type,\r\n        dt_set_id,\r\n        _valid_from as station_valid_from,\r\n        _valid_to as station_valid_to,\r\n        case\r\n            when UPPER(dt_set_id) like 'LOW%' then 'Low_Volume'\r\n            when UPPER(dt_set_id) like 'RURAL%' then 'Rural'\r\n            when UPPER(dt_set_id) like 'URBAN_D11%' then 'Urban_D11'\r\n            when UPPER(dt_set_id) like 'D6_RAMPS%' then 'D6_Ramps'\r\n            else 'Urban'\r\n        end as station_diagnostic_set_id,\r\n        case\r\n            when station_type in ('ML', 'HV') then 'mainline'\r\n            else 'ramp'\r\n        end as station_diagnostic_method_id\r\n\r\n    from {{ ref ('int_vds__active_stations') }}\r\n),\r\n\r\ndiagnostic_threshold_values as (\r\n    -- Pivot the data in the diagnostic_threshold_value seed file so\r\n    -- subsequent joins create wide instead of long tables\r\n    select *\r\n    from {{ ref('diagnostic_threshold_values') }}\r\n    pivot (AVG(dt_value) for dt_name in (\r\n        'high_occ',\r\n        'high_flow',\r\n        'high_occ_pct',\r\n        'zero_occ_pct',\r\n        'flow_occ_pct',\r\n        'occ_flow_pct',\r\n        'repeat_occ',\r\n        'high_flow_pct',\r\n        'zero_flow_pct'\r\n    ))\r\n        as p (\r\n            dt_set_id,\r\n            dt_method,\r\n            high_occupancy,\r\n            high_flow,\r\n            high_occupancy_percent,\r\n            zero_occupancy_percent,\r\n            flow_occupancy_percent,\r\n            occupancy_flow_percent,\r\n            repeat_occupancy,\r\n            high_flow_percent,\r\n            zero_flow_percent\r\n        )\r\n),\r\n\r\nstation_diagnostic_threshold_values as (\r\n    /*\r\n    This SQL file assigns which station threshold values will be used\r\n    for a station based on information from the station metadata.\r\n    */\r\n    select\r\n        station_diagnostic_set_assign.*,\r\n        diagnostic_threshold_values.* exclude (dt_set_id, dt_method)\r\n    from station_diagnostic_set_assign\r\n    inner join diagnostic_threshold_values\r\n        on\r\n            station_diagnostic_set_assign.station_diagnostic_set_id = diagnostic_threshold_values.dt_set_id\r\n            and station_diagnostic_set_assign.station_diagnostic_method_id = diagnostic_threshold_values.dt_method\r\n)\r\n\r\nselect * from station_diagnostic_threshold_values", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__active_stations", "package": null, "version": null}, {"name": "diagnostic_threshold_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/int_diagnostics__det_diag_set_assignment.sql", "compiled": true, "compiled_code": "with\n\nstation_diagnostic_set_assign as (\n    /*\n    This SQL file assigns which sets of calculations will be used for\n    a station based on information in from the station metadata\n    The station_DIAGNOSTIC_SET_ID variable assigns 1 of 5 values for station\n    diagnostic evaluations. The station_DIAGNOSTIC_METHOD_ID variable assigns\n    1 of 2 values for station diagnostic evaluations.\n    */\n    select\n        active_date,\n        station_id,\n        district,\n        station_type,\n        dt_set_id,\n        _valid_from as station_valid_from,\n        _valid_to as station_valid_to,\n        case\n            when UPPER(dt_set_id) like 'LOW%' then 'Low_Volume'\n            when UPPER(dt_set_id) like 'RURAL%' then 'Rural'\n            when UPPER(dt_set_id) like 'URBAN_D11%' then 'Urban_D11'\n            when UPPER(dt_set_id) like 'D6_RAMPS%' then 'D6_Ramps'\n            else 'Urban'\n        end as station_diagnostic_set_id,\n        case\n            when station_type in ('ML', 'HV') then 'mainline'\n            else 'ramp'\n        end as station_diagnostic_method_id\n\n    from ANALYTICS_PRD.vds.int_vds__active_stations\n),\n\ndiagnostic_threshold_values as (\n    -- Pivot the data in the diagnostic_threshold_value seed file so\n    -- subsequent joins create wide instead of long tables\n    select *\n    from ANALYTICS_PRD.diagnostics.diagnostic_threshold_values\n    pivot (AVG(dt_value) for dt_name in (\n        'high_occ',\n        'high_flow',\n        'high_occ_pct',\n        'zero_occ_pct',\n        'flow_occ_pct',\n        'occ_flow_pct',\n        'repeat_occ',\n        'high_flow_pct',\n        'zero_flow_pct'\n    ))\n        as p (\n            dt_set_id,\n            dt_method,\n            high_occupancy,\n            high_flow,\n            high_occupancy_percent,\n            zero_occupancy_percent,\n            flow_occupancy_percent,\n            occupancy_flow_percent,\n            repeat_occupancy,\n            high_flow_percent,\n            zero_flow_percent\n        )\n),\n\nstation_diagnostic_threshold_values as (\n    /*\n    This SQL file assigns which station threshold values will be used\n    for a station based on information from the station metadata.\n    */\n    select\n        station_diagnostic_set_assign.*,\n        diagnostic_threshold_values.* exclude (dt_set_id, dt_method)\n    from station_diagnostic_set_assign\n    inner join diagnostic_threshold_values\n        on\n            station_diagnostic_set_assign.station_diagnostic_set_id = diagnostic_threshold_values.dt_set_id\n            and station_diagnostic_set_assign.station_diagnostic_method_id = diagnostic_threshold_values.dt_method\n)\n\nselect * from station_diagnostic_threshold_values", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "int_diagnostics__detector_status", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/diagnostics/int_diagnostics__detector_status.sql", "original_file_path": "models/intermediate/diagnostics/int_diagnostics__detector_status.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "int_diagnostics__detector_status"], "alias": "int_diagnostics__detector_status", "checksum": {"name": "sha256", "checksum": "7d5ebc8addba523f8e8de75e60908abea0d6f340273b0cfe94404a8283f5ef0f"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This file contains count data by station and lane based on the 30 second raw data\nalong with a diagnostic value associated with the station type and count results.\nThis model is unique at the level of SAMPLE_DATE + DETECTOR_ID.\n", "columns": {"active_date": {"name": "active_date", "description": "Date a station is considered active based on the meta data configuration file from district.\nThis value determines what calculations or diagnostics are associated with a station and it's\nassociated detectors on any given date while it is active.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "The detector health status based on a series of validations made from sample counts\nacross various threshold validations/checks\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "A two character code indicating the type of detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a route and station from raw data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "The length associated with a VDS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_occupancy_delta": {"name": "min_occupancy_delta", "description": "Selects the minimum of the abs_val_occupancy_delta_summed column\nwhich takes the absolute value of the delta between occupancy and\nprevious occupancy summed over a window of 4 hours.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy\nvalues contain any non-null value\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_ct": {"name": "zero_vol_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) value\nequals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_ct": {"name": "zero_occ_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_pos_occ_ct": {"name": "zero_vol_pos_occ_ct", "description": "Counts the number of raw data samples where a lane's volume (flow)\nvalue equals 0 but occupancy is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_pos_vol_ct": {"name": "zero_occ_pos_vol_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0 but volume (flow) is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_volume_ct": {"name": "high_volume_ct", "description": "Counts the number of volume (flow) values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_ct": {"name": "high_occupancy_ct", "description": "Counts the number of occupancy values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district_feed_working": {"name": "district_feed_working", "description": "Returns No if no detector samples are recieved in a district on a daily basis, otherwise\nYes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num_working": {"name": "line_num_working", "description": "Returns No if no detector samples are recieved on a communication line associated with a\nspecific line and district on a daily basis, otherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_feed_working": {"name": "controller_feed_working", "description": "Returns No if no detector samples are recieved from a controller on a daily basis,\notherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_feed_working": {"name": "station_feed_working", "description": "Returns No if no detector samples are recieved from a station on a daily basis,\notherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_feed_working": {"name": "detector_feed_working", "description": "Returns No if a detector send no samples to PeMS on a daily basis, otherwise Yes is\nreturned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_diagnostic_method_id": {"name": "station_diagnostic_method_id", "description": "Detector threshold method assigned to station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "diagnostics", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2990654, "relation_name": "ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"sample_date\"],\r\n    unique_key=[\"detector_id\", \"sample_date\"],\r\n    on_schema_change=\"sync_all_columns\",\r\n    snowflake_warehouse=get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\nwith\r\nsource as (\r\n    select * from {{ ref('int_diagnostics__samples_per_detector') }}\r\n    where {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\ndetector_meta as (\r\n    select * from {{ ref('int_vds__detector_config') }}\r\n),\r\n\r\nset_assgnmt as (\r\n    select * from {{ ref('int_diagnostics__det_diag_set_assignment') }}\r\n    where\r\n        active_date between\r\n        (select min(source.sample_date) from source) and (select max(source.sample_date) from source)\r\n),\r\n\r\nassignment_with_meta as (\r\n    select\r\n        set_assgnmt.*,\r\n        dm.detector_id,\r\n        dm.detector_type,\r\n        dm.lane,\r\n        dm.state_postmile,\r\n        dm.absolute_postmile,\r\n        dm.latitude,\r\n        dm.longitude,\r\n        dm.physical_lanes,\r\n        dm.county,\r\n        dm.city,\r\n        dm.freeway,\r\n        dm.direction,\r\n        dm.length\r\n    from set_assgnmt\r\n    inner join detector_meta as dm\r\n        on\r\n            set_assgnmt.station_id = dm.station_id\r\n            and {{ get_scd_2_data('set_assgnmt.active_date','dm._valid_from','dm._valid_to') }}\r\n),\r\n\r\ndetector_status as (\r\n    select\r\n        awm.active_date,\r\n        awm.station_id,\r\n        awm.district,\r\n        awm.station_type,\r\n        awm.station_diagnostic_method_id,\r\n        awm.active_date as sample_date,\r\n        awm.detector_id,\r\n        awm.detector_type,\r\n        awm.lane,\r\n        awm.state_postmile,\r\n        awm.absolute_postmile,\r\n        awm.latitude,\r\n        awm.longitude,\r\n        awm.physical_lanes,\r\n        awm.county,\r\n        awm.city,\r\n        awm.freeway,\r\n        awm.direction,\r\n        awm.length,\r\n        sps.* exclude (district, station_id, lane, detector_id, sample_date),\r\n        nds.district_feed_working,\r\n        nds.line_num_working,\r\n        nds.controller_feed_working,\r\n        nds.station_feed_working,\r\n        nds.detector_feed_working,\r\n        co.min_occupancy_delta,\r\n        case\r\n            when nds.district_feed_working = 'No' then 'District Feed Down'\r\n            when nds.line_num_working = 'No' then 'Line Down'\r\n            when nds.controller_feed_working = 'No' then 'Controller Down'\r\n            when nds.detector_feed_working = 'No' then 'No Data'\r\n            when sps.sample_ct = 0 or sps.sample_ct is null\r\n                then 'Down/No Data'\r\n            /* # of samples < 60% of the max collected during the test period\r\n            max value: 2 samples per min * 60 mins/hr * 17 hrs in a day == 1224\r\n            btwn 1 and 1224 is too few samples */\r\n            when sps.sample_ct between 1 and (0.6 * ({{ var(\"detector_status_max_sample_value\") }}))\r\n                then 'Insufficient Data'\r\n            when\r\n                awm.station_diagnostic_method_id = 'ramp'\r\n                and\r\n                (sps.zero_vol_ct / sps.sample_ct)\r\n                >= (awm.zero_flow_percent / 100)\r\n                then 'Card Off'\r\n            when\r\n                awm.station_diagnostic_method_id = 'mainline'\r\n                and\r\n                (sps.zero_occ_ct / sps.sample_ct)\r\n                >= (awm.zero_occupancy_percent / 100)\r\n                then 'Card Off'\r\n            when\r\n                awm.station_diagnostic_method_id = 'ramp'\r\n                and\r\n                (sps.high_volume_ct / sps.sample_ct)\r\n                >= (awm.high_flow_percent / 100)\r\n                then 'High Val'\r\n            when\r\n                awm.station_diagnostic_method_id = 'mainline'\r\n                and\r\n                (sps.high_occupancy_ct / sps.sample_ct)\r\n                >= (awm.high_occupancy_percent / 100)\r\n                then 'High Val'\r\n            when\r\n                awm.station_diagnostic_method_id = 'mainline'\r\n                and\r\n                (sps.zero_vol_pos_occ_ct / sps.sample_ct)\r\n                >= (awm.flow_occupancy_percent / 100)\r\n                then 'Intermittent'\r\n            when\r\n                awm.station_diagnostic_method_id = 'mainline'\r\n                and\r\n                (sps.zero_occ_pos_vol_ct / sps.sample_ct)\r\n                >= (awm.occupancy_flow_percent / 100)\r\n                then 'Intermittent'\r\n            when\r\n            -- the float value can not compare with 0, we set a small threshold to replace with it\r\n                coalesce(co.min_occupancy_delta < 0.00001, false)\r\n                and awm.station_diagnostic_method_id = 'mainline'\r\n                then 'Constant'\r\n            --Feed unstable case needed\r\n            else 'Good'\r\n        end as status\r\n\r\n    from assignment_with_meta as awm\r\n\r\n    left join source as sps\r\n        on\r\n            awm.detector_id = sps.detector_id\r\n            -- and awm.lane = sps.lane\r\n            and awm.active_date = sps.sample_date\r\n\r\n    left join {{ ref('int_diagnostics__constant_occupancy') }} as co\r\n        on\r\n            awm.detector_id = co.detector_id\r\n            and awm.active_date = co.sample_date\r\n\r\n    left join {{ ref('int_diagnostics__no_data_status') }} as nds\r\n        on\r\n            awm.active_date = nds.active_date\r\n            and awm.detector_id = nds.detector_id\r\n)\r\n\r\nselect * from detector_status", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}, {"name": "int_vds__detector_config", "package": null, "version": null}, {"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}, {"name": "int_diagnostics__constant_occupancy", "package": null, "version": null}, {"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/int_diagnostics__detector_status.sql", "compiled": true, "compiled_code": "\n\nwith\nsource as (\n    select * from ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\n    where \n    1=1\n    \n),\n\ndetector_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\nset_assgnmt as (\n    select * from ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\n    where\n        active_date between\n        (select min(source.sample_date) from source) and (select max(source.sample_date) from source)\n),\n\nassignment_with_meta as (\n    select\n        set_assgnmt.*,\n        dm.detector_id,\n        dm.detector_type,\n        dm.lane,\n        dm.state_postmile,\n        dm.absolute_postmile,\n        dm.latitude,\n        dm.longitude,\n        dm.physical_lanes,\n        dm.county,\n        dm.city,\n        dm.freeway,\n        dm.direction,\n        dm.length\n    from set_assgnmt\n    inner join detector_meta as dm\n        on\n            set_assgnmt.station_id = dm.station_id\n            and \n\n    set_assgnmt.active_date >= dm._valid_from\n    and ( set_assgnmt.active_date < dm._valid_to or dm._valid_to is null)\n\n\n),\n\ndetector_status as (\n    select\n        awm.active_date,\n        awm.station_id,\n        awm.district,\n        awm.station_type,\n        awm.station_diagnostic_method_id,\n        awm.active_date as sample_date,\n        awm.detector_id,\n        awm.detector_type,\n        awm.lane,\n        awm.state_postmile,\n        awm.absolute_postmile,\n        awm.latitude,\n        awm.longitude,\n        awm.physical_lanes,\n        awm.county,\n        awm.city,\n        awm.freeway,\n        awm.direction,\n        awm.length,\n        sps.* exclude (district, station_id, lane, detector_id, sample_date),\n        nds.district_feed_working,\n        nds.line_num_working,\n        nds.controller_feed_working,\n        nds.station_feed_working,\n        nds.detector_feed_working,\n        co.min_occupancy_delta,\n        case\n            when nds.district_feed_working = 'No' then 'District Feed Down'\n            when nds.line_num_working = 'No' then 'Line Down'\n            when nds.controller_feed_working = 'No' then 'Controller Down'\n            when nds.detector_feed_working = 'No' then 'No Data'\n            when sps.sample_ct = 0 or sps.sample_ct is null\n                then 'Down/No Data'\n            /* # of samples < 60% of the max collected during the test period\n            max value: 2 samples per min * 60 mins/hr * 17 hrs in a day == 1224\n            btwn 1 and 1224 is too few samples */\n            when sps.sample_ct between 1 and (0.6 * (2 * 60 * 17))\n                then 'Insufficient Data'\n            when\n                awm.station_diagnostic_method_id = 'ramp'\n                and\n                (sps.zero_vol_ct / sps.sample_ct)\n                >= (awm.zero_flow_percent / 100)\n                then 'Card Off'\n            when\n                awm.station_diagnostic_method_id = 'mainline'\n                and\n                (sps.zero_occ_ct / sps.sample_ct)\n                >= (awm.zero_occupancy_percent / 100)\n                then 'Card Off'\n            when\n                awm.station_diagnostic_method_id = 'ramp'\n                and\n                (sps.high_volume_ct / sps.sample_ct)\n                >= (awm.high_flow_percent / 100)\n                then 'High Val'\n            when\n                awm.station_diagnostic_method_id = 'mainline'\n                and\n                (sps.high_occupancy_ct / sps.sample_ct)\n                >= (awm.high_occupancy_percent / 100)\n                then 'High Val'\n            when\n                awm.station_diagnostic_method_id = 'mainline'\n                and\n                (sps.zero_vol_pos_occ_ct / sps.sample_ct)\n                >= (awm.flow_occupancy_percent / 100)\n                then 'Intermittent'\n            when\n                awm.station_diagnostic_method_id = 'mainline'\n                and\n                (sps.zero_occ_pos_vol_ct / sps.sample_ct)\n                >= (awm.occupancy_flow_percent / 100)\n                then 'Intermittent'\n            when\n            -- the float value can not compare with 0, we set a small threshold to replace with it\n                coalesce(co.min_occupancy_delta < 0.00001, false)\n                and awm.station_diagnostic_method_id = 'mainline'\n                then 'Constant'\n            --Feed unstable case needed\n            else 'Good'\n        end as status\n\n    from assignment_with_meta as awm\n\n    left join source as sps\n        on\n            awm.detector_id = sps.detector_id\n            -- and awm.lane = sps.lane\n            and awm.active_date = sps.sample_date\n\n    left join ANALYTICS_PRD.diagnostics.int_diagnostics__constant_occupancy as co\n        on\n            awm.detector_id = co.detector_id\n            and awm.active_date = co.sample_date\n\n    left join ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status as nds\n        on\n            awm.active_date = nds.active_date\n            and awm.detector_id = nds.detector_id\n)\n\nselect * from detector_status", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DETECTOR_ID", "SAMPLE_DATE"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "int_diagnostics__constant_occupancy", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/diagnostics/int_diagnostics__constant_occupancy.sql", "original_file_path": "models/intermediate/diagnostics/int_diagnostics__constant_occupancy.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "int_diagnostics__constant_occupancy"], "alias": "int_diagnostics__constant_occupancy", "checksum": {"name": "sha256", "checksum": "0463f6e3594e917c1babe602d2d8ffe894c660215c5c1e96c1e5ca2061ebda8f"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This model calculates constant occupancy by first calculating the delta\nbetween occupancy and previous occupancy. It then takes the absolute\nvalue of that delta and sums that over a window of 48 rows which equates\nto 4 hours (5 min data x 12 = 60 (one hour) then 12 x 4 = 48 which is 4\nhours) where occupancy is not null and not zero. Finally it outputs the\nminimum value grouped by detector_id and sample_date.\n", "columns": {"detector_id": {"name": "detector_id", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "min_occupancy_delta": {"name": "min_occupancy_delta", "description": "Selects the minimum of the abs_val_occupancy_delta_summed column\nwhich takes the absolute value of the delta between occupancy and\nprevious occupancy summed over a window of 4 hours.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "diagnostics", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2998252, "relation_name": "ANALYTICS_PRD.diagnostics.int_diagnostics__constant_occupancy", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=['sample_date'],\r\n    unique_key=['detector_id', 'sample_date'],\r\n    snowflake_warehouse=get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\nwith\r\n\r\nsource as (\r\n    select *\r\n    from {{ ref('int_clearinghouse__detector_agg_five_minutes') }}\r\n    where\r\n        TO_TIME(sample_timestamp) >= {{ var(\"day_start\") }}\r\n        and TO_TIME(sample_timestamp) <= {{ var(\"day_end\") }}\r\n        and {{ make_model_incremental('sample_date') }}\r\n),\r\n\r\n\r\ncalculate_occupancy_delta as (\r\n    select\r\n        detector_id,\r\n        sample_timestamp,\r\n        sample_date,\r\n        occupancy_avg,\r\n        occupancy_avg\r\n        - LAG(occupancy_avg)\r\n            over (partition by detector_id, sample_date order by sample_timestamp)\r\n            as occupancy_delta\r\n    from source\r\n),\r\n\r\nsum_occupancy_delta as (\r\n    select\r\n        *,\r\n        ABS(occupancy_delta) as abs_val_occupancy_delta,\r\n        SUM(abs_val_occupancy_delta)\r\n        /* we are looking at a window of 48 rows because that is a 4 hour window\r\n        (5 min data * 12 = 60 (one hour) then 12 * 4 = 48 which is 4 hours) */\r\n            over (\r\n                partition by detector_id, sample_date\r\n                order by sample_timestamp rows between 47 preceding and current row\r\n            )\r\n            as abs_val_occupancy_delta_summed\r\n    from calculate_occupancy_delta\r\n    qualify\r\n        (occupancy_avg > 0)\r\n        and ROW_NUMBER() over (\r\n            partition by detector_id, sample_date\r\n            order by sample_timestamp\r\n        ) >= 48\r\n\r\n)\r\n\r\nselect\r\n    detector_id,\r\n    sample_date,\r\n    MIN(abs_val_occupancy_delta_summed) as min_occupancy_delta\r\nfrom sum_occupancy_delta\r\ngroup by detector_id, sample_date\r\norder by sample_date", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/int_diagnostics__constant_occupancy.sql", "compiled": true, "compiled_code": "\n\nwith\n\nsource as (\n    select *\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    where\n        TO_TIME(sample_timestamp) >= '05:00:00'\n        and TO_TIME(sample_timestamp) <= '21:59:59'\n        and \n    1=1\n    \n),\n\n\ncalculate_occupancy_delta as (\n    select\n        detector_id,\n        sample_timestamp,\n        sample_date,\n        occupancy_avg,\n        occupancy_avg\n        - LAG(occupancy_avg)\n            over (partition by detector_id, sample_date order by sample_timestamp)\n            as occupancy_delta\n    from source\n),\n\nsum_occupancy_delta as (\n    select\n        *,\n        ABS(occupancy_delta) as abs_val_occupancy_delta,\n        SUM(abs_val_occupancy_delta)\n        /* we are looking at a window of 48 rows because that is a 4 hour window\n        (5 min data * 12 = 60 (one hour) then 12 * 4 = 48 which is 4 hours) */\n            over (\n                partition by detector_id, sample_date\n                order by sample_timestamp rows between 47 preceding and current row\n            )\n            as abs_val_occupancy_delta_summed\n    from calculate_occupancy_delta\n    qualify\n        (occupancy_avg > 0)\n        and ROW_NUMBER() over (\n            partition by detector_id, sample_date\n            order by sample_timestamp\n        ) >= 48\n\n)\n\nselect\n    detector_id,\n    sample_date,\n    MIN(abs_val_occupancy_delta_summed) as min_occupancy_delta\nfrom sum_occupancy_delta\ngroup by detector_id, sample_date\norder by sample_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "int_diagnostics__samples_per_detector", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/diagnostics/int_diagnostics__samples_per_detector.sql", "original_file_path": "models/intermediate/diagnostics/int_diagnostics__samples_per_detector.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "int_diagnostics__samples_per_detector"], "alias": "int_diagnostics__samples_per_detector", "checksum": {"name": "sha256", "checksum": "d415a4e44ca04db14f9201ce2784ac2eaeebaeeb162e03989453e6aaf9347f43"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "sample_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["sample_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This file contains count data by station and lane based on the number of raw data samples\nthat met a variety of flow and occupancy criteria. This data will be used to determine the\ndiagnostic value associated with a detector. This model is unique at the level of SAMPLE_DATE + DETECTOR_ID.\n", "columns": {"sample_date": {"name": "sample_date", "description": "The date associated with raw data samples being counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a route and station from raw data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy\nvalues contain any non-null value\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_ct": {"name": "zero_vol_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) value\nequals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_ct": {"name": "zero_occ_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_vol_pos_occ_ct": {"name": "zero_vol_pos_occ_ct", "description": "Counts the number of raw data samples where a lane's volume (flow)\nvalue equals 0 but occupancy is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "zero_occ_pos_vol_ct": {"name": "zero_occ_pos_vol_ct", "description": "Counts the number of raw data samples where a lane's occupancy\nvalue equals 0 but volume (flow) is greater than 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_volume_ct": {"name": "high_volume_ct", "description": "Counts the number of volume (flow) values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "high_occupancy_ct": {"name": "high_occupancy_ct", "description": "Counts the number of occupancy values in a lane that exceeded the high value threshold\ndetector diagnostic parameter for a station.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "diagnostics", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='sample_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='sample_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.2969415, "relation_name": "ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    cluster_by=['sample_date'],\n    unique_key=['detector_id', 'sample_date'],\n    on_schema_change='sync_all_columns',\n    snowflake_warehouse=get_snowflake_refresh_warehouse(small=\"XL\")\n) }}\n\nwith\n\nsource as (\n    select *\n    from {{ ref ('int_clearinghouse__detector_agg_five_minutes') }}\n    where\n        TO_TIME(sample_timestamp) >= {{ var(\"day_start\") }}\n        and TO_TIME(sample_timestamp) <= {{ var(\"day_end\") }}\n        and {{ make_model_incremental('sample_date') }}\n),\n\nsamples_per_detector as (\n    select\n        source.district,\n        source.station_id,\n        source.lane,\n        source.detector_id,\n        source.sample_date,\n        /*\n        This following counts a sample if the volume (flow) and occupancy values contain any value\n        based on 30 second raw data recieved per station, lane and time. Null values\n        in volume (flow) and occupancy are currently counted as 0 but if these need to be treated\n        differently the code should be updated as needed to accomodate such a scenario.\n        */\n        SUM(source.sample_ct) as sample_ct,\n\n        /*\n        The following code will count how many times a 30 second raw volume (flow) value equals 0\n        for a given station and associated lane\n        */\n        SUM(source.zero_vol_ct) as zero_vol_ct,\n\n        /*\n        The following code will count how many times a 30 second raw occupancy value equals 0\n        for a given station and associated lane\n        */\n        SUM(source.zero_occ_ct) as zero_occ_ct,\n\n        /*\n        This code counts a sample if the volume (flow) is 0 and occupancy value > 0\n        based on 30 second raw data recieved per station, lane, and time.\n        */\n        SUM(zero_vol_pos_occ_ct) as zero_vol_pos_occ_ct,\n\n        /*\n        This code counts a sample if the occupancy is 0 and a volume (flow) value > 0\n        based on 30 second raw data recieved per station, lane and time.\n        */\n        SUM(zero_occ_pos_vol_ct) as zero_occ_pos_vol_ct,\n\n        /*\n        This SQL file counts the number of volume (flow) and occupancy values that exceed\n        detector threshold values for a station based on the station set assignment. For\n        processing optimization a high flow value or 20 and high occupancy value of 0.7\n        have been hardcoded in the formulas below to avoid joining the set assignment model\n        */\n        SUM(high_volume_ct)\n            as high_volume_ct,\n        SUM(high_occupancy_ct)\n            as high_occupancy_ct\n\n    from source\n    group by\n        source.district, source.station_id, source.lane, source.detector_id, source.sample_date\n)\n\nselect * from samples_per_detector", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/int_diagnostics__samples_per_detector.sql", "compiled": true, "compiled_code": "\n\nwith\n\nsource as (\n    select *\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    where\n        TO_TIME(sample_timestamp) >= '05:00:00'\n        and TO_TIME(sample_timestamp) <= '21:59:59'\n        and \n    1=1\n    \n),\n\nsamples_per_detector as (\n    select\n        source.district,\n        source.station_id,\n        source.lane,\n        source.detector_id,\n        source.sample_date,\n        /*\n        This following counts a sample if the volume (flow) and occupancy values contain any value\n        based on 30 second raw data recieved per station, lane and time. Null values\n        in volume (flow) and occupancy are currently counted as 0 but if these need to be treated\n        differently the code should be updated as needed to accomodate such a scenario.\n        */\n        SUM(source.sample_ct) as sample_ct,\n\n        /*\n        The following code will count how many times a 30 second raw volume (flow) value equals 0\n        for a given station and associated lane\n        */\n        SUM(source.zero_vol_ct) as zero_vol_ct,\n\n        /*\n        The following code will count how many times a 30 second raw occupancy value equals 0\n        for a given station and associated lane\n        */\n        SUM(source.zero_occ_ct) as zero_occ_ct,\n\n        /*\n        This code counts a sample if the volume (flow) is 0 and occupancy value > 0\n        based on 30 second raw data recieved per station, lane, and time.\n        */\n        SUM(zero_vol_pos_occ_ct) as zero_vol_pos_occ_ct,\n\n        /*\n        This code counts a sample if the occupancy is 0 and a volume (flow) value > 0\n        based on 30 second raw data recieved per station, lane and time.\n        */\n        SUM(zero_occ_pos_vol_ct) as zero_occ_pos_vol_ct,\n\n        /*\n        This SQL file counts the number of volume (flow) and occupancy values that exceed\n        detector threshold values for a station based on the station set assignment. For\n        processing optimization a high flow value or 20 and high occupancy value of 0.7\n        have been hardcoded in the formulas below to avoid joining the set assignment model\n        */\n        SUM(high_volume_ct)\n            as high_volume_ct,\n        SUM(high_occupancy_ct)\n            as high_occupancy_ct\n\n    from source\n    group by\n        source.district, source.station_id, source.lane, source.detector_id, source.sample_date\n)\n\nselect * from samples_per_detector", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DETECTOR_ID", "SAMPLE_DATE"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "int_diagnostics__no_data_status", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/diagnostics/int_diagnostics__no_data_status.sql", "original_file_path": "models/intermediate/diagnostics/int_diagnostics__no_data_status.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "int_diagnostics__no_data_status"], "alias": "int_diagnostics__no_data_status", "checksum": {"name": "sha256", "checksum": "eed73e5be4dd378d4175bae7cde7698fb339690b1c21a1e741a7d41adc478979"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["detector_id", "active_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": ["active_date"], "snowflake_warehouse": "TRANSFORMING_XL_PRD"}, "tags": [], "description": "This data model is built to perform diagnostic tests related to equipment where no data is being\nrecieved from field devices. The diagnostic checks in this data model are used to determine the\ndetector status in the downstream int_diagnostics__detector_status model.\nThis model is unique at the level of ACTIVE_DATE + DETECTOR_ID.\n", "columns": {"active_date": {"name": "active_date", "description": "Date a station is considered active based on the meta data configuration file from district.\nThis value determines what calculations or diagnostics are associated with a station and it's\nassociated detectors on any given date while it is active.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "An integer value that uniquely indentifies a station.\nUse this value to 'join' other files or tables that contain the Station ID value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num": {"name": "line_num", "description": "The communication line identifier value provided in the district configuration file. Information\nabout communication lines is not always available so this value can be null.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_ct": {"name": "sample_ct", "description": "Counts the number of raw data samples where a lane's volume (flow) and occupancy\nvalues contain any non-null value.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The controller identifier value provided in the district configuration file.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district_feed_working": {"name": "district_feed_working", "description": "Returns No if no detector samples are recieved in a district on a daily basis, otherwise\nYes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num_working": {"name": "line_num_working", "description": "Returns No if no detector samples are recieved on a communication line associated with a\nspecific line and district on a daily basis, otherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_feed_working": {"name": "controller_feed_working", "description": "Returns No if no detector samples are recieved from a controller on a daily basis,\notherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_feed_working": {"name": "station_feed_working", "description": "Returns No if no detector samples are recieved from a station on a daily basis,\notherwise Yes is returned.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_feed_working": {"name": "detector_feed_working", "description": "Returns No if a detector send no samples to PeMS on a daily basis, otherwise Yes is\nreturned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/diagnostics/_diagnostics.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "diagnostics", "cluster_by": "Keyword(key='cluster_by', value=List(items=[Const(value='active_date')]))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='detector_id'), Const(value='active_date')]))", "on_schema_change": "Keyword(key='on_schema_change', value=Const(value='sync_all_columns'))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.3010674, "relation_name": "ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status", "raw_code": "{{ config(\r\n    materialized=\"incremental\",\r\n    cluster_by=[\"active_date\"],\r\n    unique_key=[\"detector_id\", \"active_date\"],\r\n    on_schema_change=\"sync_all_columns\",\r\n    snowflake_warehouse=get_snowflake_refresh_warehouse(small=\"XL\")\r\n) }}\r\n\r\nwith\r\nsource as (\r\n    select\r\n        sample_date as active_date,\r\n        * exclude sample_date\r\n    from {{ ref('int_diagnostics__samples_per_detector') }}\r\n    where {{ make_model_incremental('active_date') }}\r\n),\r\n\r\ndetector_meta as (\r\n    select * from {{ ref('int_vds__active_detectors') }}\r\n),\r\n\r\nstation_meta as (\r\n    select * from {{ ref('int_vds__station_config') }}\r\n),\r\n\r\ncontroller_meta as (\r\n    select * from {{ ref('int_vds__controller_config') }}\r\n),\r\n\r\nequipment_meta as (\r\n    select\r\n        dm.*,\r\n        sm.controller_id,\r\n        sm.name,\r\n        sm.angle,\r\n        cm.line_num,\r\n        cm.stn_address,\r\n        cm.controller_type\r\n    from detector_meta as dm\r\n    inner join station_meta as sm\r\n        on\r\n            dm.station_id = sm.station_id\r\n            and {{ get_scd_2_data('dm.active_date','sm._valid_from','sm._valid_to') }}\r\n    inner join controller_meta as cm\r\n        on\r\n            sm.controller_id = cm.controller_id\r\n            and {{ get_scd_2_data('dm.active_date','cm._valid_from','cm._valid_to') }}\r\n    -- Constrain dates to not exceed those in the samples_per_detector model.\r\n    where\r\n        dm.active_date between\r\n        (select min(source.active_date) from source) and (select max(source.active_date) from source)\r\n),\r\n\r\nequipment_with_samples as (\r\n    select\r\n        em.*,\r\n        source.sample_ct\r\n    from equipment_meta as em\r\n    left join source\r\n        on\r\n            em.detector_id = source.detector_id\r\n            and em.active_date = source.active_date\r\n),\r\n\r\ndistrict_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.district,\r\n        case\r\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\r\n            else 'No'\r\n        end as district_feed_working\r\n    from equipment_with_samples as ews\r\n    inner join {{ ref('districts') }} as d\r\n        on ews.district = d.district_id\r\n    group by ews.active_date, ews.district\r\n),\r\n\r\nline_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.district,\r\n        ews.line_num,\r\n        case\r\n            when ews.line_num is null then 'Yes'\r\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\r\n            else 'No'\r\n        end as line_num_working\r\n    from equipment_with_samples as ews\r\n    group by ews.active_date, ews.district, ews.line_num\r\n),\r\n\r\ncontroller_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.district,\r\n        ews.controller_id,\r\n        case\r\n            when ews.controller_id is null then 'Yes'\r\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\r\n            else 'No'\r\n        end as controller_feed_working\r\n    from equipment_with_samples as ews\r\n    group by ews.active_date, ews.district, ews.controller_id\r\n),\r\n\r\nstation_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.district,\r\n        ews.station_id,\r\n        case\r\n            when ews.station_id is null then 'Yes'\r\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\r\n            else 'No'\r\n        end as station_feed_working\r\n    from equipment_with_samples as ews\r\n    group by ews.active_date, ews.district, ews.station_id\r\n),\r\n\r\ndetector_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.detector_id,\r\n        case\r\n            when ews.detector_id is null then 'Yes'\r\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\r\n            else 'No'\r\n        end as detector_feed_working\r\n    from equipment_with_samples as ews\r\n    group by ews.active_date, ews.detector_id\r\n),\r\n\r\ndata_feed_check as (\r\n    select\r\n        ews.active_date,\r\n        ews.district,\r\n        ews.line_num,\r\n        ews.controller_id,\r\n        ews.station_id,\r\n        ews.detector_id,\r\n        ews.sample_ct,\r\n        dfc.district_feed_working,\r\n        lfc.line_num_working,\r\n        cfc.controller_feed_working,\r\n        sfc.station_feed_working,\r\n        detfc.detector_feed_working\r\n    from equipment_with_samples as ews\r\n    left join district_feed_check as dfc\r\n        on\r\n            ews.active_date = dfc.active_date\r\n            and ews.district = dfc.district\r\n    left join line_feed_check as lfc\r\n        on\r\n            ews.active_date = lfc.active_date\r\n            and ews.district = lfc.district\r\n            and ews.line_num = lfc.line_num\r\n    left join controller_feed_check as cfc\r\n        on\r\n            ews.active_date = cfc.active_date\r\n            and ews.district = cfc.district\r\n            and ews.controller_id = cfc.controller_id\r\n    left join station_feed_check as sfc\r\n        on\r\n            ews.active_date = sfc.active_date\r\n            and ews.district = sfc.district\r\n            and ews.station_id = sfc.station_id\r\n    left join detector_feed_check as detfc\r\n        on\r\n            ews.active_date = detfc.active_date\r\n            and ews.detector_id = detfc.detector_id\r\n)\r\n\r\nselect * from data_feed_check\r\norder by active_date, district, line_num, controller_id, station_id, detector_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}, {"name": "int_vds__active_detectors", "package": null, "version": null}, {"name": "int_vds__station_config", "package": null, "version": null}, {"name": "int_vds__controller_config", "package": null, "version": null}, {"name": "districts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "seed.caldata_mdsa_caltrans_pems.districts"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/int_diagnostics__no_data_status.sql", "compiled": true, "compiled_code": "\n\nwith\nsource as (\n    select\n        sample_date as active_date,\n        * exclude sample_date\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\n    where \n    1=1\n    \n),\n\ndetector_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__active_detectors\n),\n\nstation_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\ncontroller_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__controller_config\n),\n\nequipment_meta as (\n    select\n        dm.*,\n        sm.controller_id,\n        sm.name,\n        sm.angle,\n        cm.line_num,\n        cm.stn_address,\n        cm.controller_type\n    from detector_meta as dm\n    inner join station_meta as sm\n        on\n            dm.station_id = sm.station_id\n            and \n\n    dm.active_date >= sm._valid_from\n    and ( dm.active_date < sm._valid_to or sm._valid_to is null)\n\n\n    inner join controller_meta as cm\n        on\n            sm.controller_id = cm.controller_id\n            and \n\n    dm.active_date >= cm._valid_from\n    and ( dm.active_date < cm._valid_to or cm._valid_to is null)\n\n\n    -- Constrain dates to not exceed those in the samples_per_detector model.\n    where\n        dm.active_date between\n        (select min(source.active_date) from source) and (select max(source.active_date) from source)\n),\n\nequipment_with_samples as (\n    select\n        em.*,\n        source.sample_ct\n    from equipment_meta as em\n    left join source\n        on\n            em.detector_id = source.detector_id\n            and em.active_date = source.active_date\n),\n\ndistrict_feed_check as (\n    select\n        ews.active_date,\n        ews.district,\n        case\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\n            else 'No'\n        end as district_feed_working\n    from equipment_with_samples as ews\n    inner join ANALYTICS_PRD.clearinghouse.districts as d\n        on ews.district = d.district_id\n    group by ews.active_date, ews.district\n),\n\nline_feed_check as (\n    select\n        ews.active_date,\n        ews.district,\n        ews.line_num,\n        case\n            when ews.line_num is null then 'Yes'\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\n            else 'No'\n        end as line_num_working\n    from equipment_with_samples as ews\n    group by ews.active_date, ews.district, ews.line_num\n),\n\ncontroller_feed_check as (\n    select\n        ews.active_date,\n        ews.district,\n        ews.controller_id,\n        case\n            when ews.controller_id is null then 'Yes'\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\n            else 'No'\n        end as controller_feed_working\n    from equipment_with_samples as ews\n    group by ews.active_date, ews.district, ews.controller_id\n),\n\nstation_feed_check as (\n    select\n        ews.active_date,\n        ews.district,\n        ews.station_id,\n        case\n            when ews.station_id is null then 'Yes'\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\n            else 'No'\n        end as station_feed_working\n    from equipment_with_samples as ews\n    group by ews.active_date, ews.district, ews.station_id\n),\n\ndetector_feed_check as (\n    select\n        ews.active_date,\n        ews.detector_id,\n        case\n            when ews.detector_id is null then 'Yes'\n            when (count_if(ews.sample_ct > 0)) > 0 then 'Yes'\n            else 'No'\n        end as detector_feed_working\n    from equipment_with_samples as ews\n    group by ews.active_date, ews.detector_id\n),\n\ndata_feed_check as (\n    select\n        ews.active_date,\n        ews.district,\n        ews.line_num,\n        ews.controller_id,\n        ews.station_id,\n        ews.detector_id,\n        ews.sample_ct,\n        dfc.district_feed_working,\n        lfc.line_num_working,\n        cfc.controller_feed_working,\n        sfc.station_feed_working,\n        detfc.detector_feed_working\n    from equipment_with_samples as ews\n    left join district_feed_check as dfc\n        on\n            ews.active_date = dfc.active_date\n            and ews.district = dfc.district\n    left join line_feed_check as lfc\n        on\n            ews.active_date = lfc.active_date\n            and ews.district = lfc.district\n            and ews.line_num = lfc.line_num\n    left join controller_feed_check as cfc\n        on\n            ews.active_date = cfc.active_date\n            and ews.district = cfc.district\n            and ews.controller_id = cfc.controller_id\n    left join station_feed_check as sfc\n        on\n            ews.active_date = sfc.active_date\n            and ews.district = sfc.district\n            and ews.station_id = sfc.station_id\n    left join detector_feed_check as detfc\n        on\n            ews.active_date = detfc.active_date\n            and ews.detector_id = detfc.detector_id\n)\n\nselect * from data_feed_check\norder by active_date, district, line_num, controller_id, station_id, detector_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ACTIVE_DATE", "DETECTOR_ID"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_db96__detector_agg_five_minutes": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "int_db96__detector_agg_five_minutes", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/db96/int_db96__detector_agg_five_minutes.sql", "original_file_path": "models/intermediate/db96/int_db96__detector_agg_five_minutes.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_db96__detector_agg_five_minutes", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "db96", "int_db96__detector_agg_five_minutes"], "alias": "int_db96__detector_agg_five_minutes", "checksum": {"name": "sha256", "checksum": "6bc76c99980f6391c6c4f700fd6617827218748fdbc57a741056cbbacb2369cb"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "lane", "sample_timestamp", "sample_date"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": "sample_date", "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "Raw 30 second sample data aggregated to the 5 minute level.\nVolume values are summed, occupancy is averaged.\n", "columns": {"district": {"name": "district", "description": "The district in which the VDS is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "The station ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date on which the sample was taken.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_timestamp": {"name": "sample_timestamp", "description": "The timestamp of the start for the 5 minute aggregated samples.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane associated with a route and station from raw data.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "flow": {"name": "flow", "description": "Number of vehicle that passed over the detector during the sample period for the lane.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy": {"name": "occupancy", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed": {"name": "speed", "description": "Speed in the lane as measured by the detector in miles/hour.\nWeighted by count of samples in each period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "db96", "cluster_by": "Keyword(key='cluster_by', value=Const(value='sample_date'))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='id'), Const(value='lane'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.3709483, "relation_name": "ANALYTICS_PRD.db96.int_db96__detector_agg_five_minutes", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    cluster_by=\"sample_date\",\n    unique_key=[\"id\", \"lane\", \"sample_timestamp\",\"sample_date\"],\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\", big=\"XL\")\n) }}\n{% set n_lanes = 14 %}\n\nwith raw as (\n    select\n        *,\n        /* Create a timestamp truncated down to the nearest five\n         minute bucket. This will be the the timestamp on which\n         we aggregate. If a 30-second interval straddles two different\n         buckets, it will be assigned to the one latter one due to\n         the floor() call.\n        */\n        dateadd(\n            'minute',\n            floor(minute(sample_timestamp) / 5) * 5,\n            trunc(sample_timestamp, 'hour')\n        ) as sample_timestamp_trunc\n    from {{ ref(\"stg_db96__vds30sec\") }}\n    where {{ make_model_incremental('sample_date') }}\n),\n\nagg as (\n    select\n        id,\n        sample_date,\n        sample_timestamp_trunc as sample_timestamp,\n        district,\n        {% for lane in range(1, n_lanes+1) %}\n            sum(volume_{{ lane }}) as volume_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            avg(occupancy_{{ lane }}) as occupancy_{{ lane }},\n        {% endfor %}\n        {% for lane in range(1, n_lanes+1) %}\n            avg(speed_{{ lane }}) as speed_{{ lane }}\n            {% if not loop.last %}\n                ,\n            {% endif %}\n        {% endfor %}\n    from raw\n    group by id, sample_date, sample_timestamp_trunc, district\n),\n\n{% for lane in range(1, n_lanes+1) %}\n    agg_{{ lane }} as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            {{ lane }} as lane,\n            volume_{{ lane }} as flow,\n            occupancy_{{ lane }} as occupancy,\n            speed_{{ lane }} as speed\n        from agg\n    ),\n{% endfor %}\n\nagg_unioned as (\n    {% for lane in range(1, n_lanes+1) %}\n        select * from agg_{{ lane }}\n        {{ \"union all\" if not loop.last }}\n    {% endfor %}\n)\n\nselect * from agg_unioned", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__vds30sec", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/db96/int_db96__detector_agg_five_minutes.sql", "compiled": true, "compiled_code": "\n\n\nwith raw as (\n    select\n        *,\n        /* Create a timestamp truncated down to the nearest five\n         minute bucket. This will be the the timestamp on which\n         we aggregate. If a 30-second interval straddles two different\n         buckets, it will be assigned to the one latter one due to\n         the floor() call.\n        */\n        dateadd(\n            'minute',\n            floor(minute(sample_timestamp) / 5) * 5,\n            trunc(sample_timestamp, 'hour')\n        ) as sample_timestamp_trunc\n    from ANALYTICS_PRD.db96.stg_db96__vds30sec\n    where \n    1=1\n    \n),\n\nagg as (\n    select\n        id,\n        sample_date,\n        sample_timestamp_trunc as sample_timestamp,\n        district,\n        \n            sum(volume_1) as volume_1,\n        \n            sum(volume_2) as volume_2,\n        \n            sum(volume_3) as volume_3,\n        \n            sum(volume_4) as volume_4,\n        \n            sum(volume_5) as volume_5,\n        \n            sum(volume_6) as volume_6,\n        \n            sum(volume_7) as volume_7,\n        \n            sum(volume_8) as volume_8,\n        \n            sum(volume_9) as volume_9,\n        \n            sum(volume_10) as volume_10,\n        \n            sum(volume_11) as volume_11,\n        \n            sum(volume_12) as volume_12,\n        \n            sum(volume_13) as volume_13,\n        \n            sum(volume_14) as volume_14,\n        \n        \n            avg(occupancy_1) as occupancy_1,\n        \n            avg(occupancy_2) as occupancy_2,\n        \n            avg(occupancy_3) as occupancy_3,\n        \n            avg(occupancy_4) as occupancy_4,\n        \n            avg(occupancy_5) as occupancy_5,\n        \n            avg(occupancy_6) as occupancy_6,\n        \n            avg(occupancy_7) as occupancy_7,\n        \n            avg(occupancy_8) as occupancy_8,\n        \n            avg(occupancy_9) as occupancy_9,\n        \n            avg(occupancy_10) as occupancy_10,\n        \n            avg(occupancy_11) as occupancy_11,\n        \n            avg(occupancy_12) as occupancy_12,\n        \n            avg(occupancy_13) as occupancy_13,\n        \n            avg(occupancy_14) as occupancy_14,\n        \n        \n            avg(speed_1) as speed_1\n            \n                ,\n            \n        \n            avg(speed_2) as speed_2\n            \n                ,\n            \n        \n            avg(speed_3) as speed_3\n            \n                ,\n            \n        \n            avg(speed_4) as speed_4\n            \n                ,\n            \n        \n            avg(speed_5) as speed_5\n            \n                ,\n            \n        \n            avg(speed_6) as speed_6\n            \n                ,\n            \n        \n            avg(speed_7) as speed_7\n            \n                ,\n            \n        \n            avg(speed_8) as speed_8\n            \n                ,\n            \n        \n            avg(speed_9) as speed_9\n            \n                ,\n            \n        \n            avg(speed_10) as speed_10\n            \n                ,\n            \n        \n            avg(speed_11) as speed_11\n            \n                ,\n            \n        \n            avg(speed_12) as speed_12\n            \n                ,\n            \n        \n            avg(speed_13) as speed_13\n            \n                ,\n            \n        \n            avg(speed_14) as speed_14\n            \n        \n    from raw\n    group by id, sample_date, sample_timestamp_trunc, district\n),\n\n\n    agg_1 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            1 as lane,\n            volume_1 as flow,\n            occupancy_1 as occupancy,\n            speed_1 as speed\n        from agg\n    ),\n\n    agg_2 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            2 as lane,\n            volume_2 as flow,\n            occupancy_2 as occupancy,\n            speed_2 as speed\n        from agg\n    ),\n\n    agg_3 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            3 as lane,\n            volume_3 as flow,\n            occupancy_3 as occupancy,\n            speed_3 as speed\n        from agg\n    ),\n\n    agg_4 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            4 as lane,\n            volume_4 as flow,\n            occupancy_4 as occupancy,\n            speed_4 as speed\n        from agg\n    ),\n\n    agg_5 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            5 as lane,\n            volume_5 as flow,\n            occupancy_5 as occupancy,\n            speed_5 as speed\n        from agg\n    ),\n\n    agg_6 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            6 as lane,\n            volume_6 as flow,\n            occupancy_6 as occupancy,\n            speed_6 as speed\n        from agg\n    ),\n\n    agg_7 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            7 as lane,\n            volume_7 as flow,\n            occupancy_7 as occupancy,\n            speed_7 as speed\n        from agg\n    ),\n\n    agg_8 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            8 as lane,\n            volume_8 as flow,\n            occupancy_8 as occupancy,\n            speed_8 as speed\n        from agg\n    ),\n\n    agg_9 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            9 as lane,\n            volume_9 as flow,\n            occupancy_9 as occupancy,\n            speed_9 as speed\n        from agg\n    ),\n\n    agg_10 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            10 as lane,\n            volume_10 as flow,\n            occupancy_10 as occupancy,\n            speed_10 as speed\n        from agg\n    ),\n\n    agg_11 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            11 as lane,\n            volume_11 as flow,\n            occupancy_11 as occupancy,\n            speed_11 as speed\n        from agg\n    ),\n\n    agg_12 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            12 as lane,\n            volume_12 as flow,\n            occupancy_12 as occupancy,\n            speed_12 as speed\n        from agg\n    ),\n\n    agg_13 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            13 as lane,\n            volume_13 as flow,\n            occupancy_13 as occupancy,\n            speed_13 as speed\n        from agg\n    ),\n\n    agg_14 as (\n        select\n            id,\n            sample_date,\n            sample_timestamp,\n            district,\n            14 as lane,\n            volume_14 as flow,\n            occupancy_14 as occupancy,\n            speed_14 as speed\n        from agg\n    ),\n\n\nagg_unioned as (\n    \n        select * from agg_1\n        union all\n    \n        select * from agg_2\n        union all\n    \n        select * from agg_3\n        union all\n    \n        select * from agg_4\n        union all\n    \n        select * from agg_5\n        union all\n    \n        select * from agg_6\n        union all\n    \n        select * from agg_7\n        union all\n    \n        select * from agg_8\n        union all\n    \n        select * from agg_9\n        union all\n    \n        select * from agg_10\n        union all\n    \n        select * from agg_11\n        union all\n    \n        select * from agg_12\n        union all\n    \n        select * from agg_13\n        union all\n    \n        select * from agg_14\n        \n    \n)\n\nselect * from agg_unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__nearby_stations", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__nearby_stations.sql", "original_file_path": "models/intermediate/vds/int_vds__nearby_stations.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__nearby_stations"], "alias": "int_vds__nearby_stations", "checksum": {"name": "sha256", "checksum": "386b219323568db57d45e8cf2665cab5cd2bf18d99e349331a7d60e24946a329"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The model employs postmile-based distance metrics to identify nearby stations, specifically\nfocusing on HOV and Mainline stations. This approach calculates distances between a target\nstation and its upstream and downstream counterparts, using these distances to pinpoint\nsecondary stations for data imputation purposes. For local regression, it utilizes the nearest\nupstream and downstream stations, while regional regression incorporates all stations within\na 5-mile radius. This dual regression strategy aims to predict or analyze station-related data,\nleveraging both spatial proximity and statistical techniques to enhance understanding and\nplanning within transportation contexts.\n\nThis model is unique at the level of DETECTOR_ID + OTHER_STATION_ID +_VALID_TO.\n", "columns": {"station_id": {"name": "station_id", "description": "The ID of the station to which the detector is connected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_from": {"name": "_valid_from", "description": "The timestamp from which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_to": {"name": "_valid_to", "description": "The timestamp to which this row is valid. If it is still valid, this is `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DELTA_POSTMILE": {"name": "DELTA_POSTMILE", "description": "The difference in absolute postmile between the two stations. A positive\ndelta_postmile indicates that `other_id` is downstream (greater postmile)\nfrom id.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OTHER_STATION_ID": {"name": "OTHER_STATION_ID", "description": "The ID of upstream and downstream stations of the targetted station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OTHER_STATION_IS_LOCAL": {"name": "OTHER_STATION_IS_LOCAL", "description": "A boolean function that indicates wheather other statoin is local or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTANCE_RANKING": {"name": "DISTANCE_RANKING", "description": "The station was ranked based on absolute ascending distance value from\ntargetted station to upstream and downstream stations in purpose of identifying local,\nand regional stations for imputation.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "schema": "vds"}, "created_at": 1755632024.3791254, "relation_name": "ANALYTICS_PRD.vds.int_vds__nearby_stations", "raw_code": "{{ config(materialized=\"table\") }}\r\n\r\nwith station_meta as (\r\n    select * from {{ ref('int_vds__station_config') }}\r\n),\r\n\r\nstation_pairs as (\r\n    select\r\n        a.station_id,\r\n        b.station_id as other_station_id,\r\n        a.district,\r\n        a.freeway,\r\n        a.direction,\r\n        a.station_type,\r\n        b.absolute_postmile - a.absolute_postmile as delta_postmile,\r\n        a._valid_from,\r\n        a._valid_to\r\n    from station_meta as a\r\n    inner join station_meta as b\r\n        on\r\n            a.freeway = b.freeway and a.direction = b.direction and a.station_type = b.station_type\r\n            and a._valid_from = b._valid_from\r\n    -- Most performance metrics are restricted to mainline and HV lanes.\r\n    -- Furthermore, when looking at upstream and downstream stations, it\r\n    -- does not make sense to include, e.g., ramps. So for the time being\r\n    -- we restrict this table to HV and ML.\r\n    where a.station_type in ('HV', 'ML')\r\n),\r\n\r\nnearest_downstream_station_pairs as (\r\n    select\r\n        station_id,\r\n        other_station_id,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        station_type,\r\n        delta_postmile,\r\n        _valid_from,\r\n        _valid_to,\r\n        row_number() over (partition by station_id, _valid_from order by abs(delta_postmile) asc)\r\n            as distance_ranking\r\n    from station_pairs\r\n    where\r\n        delta_postmile > 0\r\n        and delta_postmile <= 5.0\r\n        and station_id != other_station_id\r\n),\r\n\r\nnearest_upstream_station_pairs as (\r\n    select\r\n        station_id,\r\n        other_station_id,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        station_type,\r\n        delta_postmile,\r\n        _valid_from,\r\n        _valid_to,\r\n        row_number() over (partition by station_id, _valid_from order by abs(delta_postmile) asc)\r\n            as distance_ranking\r\n    from station_pairs\r\n    where\r\n        delta_postmile < 0\r\n        and delta_postmile >= -5.0\r\n        and station_id != other_station_id\r\n),\r\n\r\nself_pairs as (\r\n    select\r\n        *,\r\n        0 as distance_ranking\r\n    from station_pairs\r\n    where station_id = other_station_id\r\n),\r\n\r\nnearest_station_pairs as (\r\n    select\r\n        station_id,\r\n        other_station_id,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        station_type,\r\n        delta_postmile,\r\n        _valid_from,\r\n        _valid_to,\r\n        distance_ranking\r\n    from self_pairs\r\n    union all\r\n    select\r\n        station_id,\r\n        other_station_id,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        station_type,\r\n        delta_postmile,\r\n        _valid_from,\r\n        _valid_to,\r\n        distance_ranking\r\n    from nearest_downstream_station_pairs\r\n    union all\r\n    select\r\n        station_id,\r\n        other_station_id,\r\n        district,\r\n        freeway,\r\n        direction,\r\n        station_type,\r\n        delta_postmile,\r\n        _valid_from,\r\n        _valid_to,\r\n        distance_ranking\r\n    from nearest_upstream_station_pairs\r\n    order by district asc, freeway asc, station_id asc\r\n),\r\n\r\n-- assign the tag that is qulified for local and regional regression\r\nnearest_station_pairs_with_tag as (\r\n    select\r\n        *,\r\n        distance_ranking <= 1 as other_station_is_local\r\n    from nearest_station_pairs\r\n)\r\n\r\nselect * from nearest_station_pairs_with_tag", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__nearby_stations.sql", "compiled": true, "compiled_code": "\n\nwith station_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\nstation_pairs as (\n    select\n        a.station_id,\n        b.station_id as other_station_id,\n        a.district,\n        a.freeway,\n        a.direction,\n        a.station_type,\n        b.absolute_postmile - a.absolute_postmile as delta_postmile,\n        a._valid_from,\n        a._valid_to\n    from station_meta as a\n    inner join station_meta as b\n        on\n            a.freeway = b.freeway and a.direction = b.direction and a.station_type = b.station_type\n            and a._valid_from = b._valid_from\n    -- Most performance metrics are restricted to mainline and HV lanes.\n    -- Furthermore, when looking at upstream and downstream stations, it\n    -- does not make sense to include, e.g., ramps. So for the time being\n    -- we restrict this table to HV and ML.\n    where a.station_type in ('HV', 'ML')\n),\n\nnearest_downstream_station_pairs as (\n    select\n        station_id,\n        other_station_id,\n        district,\n        freeway,\n        direction,\n        station_type,\n        delta_postmile,\n        _valid_from,\n        _valid_to,\n        row_number() over (partition by station_id, _valid_from order by abs(delta_postmile) asc)\n            as distance_ranking\n    from station_pairs\n    where\n        delta_postmile > 0\n        and delta_postmile <= 5.0\n        and station_id != other_station_id\n),\n\nnearest_upstream_station_pairs as (\n    select\n        station_id,\n        other_station_id,\n        district,\n        freeway,\n        direction,\n        station_type,\n        delta_postmile,\n        _valid_from,\n        _valid_to,\n        row_number() over (partition by station_id, _valid_from order by abs(delta_postmile) asc)\n            as distance_ranking\n    from station_pairs\n    where\n        delta_postmile < 0\n        and delta_postmile >= -5.0\n        and station_id != other_station_id\n),\n\nself_pairs as (\n    select\n        *,\n        0 as distance_ranking\n    from station_pairs\n    where station_id = other_station_id\n),\n\nnearest_station_pairs as (\n    select\n        station_id,\n        other_station_id,\n        district,\n        freeway,\n        direction,\n        station_type,\n        delta_postmile,\n        _valid_from,\n        _valid_to,\n        distance_ranking\n    from self_pairs\n    union all\n    select\n        station_id,\n        other_station_id,\n        district,\n        freeway,\n        direction,\n        station_type,\n        delta_postmile,\n        _valid_from,\n        _valid_to,\n        distance_ranking\n    from nearest_downstream_station_pairs\n    union all\n    select\n        station_id,\n        other_station_id,\n        district,\n        freeway,\n        direction,\n        station_type,\n        delta_postmile,\n        _valid_from,\n        _valid_to,\n        distance_ranking\n    from nearest_upstream_station_pairs\n    order by district asc, freeway asc, station_id asc\n),\n\n-- assign the tag that is qulified for local and regional regression\nnearest_station_pairs_with_tag as (\n    select\n        *,\n        distance_ranking <= 1 as other_station_is_local\n    from nearest_station_pairs\n)\n\nselect * from nearest_station_pairs_with_tag", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["OTHER_STATION_ID"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__detector_config": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__detector_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__detector_config.sql", "original_file_path": "models/intermediate/vds/int_vds__detector_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__detector_config"], "alias": "int_vds__detector_config", "checksum": {"name": "sha256", "checksum": "05f38ae4e3cb3f2d4d9fc79968006614e8a7491c2d5e50461a25b39189550c2d"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Metadata for a single loop detector. This is the device that actually records\nflow, occupancy, and speed, and is typically installed in a single lane.\nMultiple detectors across a set of lanes constitute a station.\n\nUnlike the equivalent configuration models for controller and station,\nthis metadata model is further joined with metadata for each detector's\nstation. This adds some further denormalization to the table, but is a\npractical response to so many downstream metrics relying on station metadata.\n\nThis table is a slowly-changing-dimension-2, meaning that it has multiple\ndifferent versions of the metadata for each controller, with `_valid_from`\nand `_valid_to` datetime columns indicating when the version is correct.\n\nThis model is unique at the level of DETECTOR_ID + _VALID_TO.\n", "columns": {"detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "The ID of the station to which the detector is connected", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "The lane number of the detector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "The type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_from": {"name": "_valid_from", "description": "The timestamp from which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_to": {"name": "_valid_to", "description": "The timestamp to which this row is valid. If it is still valid, this is `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "State postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "Number of physical lanes at the detector's station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "vds"}, "created_at": 1755632024.3769014, "relation_name": "ANALYTICS_PRD.vds.int_vds__detector_config", "raw_code": "{{ config(materialized='table') }}\n\nwith config_log as (\n    select * from {{ ref('stg_db96__detector_config_log') }}\n),\n\nconfig as (\n    select * from {{ ref('stg_db96__detector_config') }}\n),\n\nstation_config as (\n    select * from {{ ref('int_vds__station_config') }}\n),\n\nconfig_log_with_validity as (\n    select\n        *,\n        time_id as _valid_from,\n        lead(time_id) over (partition by detector_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.detector_id,\n        config_log_with_validity.station_id,\n        config_log_with_validity.status,\n        config_log_with_validity.lane,\n        config.detector_type,\n        station_config.station_type,\n        station_config.district,\n        station_config.county,\n        station_config.city,\n        station_config.freeway,\n        station_config.direction,\n        station_config.length,\n        station_config.state_postmile,\n        station_config.absolute_postmile,\n        station_config.latitude,\n        station_config.longitude,\n        station_config.physical_lanes,\n        config_log_with_validity._valid_from,\n        config_log_with_validity._valid_to\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.detector_id = config.detector_id\n    left join station_config\n        on\n            config_log_with_validity.station_id = station_config.station_id\n            and\n            {{ get_scd_2_data('config_log_with_validity._valid_from',\n            'station_config._valid_from','station_config._valid_to') }}\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__detector_config_log", "package": null, "version": null}, {"name": "stg_db96__detector_config", "package": null, "version": null}, {"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log", "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__detector_config.sql", "compiled": true, "compiled_code": "\n\nwith config_log as (\n    select * from ANALYTICS_PRD.db96.stg_db96__detector_config_log\n),\n\nconfig as (\n    select * from ANALYTICS_PRD.db96.stg_db96__detector_config\n),\n\nstation_config as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\nconfig_log_with_validity as (\n    select\n        *,\n        time_id as _valid_from,\n        lead(time_id) over (partition by detector_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.detector_id,\n        config_log_with_validity.station_id,\n        config_log_with_validity.status,\n        config_log_with_validity.lane,\n        config.detector_type,\n        station_config.station_type,\n        station_config.district,\n        station_config.county,\n        station_config.city,\n        station_config.freeway,\n        station_config.direction,\n        station_config.length,\n        station_config.state_postmile,\n        station_config.absolute_postmile,\n        station_config.latitude,\n        station_config.longitude,\n        station_config.physical_lanes,\n        config_log_with_validity._valid_from,\n        config_log_with_validity._valid_to\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.detector_id = config.detector_id\n    left join station_config\n        on\n            config_log_with_validity.station_id = station_config.station_id\n            and\n            \n\n    config_log_with_validity._valid_from >= station_config._valid_from\n    and ( config_log_with_validity._valid_from < station_config._valid_to or station_config._valid_to is null)\n\n\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DETECTOR_ID", "_VALID_TO"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__station_config": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__station_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__station_config.sql", "original_file_path": "models/intermediate/vds/int_vds__station_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__station_config"], "alias": "int_vds__station_config", "checksum": {"name": "sha256", "checksum": "85414755346983bfaa3f325f3000ebb8c6b615a3c279cc2877babcc6068a7fe1"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Metadata for a single VDS station. Multiple stations may be connected to\na single controller, and multiple detectors may be connected to a single station.\n\nThis table is a slowly-changing-dimension-2, meaning that it has multiple\ndifferent versions of the metadata for each controller, with `_valid_from`\nand `_valid_to` datetime columns indicating when the version is correct.\n\nThis model is unique at the level of STATION_ID + _VALID_TO.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "use_speed": {"name": "use_speed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dt_set_id": {"name": "dt_set_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_start": {"name": "segment_start", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_end": {"name": "segment_end", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The ID of the controller to which the station is attached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_from": {"name": "_valid_from", "description": "The timestamp from which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_to": {"name": "_valid_to", "description": "The timestamp to which this row is valid. If it is still valid, this is `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "schema": "vds"}, "created_at": 1755632024.37553, "relation_name": "ANALYTICS_PRD.vds.int_vds__station_config", "raw_code": "{{ config(materialized='table') }}\n\nwith config_log as (\n    select * from {{ ref('stg_db96__station_config_log') }}\n),\n\nconfig as (\n    select * from {{ ref('stg_db96__station_config') }}\n),\n\nconfig_log_with_validity as (\n    select\n        * exclude (time_id),\n        time_id as _valid_from,\n        lead(time_id) over (partition by station_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.*,\n        config.station_type,\n        config.district,\n        config.county,\n        config.city,\n        config.freeway,\n        config.direction\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.station_id = config.station_id\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__station_config_log", "package": null, "version": null}, {"name": "stg_db96__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log", "model.caldata_mdsa_caltrans_pems.stg_db96__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__station_config.sql", "compiled": true, "compiled_code": "\n\nwith config_log as (\n    select * from ANALYTICS_PRD.db96.stg_db96__station_config_log\n),\n\nconfig as (\n    select * from ANALYTICS_PRD.db96.stg_db96__station_config\n),\n\nconfig_log_with_validity as (\n    select\n        * exclude (time_id),\n        time_id as _valid_from,\n        lead(time_id) over (partition by station_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.*,\n        config.station_type,\n        config.district,\n        config.county,\n        config.city,\n        config.freeway,\n        config.direction\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.station_id = config.station_id\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["STATION_ID", "_VALID_TO"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__active_detectors", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__active_detectors.sql", "original_file_path": "models/intermediate/vds/int_vds__active_detectors.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__active_detectors"], "alias": "int_vds__active_detectors", "checksum": {"name": "sha256", "checksum": "0914b11deb2ff705c3c627ad74706bb2e2515094fbae37e63463cbbcfc0cfcfc"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Contains detector metadata for all detectors that were designated active on any\ngiven day.\n", "columns": {"active_date": {"name": "active_date", "description": "Date the detector was active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "Unique identifier for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "Station ID to which the detector is connected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "Lane number of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "Type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "Caltrans district for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Direction of travel for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length associated with the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "State postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile for the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "Number of physical lanes at the detector's station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_FROM": {"name": "_VALID_FROM", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_VALID_TO": {"name": "_VALID_TO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "vds"}, "created_at": 1755632024.3818986, "relation_name": "ANALYTICS_PRD.vds.int_vds__active_detectors", "raw_code": "with date_range as (\r\n        {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"to_date('01/01/2010', 'mm/dd/yyyy')\",\r\n        end_date= \"current_date + 1\"\r\n        )\r\n        }}\r\n),\r\n\r\ndate_range_updated as (\r\n    select date_{{ \"day\" }} as active_date from date_range\r\n),\r\n\r\ndetector_meta as (\r\n    select * from {{ ref(\"int_vds__detector_config\") }}\r\n),\r\n\r\nactive_detector as (\r\n    select\r\n        dr.*,\r\n        dm.*\r\n    from date_range_updated as dr\r\n    inner join\r\n        detector_meta as dm\r\n        on\r\n            {{ get_scd_2_data('dr.active_date','dm._valid_from','dm._valid_to') }}\r\n\r\n    where dm.status = 1\r\n)\r\n\r\nselect * from active_detector", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__active_detectors.sql", "compiled": true, "compiled_code": "with date_range as (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 5710\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        to_date('01/01/2010', 'mm/dd/yyyy')\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date + 1\n\n)\n\nselect * from filtered\n\n\n),\n\ndate_range_updated as (\n    select date_day as active_date from date_range\n),\n\ndetector_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__detector_config\n),\n\nactive_detector as (\n    select\n        dr.*,\n        dm.*\n    from date_range_updated as dr\n    inner join\n        detector_meta as dm\n        on\n            \n\n    dr.active_date >= dm._valid_from\n    and ( dr.active_date < dm._valid_to or dm._valid_to is null)\n\n\n\n    where dm.status = 1\n)\n\nselect * from active_detector", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__controller_config": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__controller_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__controller_config.sql", "original_file_path": "models/intermediate/vds/int_vds__controller_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__controller_config"], "alias": "int_vds__controller_config", "checksum": {"name": "sha256", "checksum": "f3c3fe33160cbd9dd1699b3786d45ab34e14f9e2bff45f7813feebd07897c9c1"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Configuration metadata for VDS controllers. There may be multiple\nstations hooked up to a single controller. For example, the same\ncontroller might have a station for the mainline as well as a station\nfor an onramp.\n\nThis table is a slowly-changing-dimension-2, meaning that it has multiple\ndifferent versions of the metadata for each controller, with `_valid_from`\nand `_valid_to` datetime columns indicating when the version is correct.\n\nThis model is unique at the level of CONTROLLER_ID + _VALID_TO.\n", "columns": {"controller_id": {"name": "controller_id", "description": "The unique ID of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_type": {"name": "controller_type", "description": "The type of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num": {"name": "line_num", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stn_address": {"name": "stn_address", "description": "An address for the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_from": {"name": "_valid_from", "description": "The timestamp from which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_to": {"name": "_valid_to", "description": "The timestamp to which this row is valid. If it is still valid, this is `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "table", "schema": "vds"}, "created_at": 1755632024.3732705, "relation_name": "ANALYTICS_PRD.vds.int_vds__controller_config", "raw_code": "{{ config(materialized='table') }}\n\nwith config_log as (\n    select * from {{ ref('stg_db96__controller_config_log') }}\n),\n\nconfig as (\n    select * from {{ ref('stg_db96__controller_config') }}\n),\n\nconfig_log_with_validity as (\n    select\n        * exclude (time_id),\n        time_id as _valid_from,\n        lead(time_id) over (partition by controller_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.*,\n        config.controller_type,\n        config.district,\n        config.county,\n        config.city,\n        config.freeway,\n        config.direction\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.controller_id = config.controller_id\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__controller_config_log", "package": null, "version": null}, {"name": "stg_db96__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log", "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__controller_config.sql", "compiled": true, "compiled_code": "\n\nwith config_log as (\n    select * from ANALYTICS_PRD.db96.stg_db96__controller_config_log\n),\n\nconfig as (\n    select * from ANALYTICS_PRD.db96.stg_db96__controller_config\n),\n\nconfig_log_with_validity as (\n    select\n        * exclude (time_id),\n        time_id as _valid_from,\n        lead(time_id) over (partition by controller_id order by time_id asc) as _valid_to\n    from config_log\n),\n\nconfig_scd as (\n    select\n        config_log_with_validity.*,\n        config.controller_type,\n        config.district,\n        config.county,\n        config.city,\n        config.freeway,\n        config.direction\n    from config_log_with_validity\n    left join config\n        on config_log_with_validity.controller_id = config.controller_id\n    where config_log_with_validity.status = 1\n)\n\nselect * from config_scd", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["CONTROLLER_ID", "_VALID_TO"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.int_vds__active_stations": {"database": "ANALYTICS_PRD", "schema": "vds", "name": "int_vds__active_stations", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "intermediate/vds/int_vds__active_stations.sql", "original_file_path": "models/intermediate/vds/int_vds__active_stations.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "int_vds__active_stations"], "alias": "int_vds__active_stations", "checksum": {"name": "sha256", "checksum": "f13a07e9f69eb8a5f160ce67c4c5fb6e71d500bf10acb7a12148ed5b1f73ae74"}, "config": {"enabled": true, "alias": null, "schema": "vds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Contains station metadata for all stations that were designated active on any\ngiven day.\n", "columns": {"active_date": {"name": "active_date", "description": "Date the station was active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "Unique identifier for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Name of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "Number of physical lanes at the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "use_speed": {"name": "use_speed", "description": "Indicates if speed is used for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dt_set_id": {"name": "dt_set_id", "description": "Diagnostic set ID for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "Absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "Latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "Longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "Angle of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_start": {"name": "segment_start", "description": "Segment start for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_end": {"name": "segment_end", "description": "Segment end for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "Controller ID for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_from": {"name": "_valid_from", "description": "Timestamp from which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_valid_to": {"name": "_valid_to", "description": "Timestamp to which this row is valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "Type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "County for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "City for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "Freeway for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "Direction of travel for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/intermediate/vds/_vds.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "vds"}, "created_at": 1755632024.3805585, "relation_name": "ANALYTICS_PRD.vds.int_vds__active_stations", "raw_code": "with date_range as (\r\n        {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date= var(\"pems_clearinghouse_start_date\"),\r\n        end_date= \"current_date + 1 \"\r\n        )\r\n        }}\r\n),\r\n\r\ndate_range_updated as (\r\n    select to_date(date_{{ \"day\" }}) as active_date from date_range\r\n),\r\n\r\nstation_meta as (\r\n    select * from {{ ref(\"int_vds__station_config\") }}\r\n),\r\n\r\nactive_station as (\r\n    select\r\n        dr.*,\r\n        sm.*\r\n    from date_range_updated as dr\r\n    inner join\r\n        station_meta as sm\r\n        on\r\n            {{ get_scd_2_data('dr.active_date','sm._valid_from','sm._valid_to') }}\r\n            and sm.status = 1\r\n)\r\n\r\nselect * from active_station", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.caldata_mdsa_caltrans_pems.get_scd_2_data"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/int_vds__active_stations.sql", "compiled": true, "compiled_code": "with date_range as (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 962\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2023-01-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date + 1 \n\n)\n\nselect * from filtered\n\n\n),\n\ndate_range_updated as (\n    select to_date(date_day) as active_date from date_range\n),\n\nstation_meta as (\n    select * from ANALYTICS_PRD.vds.int_vds__station_config\n),\n\nactive_station as (\n    select\n        dr.*,\n        sm.*\n    from date_range_updated as dr\n    inner join\n        station_meta as sm\n        on\n            \n\n    dr.active_date >= sm._valid_from\n    and ( dr.active_date < sm._valid_to or sm._valid_to is null)\n\n\n            and sm.status = 1\n)\n\nselect * from active_station", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_geo_reference__county_boundaries": {"database": "ANALYTICS_PRD", "schema": "analytics", "name": "stg_geo_reference__county_boundaries", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/geo_reference/stg_geo_reference__county_boundaries.sql", "original_file_path": "models/staging/geo_reference/stg_geo_reference__county_boundaries.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_geo_reference__county_boundaries", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "geo_reference", "stg_geo_reference__county_boundaries"], "alias": "stg_geo_reference__county_boundaries", "checksum": {"name": "sha256", "checksum": "0df81389dd4a760ce65fcd02ec9e1588e8990d404627c3e9bb87efc4461baf5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "This polygon feature class represents the California county boundaries. Based on TIGER/Line 2010 county\nfiles, the Caltrans districts and California county name abbreviation were added to this layer for\nCaltrans internal GIS application. [Data\nsource](https://gisdata-caltrans.opendata.arcgis.com/datasets/111030d0d67e49d789080c47d9e4e618_0/about)\n", "columns": {"COUNTY_FIPS": {"name": "COUNTY_FIPS", "description": "2020 Census county FIPS code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GEO_ID": {"name": "GEO_ID", "description": "2020 Census state and county FIPS codes concatenated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME": {"name": "NAME", "description": "The County's name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LAND": {"name": "LAND", "description": "unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "WATER": {"name": "WATER", "description": "unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "The latitude of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "The longitude of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_CODE": {"name": "COUNTY_CODE", "description": "Three chracter county code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the county boundary is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AREA": {"name": "AREA", "description": "The area of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GEOMETRY": {"name": "GEOMETRY", "description": "The geometry of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/geo_reference/_geo_reference.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view"}, "created_at": 1755632024.4171028, "relation_name": "ANALYTICS_PRD.analytics.stg_geo_reference__county_boundaries", "raw_code": "select\n\n    COUNTYFP10 as COUNTY_FIPS,\n    GEOID10 as GEO_ID,\n    NAME10 as NAME,\n    ALAND10 as LAND,\n    AWATER10 as WATER,\n    INTPTLAT10 as LATITUDE,\n    INTPTLON10 as LONGITUDE,\n    CO_CODE as COUNTY_CODE,\n    DISTRICT,\n    \"Shape__Area\" as AREA,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom {{ source('geo_reference', 'county_boundaries') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["geo_reference", "county_boundaries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/geo_reference/stg_geo_reference__county_boundaries.sql", "compiled": true, "compiled_code": "select\n\n    COUNTYFP10 as COUNTY_FIPS,\n    GEOID10 as GEO_ID,\n    NAME10 as NAME,\n    ALAND10 as LAND,\n    AWATER10 as WATER,\n    INTPTLAT10 as LATITUDE,\n    INTPTLON10 as LONGITUDE,\n    CO_CODE as COUNTY_CODE,\n    DISTRICT,\n    \"Shape__Area\" as AREA,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom RAW_PRD.geo_reference.county_boundaries", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_geo_reference__shn_lines": {"database": "ANALYTICS_PRD", "schema": "analytics", "name": "stg_geo_reference__shn_lines", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/geo_reference/stg_geo_reference__shn_lines.sql", "original_file_path": "models/staging/geo_reference/stg_geo_reference__shn_lines.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_geo_reference__shn_lines", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "geo_reference", "stg_geo_reference__shn_lines"], "alias": "stg_geo_reference__shn_lines", "checksum": {"name": "sha256", "checksum": "e681502539fb6c4fb6f80174cba86d6dcabd3852bd7bfb6cd88866bc757f3b93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "StateHighways are state highways based upon the Caltrans Linear Referencing System. Each record in this\nlayer represents a highway segment where the county, route, postmile prefix, and postmile suffix are the\nsame. Each segment has a begin and end postmile. This geometry is based upon the extraction from TSN on\n10 October 2022.\n\nEach segment is coded with the district, county, route, postmile prefix (if any), begin postmile, end\npostmile, and postmile suffix (if any). One additional field - AlignCode - should be understood by the\nuser for effective use of this data set (refer to the Entity and Attribute Information section of this\nmetadata).\n\nAlignCode indicates if the state highway segment is on a Right alignment, Left alignment, Right side of\nan independent alignment or Left side of an independent alignment. Where TSN (Transportation System\nNetwork - the source database) considers most state highways to have just a centerline, the underlying\nLRS (Linear Referencing System) linework that these segments are based upon has a line for each direction.\n\nOn undivided highways the right and left lines are identical. On divided highways the right and left are\nseparated, but TSN treats the segment as a single centerline. In the last case where highways are not only\ndivided but also have different lengths (where the right and left carriageway diverge around physical\nobstacles or are separated onto different one-way streets) the underlying linework has dual carriageways,\nand TSN treats the segment as an \"independent alignment\".  In some cases (especially for small-scale\nmapping), it may be appropriate to display linework for just one alignment (e.g. Right alignment), and only\nfor the other side where TSN indicates independent right and left alignments. In other cases (e.g.\nlarge-scale mapping), it may be appropriate to display postmiles for both alignments, regardless of how TSN\ntreats the segment.\n\nThe bOdometer and eOdometer fields represent the actual distance in miles from the start of the highway to\nthe begin and end of each highway section.  This is in contrast to the begin and end postmile values, which\nno longer represent these values as each highway is realigned (and made longer or shorter) over time. [Data\nsource](https://gisdata-caltrans.opendata.arcgis.com/datasets/77f2d7ba94e040a78bfbe36feb6279da_0/about)\n", "columns": {"ROUTE_WITH_SUFFIX": {"name": "ROUTE_WITH_SUFFIX", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PM_ROUTE_ID": {"name": "PM_ROUTE_ID", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "Three chracter county code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the highway is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PM_PREFIX": {"name": "PM_PREFIX", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "BPM": {"name": "BPM", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "EPM": {"name": "EPM", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PM_SUFFIX": {"name": "PM_SUFFIX", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "BPMC": {"name": "BPMC", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "EPMC": {"name": "EPMC", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "B_ODOMETER": {"name": "B_ODOMETER", "description": "Represents the distance in miles from the start of the highway to\nthe beginning and end of each highway section.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "E_ODOMETER": {"name": "E_ODOMETER", "description": "Represents the distance in miles from the start of the highway to\nthe beginning and end of each highway section.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ALIGN_CODE": {"name": "ALIGN_CODE", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ROUTE_TYPE": {"name": "ROUTE_TYPE", "description": "The type of route of the highway. Values are State, US, and Interstate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "The direction of the highway.\nValues are NB, SB, EB, and WB (north-, south-, east-, and west-bound).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GEOMETRY": {"name": "GEOMETRY", "description": "The geometry of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/geo_reference/_geo_reference.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view"}, "created_at": 1755632024.4231925, "relation_name": "ANALYTICS_PRD.analytics.stg_geo_reference__shn_lines", "raw_code": "select\n\n    /* RteSuffix was dropped because less than 1% of it\n    was filled and as such it didn't seem very useful.\n    Route is very similar to RouteS and was therefore dropped\n    as well. */\n\n    \"RouteS\" as ROUTE_WITH_SUFFIX,\n    \"PMRouteID\" as PM_ROUTE_ID,\n    \"County\" as COUNTY,\n    \"District\" as DISTRICT,\n    \"PMPrefix\" as PM_PREFIX,\n    \"bPM\" as BPM,\n    \"ePM\" as EPM,\n    \"PMSuffix\" as PM_SUFFIX,\n    \"bPMc\" as BPMC,\n    \"ePMc\" as EPMC,\n    \"bOdometer\" as B_ODOMETER,\n    \"eOdometer\" as E_ODOMETER,\n    \"AlignCode\" as ALIGN_CODE,\n    \"RouteType\" as ROUTE_TYPE,\n    \"Direction\" as DIRECTION,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom {{ source('geo_reference', 'shn_lines') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["geo_reference", "shn_lines"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/geo_reference/stg_geo_reference__shn_lines.sql", "compiled": true, "compiled_code": "select\n\n    /* RteSuffix was dropped because less than 1% of it\n    was filled and as such it didn't seem very useful.\n    Route is very similar to RouteS and was therefore dropped\n    as well. */\n\n    \"RouteS\" as ROUTE_WITH_SUFFIX,\n    \"PMRouteID\" as PM_ROUTE_ID,\n    \"County\" as COUNTY,\n    \"District\" as DISTRICT,\n    \"PMPrefix\" as PM_PREFIX,\n    \"bPM\" as BPM,\n    \"ePM\" as EPM,\n    \"PMSuffix\" as PM_SUFFIX,\n    \"bPMc\" as BPMC,\n    \"ePMc\" as EPMC,\n    \"bOdometer\" as B_ODOMETER,\n    \"eOdometer\" as E_ODOMETER,\n    \"AlignCode\" as ALIGN_CODE,\n    \"RouteType\" as ROUTE_TYPE,\n    \"Direction\" as DIRECTION,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom RAW_PRD.geo_reference.shn_lines", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_geo_reference__districts": {"database": "ANALYTICS_PRD", "schema": "analytics", "name": "stg_geo_reference__districts", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/geo_reference/stg_geo_reference__districts.sql", "original_file_path": "models/staging/geo_reference/stg_geo_reference__districts.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_geo_reference__districts", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "geo_reference", "stg_geo_reference__districts"], "alias": "stg_geo_reference__districts", "checksum": {"name": "sha256", "checksum": "3b38350fce144193a2e52729ca1a808a2ce11c527b087771ef77bf30c79c41e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The District feature class is a polygon coverage representing the California Department of Transportation\n(Caltrans) district boundaries. There are 12 Caltrans Districts in California. Caltrans also has Regions\nas higher level management areas. The names of Caltrans Regions are included in the layer attribute table.\n\nThe District boundary definitions are primarily based on the California county boundaries. The Board of\nEqualization (BOE) County and City Boundary web service is the authoritative source of County boundaries\nand this was used to digitize the district boundaries based on the data from March 2023. This data is\nsolely for informational purposes. District 9 has been operating independent of the Central Region since\nNovember 1, 2015. Kern County remains the only split county in the state, between Districts 6 and 9\nrespectively. The BOE data was also used to create the district boundary layers along the coastline.\n[Data source](https://gisdata-caltrans.opendata.arcgis.com/datasets/0144574f750f4ccc88749004aca6eb0c_0/about)\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "The territorial division (as for administrative or electoral purposes). Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "REGION": {"name": "REGION", "description": "The administrative area of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AREA": {"name": "AREA", "description": "The area of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GEOMETRY": {"name": "GEOMETRY", "description": "The geometry of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/geo_reference/_geo_reference.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view"}, "created_at": 1755632024.4181325, "relation_name": "ANALYTICS_PRD.analytics.stg_geo_reference__districts", "raw_code": "select\n\n    DISTRICT,\n    \"Region\" as REGION,\n    \"Shape__Area\" as AREA,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom {{ source('geo_reference', 'districts') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["geo_reference", "districts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.geo_reference.districts"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/geo_reference/stg_geo_reference__districts.sql", "compiled": true, "compiled_code": "select\n\n    DISTRICT,\n    \"Region\" as REGION,\n    \"Shape__Area\" as AREA,\n    \"Shape__Length\" as LENGTH,\n    \"geometry\" as GEOMETRY\n\nfrom RAW_PRD.geo_reference.districts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "stg_clearinghouse__station_status", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/clearinghouse/stg_clearinghouse__station_status.sql", "original_file_path": "models/staging/clearinghouse/stg_clearinghouse__station_status.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "stg_clearinghouse__station_status"], "alias": "stg_clearinghouse__station_status", "checksum": {"name": "sha256", "checksum": "357d3d8e64a2066c8ce83ec0ee0db2f59bd9a5fde16b9bf3a3cc7d7c5ce64668"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "TMDD Status data from PeMS Clearinghouse. This seems to be the main source of detector\nID to station ID mapping.\n", "columns": {"FILENAME": {"name": "FILENAME", "description": "The name of the file in the clearinghouse where the metdata was obtained from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "META_DATE": {"name": "META_DATE", "description": "The date of the XML metadata file", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_ID": {"name": "STATION_ID", "description": "The station ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_ID": {"name": "DETECTOR_ID", "description": "The detector ID. In general, there can be several detectors for a single\nstation, corresponding to different lanes of traffic.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_NAME": {"name": "DETECTOR_NAME", "description": "The name of the detector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DETECTOR_STATUS": {"name": "DETECTOR_STATUS", "description": "Detector status as reported by the XML file. Probably not useful when determining\n*actual* status of the detector.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LAST_UPDATE_TIME": {"name": "LAST_UPDATE_TIME", "description": "The last updated time. This seems to be empty for the whole dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANE_NUMBER": {"name": "LANE_NUMBER", "description": "The lane number for the detector. This seems to be reported as\n1, 10, 100, 1000, 10000, etc for each successive lane, rather than counting up\nfrom one.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='table'))", "schema": "clearinghouse"}, "created_at": 1755632024.4270947, "relation_name": "ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_status", "raw_code": "{{ config(materialized=\"table\") }}\n{% set\n  date_re='clhouse/status/d\\\\\\\\d{2}/\\\\\\\\d{4}/\\\\\\\\d{2}/d(\\\\\\\\d{2})_tmdd_meta_(\\\\\\\\d{4})_(\\\\\\\\d{2})_(\\\\\\\\d{2}).xml'\n%}\n/*\nHelpful article for flattening XML:\nhttps://community.snowflake.com/s/article/HOW-TO-QUERY-NESTED-XML-DATA-IN-SNOWFLAKE\n*/\nSELECT\n    STATUS.FILENAME,\n    DATE_FROM_PARTS(\n        REGEXP_SUBSTR(STATUS.FILENAME, '{{ date_re }}', 1, 1, '', 2)::INT,\n        REGEXP_SUBSTR(STATUS.FILENAME, '{{ date_re }}', 1, 1, '', 3)::INT,\n        REGEXP_SUBSTR(STATUS.FILENAME, '{{ date_re }}', 1, 1, '', 4)::INT\n    ) AS META_DATE,\n    REGEXP_SUBSTR(STATUS.FILENAME, '{{ date_re }}', 1, 1, '', 1)::INT AS DISTRICT,\n    XMLGET(STATUS.CONTENT, 'station-id'):\"$\"::VARCHAR AS STATION_ID,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-id'):\"$\"::VARCHAR AS DETECTOR_ID,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-name'):\"$\"::VARCHAR AS DETECTOR_NAME,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-status'):\"$\"::VARCHAR AS DETECTOR_STATUS,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'tmdd:last-update-time'):\"$\"::VARCHAR AS LAST_UPDATE_TIME,\n    XMLGET(XMLGET(LANE.VALUE, 'detection-lane-item'), 'lane-number'):\"$\"::INT AS LANE_NUMBER\nFROM\n    {{ source(\"clearinghouse\", \"station_status\") }} AS STATUS,\n    /*\n    It's not 100% clear that these flattening operations are necessary. The structure of\n    the XML documents suggest that there can be multiple detectors in a 'detector-list',\n    and multiple lanes in a 'detection-lane'. However, there seem to be few (if any) instances\n    of entries where that is the case. So these flattenings are defensive.\n    */\n    LATERAL FLATTEN(STATUS.CONTENT:\"$\") AS DETECTOR,\n    LATERAL FLATTEN(XMLGET(DETECTOR.VALUE, 'detector'):\"$\") AS LANE\nWHERE\n    GET(DETECTOR.VALUE, '@') = 'detector-list'\n    AND GET(LANE.VALUE, '@') = 'detection-lane'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["clearinghouse", "station_status"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/stg_clearinghouse__station_status.sql", "compiled": true, "compiled_code": "\n\n/*\nHelpful article for flattening XML:\nhttps://community.snowflake.com/s/article/HOW-TO-QUERY-NESTED-XML-DATA-IN-SNOWFLAKE\n*/\nSELECT\n    STATUS.FILENAME,\n    DATE_FROM_PARTS(\n        REGEXP_SUBSTR(STATUS.FILENAME, 'clhouse/status/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d(\\\\d{2})_tmdd_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).xml', 1, 1, '', 2)::INT,\n        REGEXP_SUBSTR(STATUS.FILENAME, 'clhouse/status/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d(\\\\d{2})_tmdd_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).xml', 1, 1, '', 3)::INT,\n        REGEXP_SUBSTR(STATUS.FILENAME, 'clhouse/status/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d(\\\\d{2})_tmdd_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).xml', 1, 1, '', 4)::INT\n    ) AS META_DATE,\n    REGEXP_SUBSTR(STATUS.FILENAME, 'clhouse/status/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d(\\\\d{2})_tmdd_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).xml', 1, 1, '', 1)::INT AS DISTRICT,\n    XMLGET(STATUS.CONTENT, 'station-id'):\"$\"::VARCHAR AS STATION_ID,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-id'):\"$\"::VARCHAR AS DETECTOR_ID,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-name'):\"$\"::VARCHAR AS DETECTOR_NAME,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'detector-status'):\"$\"::VARCHAR AS DETECTOR_STATUS,\n    XMLGET(XMLGET(DETECTOR.VALUE, 'detector'), 'tmdd:last-update-time'):\"$\"::VARCHAR AS LAST_UPDATE_TIME,\n    XMLGET(XMLGET(LANE.VALUE, 'detection-lane-item'), 'lane-number'):\"$\"::INT AS LANE_NUMBER\nFROM\n    RAW_PRD.clearinghouse.station_status AS STATUS,\n    /*\n    It's not 100% clear that these flattening operations are necessary. The structure of\n    the XML documents suggest that there can be multiple detectors in a 'detector-list',\n    and multiple lanes in a 'detection-lane'. However, there seem to be few (if any) instances\n    of entries where that is the case. So these flattenings are defensive.\n    */\n    LATERAL FLATTEN(STATUS.CONTENT:\"$\") AS DETECTOR,\n    LATERAL FLATTEN(XMLGET(DETECTOR.VALUE, 'detector'):\"$\") AS LANE\nWHERE\n    GET(DETECTOR.VALUE, '@') = 'detector-list'\n    AND GET(LANE.VALUE, '@') = 'detection-lane'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "stg_clearinghouse__station_meta", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/clearinghouse/stg_clearinghouse__station_meta.sql", "original_file_path": "models/staging/clearinghouse/stg_clearinghouse__station_meta.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "stg_clearinghouse__station_meta"], "alias": "stg_clearinghouse__station_meta", "checksum": {"name": "sha256", "checksum": "30a6d133da187454758446c02adc5687a0ebba5c6f32470f4e1d41a17cbd0cea"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Vehicle detector station metadata from the [PeMS Clearinghouse feeds](https://pems.dot.ca.gov/feeds/clhouse/).\n", "columns": {"FILENAME": {"name": "FILENAME", "description": "The name of the file in the clearinghouse where the metdata was obtained from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "META_DATE": {"name": "META_DATE", "description": "Date of the metadata file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ID": {"name": "ID", "description": "An integer value that uniquely indenties the Station Metadata.\nUse this value to 'join' other clearinghouse files that contain Station Metadata\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ABSOLUTE_POSTMILE": {"name": "ABSOLUTE_POSTMILE", "description": "Absolute postmile value along a partilcuar state route where the VDS is located", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_POSTMILE": {"name": "STATE_POSTMILE", "description": "State Postmile value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIRECTION": {"name": "DIRECTION", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FREEWAY": {"name": "FREEWAY", "description": "The freeway where the VDS is located", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANES": {"name": "LANES", "description": "Total number of lanes for a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length associated with a VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME": {"name": "NAME", "description": "A descriptive name assocaited with a VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE": {"name": "TYPE", "description": "Two character string identify the VDS type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "clearinghouse"}, "created_at": 1755632024.4244988, "relation_name": "ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_meta", "raw_code": "{% set date_re='clhouse/meta/d\\\\\\\\d{2}/\\\\\\\\d{4}/\\\\\\\\d{2}/d\\\\\\\\d{2}_text_meta_(\\\\\\\\d{4})_(\\\\\\\\d{2})_(\\\\\\\\d{2}).txt' %}\n\nSELECT\n    FILENAME,\n    DATE_FROM_PARTS(\n        REGEXP_SUBSTR(FILENAME, '{{ date_re }}', 1, 1, '', 1)::INT,\n        REGEXP_SUBSTR(FILENAME, '{{ date_re }}', 1, 1, '', 2)::INT,\n        REGEXP_SUBSTR(FILENAME, '{{ date_re }}', 1, 1, '', 3)::INT\n    ) AS META_DATE,\n    ID,\n    FWY AS FREEWAY,\n    DIR AS DIRECTION,\n    DISTRICT,\n    COUNTY,\n    CITY,\n    STATE_PM AS STATE_POSTMILE,\n    ABS_PM AS ABSOLUTE_POSTMILE,\n    LATITUDE,\n    LONGITUDE,\n    LENGTH,\n    TYPE,\n    LANES,\n    NAME\nFROM {{ source('clearinghouse', 'station_meta') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["clearinghouse", "station_meta"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/stg_clearinghouse__station_meta.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    FILENAME,\n    DATE_FROM_PARTS(\n        REGEXP_SUBSTR(FILENAME, 'clhouse/meta/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d\\\\d{2}_text_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).txt', 1, 1, '', 1)::INT,\n        REGEXP_SUBSTR(FILENAME, 'clhouse/meta/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d\\\\d{2}_text_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).txt', 1, 1, '', 2)::INT,\n        REGEXP_SUBSTR(FILENAME, 'clhouse/meta/d\\\\d{2}/\\\\d{4}/\\\\d{2}/d\\\\d{2}_text_meta_(\\\\d{4})_(\\\\d{2})_(\\\\d{2}).txt', 1, 1, '', 3)::INT\n    ) AS META_DATE,\n    ID,\n    FWY AS FREEWAY,\n    DIR AS DIRECTION,\n    DISTRICT,\n    COUNTY,\n    CITY,\n    STATE_PM AS STATE_POSTMILE,\n    ABS_PM AS ABSOLUTE_POSTMILE,\n    LATITUDE,\n    LONGITUDE,\n    LENGTH,\n    TYPE,\n    LANES,\n    NAME\nFROM RAW_PRD.clearinghouse.station_meta", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "stg_clearinghouse__station_raw", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/clearinghouse/stg_clearinghouse__station_raw.sql", "original_file_path": "models/staging/clearinghouse/stg_clearinghouse__station_raw.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "stg_clearinghouse__station_raw"], "alias": "stg_clearinghouse__station_raw", "checksum": {"name": "sha256", "checksum": "8b13d90c4126bc23f1c3373a60b6b197860541b79e856ff2b81d6a89ab15dd9c"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Vehicle detector station 30-second raw data from the\n[PeMS Clearinghouse feeds](https://pems.dot.ca.gov/feeds/clhouse/).\n", "columns": {"ID": {"name": "ID", "description": "Unique VDS (station identifier) value. Use this value to cross-reference with Metadata files.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "30 second raw data sample time as reported by the field element as YYYY/MM/DD.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "30 second raw data sample time as reported by the field element as YYYY/MM/DD HH24:MI:SS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_1": {"name": "VOLUME_1", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_1": {"name": "OCCUPANCY_1", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_1": {"name": "SPEED_1", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_2": {"name": "VOLUME_2", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_2": {"name": "OCCUPANCY_2", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_2": {"name": "SPEED_2", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_3": {"name": "VOLUME_3", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_3": {"name": "OCCUPANCY_3", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_3": {"name": "SPEED_3", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_4": {"name": "VOLUME_4", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_4": {"name": "OCCUPANCY_4", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_4": {"name": "SPEED_4", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_5": {"name": "VOLUME_5", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_5": {"name": "OCCUPANCY_5", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_5": {"name": "SPEED_5", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_6": {"name": "VOLUME_6", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_6": {"name": "OCCUPANCY_6", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_6": {"name": "SPEED_6", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_7": {"name": "VOLUME_7", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_7": {"name": "OCCUPANCY_7", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_7": {"name": "SPEED_7", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_8": {"name": "VOLUME_8", "description": "Number of vehicle that passed over the detector during the sample period for the lane.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_8": {"name": "OCCUPANCY_8", "description": "Occupancy of the lane during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_8": {"name": "SPEED_8", "description": "Speed in the lane as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/clearinghouse/_clearinghouse.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "clearinghouse"}, "created_at": 1755632024.4262276, "relation_name": "ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_raw", "raw_code": "{% set district_re='clhouse/meta/d(\\\\\\\\d{2})' %}\n\nselect\n    substr(filename, 14, 2)::int as district,\n    sample_timestamp,\n    sample_date,\n    id,\n    flow_1 as volume_1,\n    occupancy_1,\n    speed_1,\n    flow_2 as volume_2,\n    occupancy_2,\n    speed_2,\n    flow_3 as volume_3,\n    occupancy_3,\n    speed_3,\n    flow_4 as volume_4,\n    occupancy_4,\n    speed_4,\n    flow_5 as volume_5,\n    occupancy_5,\n    speed_5,\n    flow_6 as volume_6,\n    occupancy_6,\n    speed_6,\n    flow_7 as volume_7,\n    occupancy_7,\n    speed_7,\n    flow_8 as volume_8,\n    occupancy_8,\n    speed_8\nfrom {{ source('clearinghouse', 'station_raw') }}\nwhere sample_date >= {{ var(\"pems_clearinghouse_start_date\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["clearinghouse", "station_raw"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/stg_clearinghouse__station_raw.sql", "compiled": true, "compiled_code": "\n\nselect\n    substr(filename, 14, 2)::int as district,\n    sample_timestamp,\n    sample_date,\n    id,\n    flow_1 as volume_1,\n    occupancy_1,\n    speed_1,\n    flow_2 as volume_2,\n    occupancy_2,\n    speed_2,\n    flow_3 as volume_3,\n    occupancy_3,\n    speed_3,\n    flow_4 as volume_4,\n    occupancy_4,\n    speed_4,\n    flow_5 as volume_5,\n    occupancy_5,\n    speed_5,\n    flow_6 as volume_6,\n    occupancy_6,\n    speed_6,\n    flow_7 as volume_7,\n    occupancy_7,\n    speed_7,\n    flow_8 as volume_8,\n    occupancy_8,\n    speed_8\nfrom RAW_PRD.clearinghouse.station_raw\nwhere sample_date >= '2023-01-01'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__controller_config_log", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__controller_config_log.sql", "original_file_path": "models/staging/db96/stg_db96__controller_config_log.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__controller_config_log"], "alias": "stg_db96__controller_config_log", "checksum": {"name": "sha256", "checksum": "d03a4657467cc36fa278bfba44236d4bafea103f3d33bf2ebf5ba7d10e861a56"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "A log table showing updates to the controller config. This can be joined\nwith the `controller_config` table to get a full history of controller metadata.\n", "columns": {"controller_id": {"name": "controller_id", "description": "The unique ID of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the controller metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num": {"name": "line_num", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stn_address": {"name": "stn_address", "description": "An address for the controller", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.4338253, "relation_name": "ANALYTICS_PRD.db96.stg_db96__controller_config_log", "raw_code": "select\n    controller_id,\n    time_id,\n    status,\n    name,\n    state_postmile,\n    abs_postmile as absolute_postmile,\n    latitude,\n    longitude,\n    angle,\n    line_num,\n    stn_address\nfrom {{ source('db96', 'controller_config_log') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config_log"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__controller_config_log.sql", "compiled": true, "compiled_code": "select\n    controller_id,\n    time_id,\n    status,\n    name,\n    state_postmile,\n    abs_postmile as absolute_postmile,\n    latitude,\n    longitude,\n    angle,\n    line_num,\n    stn_address\nfrom RAW_PRD.db96.controller_config_log", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__vds30sec", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__vds30sec.sql", "original_file_path": "models/staging/db96/stg_db96__vds30sec.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__vds30sec"], "alias": "stg_db96__vds30sec", "checksum": {"name": "sha256", "checksum": "de7c569ce3d5eeec4b6366c33c0695300bcfd915f8583ae83207861a9852cf20"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "sample_timestamp", "sample_date"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "cluster_by": "sample_date", "snowflake_warehouse": "TRANSFORMING_XS_PRD"}, "tags": [], "description": "30-second resolution VDS data from DB96, a legacy Oracle database within Caltrans'\non-premise network.\n", "columns": {"id": {"name": "id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_date": {"name": "sample_date", "description": "The date on which this data was collected (in America/Los_Angeles timezone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sample_timestamp": {"name": "sample_timestamp", "description": "The timestamp for the 30-second resolution data. This is a timezone-naive timestamp,\nas it is also that in the source system. However, it seems to be in America/Los_Angeles.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_1": {"name": "volume_1", "description": "Flow volume for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_2": {"name": "volume_2", "description": "Flow volume for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_3": {"name": "volume_3", "description": "Flow volume for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_4": {"name": "volume_4", "description": "Flow volume for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_5": {"name": "volume_5", "description": "Flow volume for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_6": {"name": "volume_6", "description": "Flow volume for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_7": {"name": "volume_7", "description": "Flow volume for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_8": {"name": "volume_8", "description": "Flow volume for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_9": {"name": "volume_9", "description": "Flow volume for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_10": {"name": "volume_10", "description": "Flow volume for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_11": {"name": "volume_11", "description": "Flow volume for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_12": {"name": "volume_12", "description": "Flow volume for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_13": {"name": "volume_13", "description": "Flow volume for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_14": {"name": "volume_14", "description": "Flow volume for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_1": {"name": "occupancy_1", "description": "Flow occupancy for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_2": {"name": "occupancy_2", "description": "Flow occupancy for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_3": {"name": "occupancy_3", "description": "Flow occupancy for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_4": {"name": "occupancy_4", "description": "Flow occupancy for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_5": {"name": "occupancy_5", "description": "Flow occupancy for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_6": {"name": "occupancy_6", "description": "Flow occupancy for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_7": {"name": "occupancy_7", "description": "Flow occupancy for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_8": {"name": "occupancy_8", "description": "Flow occupancy for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_9": {"name": "occupancy_9", "description": "Flow occupancy for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_10": {"name": "occupancy_10", "description": "Flow occupancy for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_11": {"name": "occupancy_11", "description": "Flow occupancy for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_12": {"name": "occupancy_12", "description": "Flow occupancy for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_13": {"name": "occupancy_13", "description": "Flow occupancy for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "occupancy_14": {"name": "occupancy_14", "description": "Flow occupancy for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_1": {"name": "speed_1", "description": "Flow speed for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_2": {"name": "speed_2", "description": "Flow speed for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_3": {"name": "speed_3", "description": "Flow speed for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_4": {"name": "speed_4", "description": "Flow speed for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_5": {"name": "speed_5", "description": "Flow speed for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_6": {"name": "speed_6", "description": "Flow speed for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_7": {"name": "speed_7", "description": "Flow speed for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_8": {"name": "speed_8", "description": "Flow speed for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_9": {"name": "speed_9", "description": "Flow speed for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_10": {"name": "speed_10", "description": "Flow speed for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_11": {"name": "speed_11", "description": "Flow speed for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_12": {"name": "speed_12", "description": "Flow speed for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_13": {"name": "speed_13", "description": "Flow speed for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "speed_14": {"name": "speed_14", "description": "Flow speed for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "Keyword(key='materialized', value=Const(value='incremental'))", "schema": "db96", "cluster_by": "Keyword(key='cluster_by', value=Const(value='sample_date'))", "unique_key": "Keyword(key='unique_key', value=List(items=[Const(value='id'), Const(value='sample_timestamp'), Const(value='sample_date')]))", "snowflake_warehouse": "Keyword(key='snowflake_warehouse', value=Call(node=Name(name='get_snowflake_refresh_warehouse', ctx='load'), args=[], kwargs=[Keyword(key='small', value=Const(value='XS')), Keyword(key='big', value=Const(value='XL'))], dyn_args=None, dyn_kwargs=None))"}, "created_at": 1755632024.452908, "relation_name": "ANALYTICS_PRD.db96.stg_db96__vds30sec", "raw_code": "{{ config(\n    materialized=\"incremental\",\n    cluster_by=\"sample_date\",\n    unique_key=[\"id\",\"sample_timestamp\",\"sample_date\"],\n    snowflake_warehouse = get_snowflake_refresh_warehouse(small=\"XS\", big=\"XL\")\n) }}\nselect\n    split_part(split_part(filename, '/', 4), '=D', 2)::int as district,\n    vds_id::varchar as id,\n    sample_date,\n    sample_time as sample_timestamp,\n    volume_1,\n    volume_2,\n    volume_3,\n    volume_4,\n    volume_5,\n    volume_6,\n    volume_7,\n    volume_8,\n    volume_9,\n    volume_10,\n    volume_11,\n    volume_12,\n    volume_13,\n    volume_14,\n    occupancy_1,\n    occupancy_2,\n    occupancy_3,\n    occupancy_4,\n    occupancy_5,\n    occupancy_6,\n    occupancy_7,\n    occupancy_8,\n    occupancy_9,\n    occupancy_10,\n    occupancy_11,\n    occupancy_12,\n    occupancy_13,\n    occupancy_14,\n    speed_1,\n    speed_2,\n    speed_3,\n    speed_4,\n    speed_5,\n    speed_6,\n    speed_7,\n    speed_8,\n    speed_9,\n    speed_10,\n    speed_11,\n    speed_12,\n    speed_13,\n    speed_14\nfrom {{ source('db96', 'vds30sec') }}\nwhere {{ make_model_incremental('sample_date') }}\nqualify row_number() over (partition by vds_id, sample_date, sample_time order by vds_id) = 1", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "vds30sec"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro.caldata_mdsa_caltrans_pems.make_model_incremental"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.vds30sec"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__vds30sec.sql", "compiled": true, "compiled_code": "\nselect\n    split_part(split_part(filename, '/', 4), '=D', 2)::int as district,\n    vds_id::varchar as id,\n    sample_date,\n    sample_time as sample_timestamp,\n    volume_1,\n    volume_2,\n    volume_3,\n    volume_4,\n    volume_5,\n    volume_6,\n    volume_7,\n    volume_8,\n    volume_9,\n    volume_10,\n    volume_11,\n    volume_12,\n    volume_13,\n    volume_14,\n    occupancy_1,\n    occupancy_2,\n    occupancy_3,\n    occupancy_4,\n    occupancy_5,\n    occupancy_6,\n    occupancy_7,\n    occupancy_8,\n    occupancy_9,\n    occupancy_10,\n    occupancy_11,\n    occupancy_12,\n    occupancy_13,\n    occupancy_14,\n    speed_1,\n    speed_2,\n    speed_3,\n    speed_4,\n    speed_5,\n    speed_6,\n    speed_7,\n    speed_8,\n    speed_9,\n    speed_10,\n    speed_11,\n    speed_12,\n    speed_13,\n    speed_14\nfrom RAW_PRD.db96.vds30sec\nwhere \n    1=1\n    \nqualify row_number() over (partition by vds_id, sample_date, sample_time order by vds_id) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__detector_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__detector_config.sql", "original_file_path": "models/staging/db96/stg_db96__detector_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__detector_config"], "alias": "stg_db96__detector_config", "checksum": {"name": "sha256", "checksum": "a833de2753e08023a9ca9c449aedf56584f08530e34887a8eb16aa71afed728f"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Metadata for a single loop detector. This is the device that actually records\nflow, occupancy, and speed, and is typically installed in a single lane.\nMultiple detectors across a set of lanes constitute a station.\nThis model is unique at the level of DETECTOR_ID.\n", "columns": {"detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "The type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.4369907, "relation_name": "ANALYTICS_PRD.db96.stg_db96__detector_config", "raw_code": "select\n    detector_id,\n    detector_type\nfrom {{ source('db96', 'detector_config') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__detector_config.sql", "compiled": true, "compiled_code": "select\n    detector_id,\n    detector_type\nfrom RAW_PRD.db96.detector_config", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["detector_id"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__controller_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__controller_config.sql", "original_file_path": "models/staging/db96/stg_db96__controller_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__controller_config"], "alias": "stg_db96__controller_config", "checksum": {"name": "sha256", "checksum": "e6cc10e5308dbd5c355528766c15a89791646f0ffa8b739b70d13ecd5dcd6f4d"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Configuration metadata for VDS controllers. There may be multiple\nstations hooked up to a single controller. For example, the same\ncontroller might have a station for the mainline as well as a station\nfor an onramp.\nThis model is unique at the level of CONTROLLER_ID.\n", "columns": {"controller_id": {"name": "controller_id", "description": "The unique ID of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_type": {"name": "controller_type", "description": "The type of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.4328725, "relation_name": "ANALYTICS_PRD.db96.stg_db96__controller_config", "raw_code": "select\n    controller_id,\n    controller_type,\n    district_id as district,\n    county_id as county,\n    city_id as city,\n    freeway_id as freeway,\n    freeway_dir as direction\nfrom {{ source('db96', 'controller_config') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__controller_config.sql", "compiled": true, "compiled_code": "select\n    controller_id,\n    controller_type,\n    district_id as district,\n    county_id as county,\n    city_id as city,\n    freeway_id as freeway,\n    freeway_dir as direction\nfrom RAW_PRD.db96.controller_config", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["controller_id"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__station_config_log", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__station_config_log.sql", "original_file_path": "models/staging/db96/stg_db96__station_config_log.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__station_config_log"], "alias": "stg_db96__station_config_log", "checksum": {"name": "sha256", "checksum": "0ee55c01139ed895ccc52381d7973b088f6ac2387b8110292b759303722f6443"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "A log table showing updates to the station config. This can be joined\nwith the `station_config` table to get a full history of station metadata.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the station metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "use_speed": {"name": "use_speed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dt_set_id": {"name": "dt_set_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "absolute_postmile": {"name": "absolute_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_start": {"name": "segment_start", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_end": {"name": "segment_end", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The ID of the controller to which the station is attached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "length": {"name": "length", "description": "Length of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.4362938, "relation_name": "ANALYTICS_PRD.db96.stg_db96__station_config_log", "raw_code": "select\n    station_id,\n    time_id,\n    status,\n    name,\n    physical_lanes,\n    use_speed,\n    dt_set_id,\n    state_postmile,\n    abs_postmile as absolute_postmile,\n    latitude,\n    longitude,\n    angle,\n    seg_start as segment_start,\n    seg_end as segment_end,\n    segment_end - segment_start as length,\n    controller_id\nfrom {{ source('db96', 'station_config_log') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config_log"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__station_config_log.sql", "compiled": true, "compiled_code": "select\n    station_id,\n    time_id,\n    status,\n    name,\n    physical_lanes,\n    use_speed,\n    dt_set_id,\n    state_postmile,\n    abs_postmile as absolute_postmile,\n    latitude,\n    longitude,\n    angle,\n    seg_start as segment_start,\n    seg_end as segment_end,\n    segment_end - segment_start as length,\n    controller_id\nfrom RAW_PRD.db96.station_config_log", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__station_config": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__station_config", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__station_config.sql", "original_file_path": "models/staging/db96/stg_db96__station_config.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__station_config", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__station_config"], "alias": "stg_db96__station_config", "checksum": {"name": "sha256", "checksum": "2fd2a0046494353f3730b4cdbf321cd319132ba5ac674ef9c78f73812f36140d"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Metadata for a single VDS station. Multiple stations may be connected to\na single controller, and multiple detectors may be connected to a single station.\nThis model is unique at the level of STATION_ID.\n", "columns": {"station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district": {"name": "district", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county": {"name": "county", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city": {"name": "city", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway": {"name": "freeway", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "direction": {"name": "direction", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.4346995, "relation_name": "ANALYTICS_PRD.db96.stg_db96__station_config", "raw_code": "select\n    station_id,\n    station_type,\n    district_id as district,\n    county_id as county,\n    city_id as city,\n    freeway_id as freeway,\n    freeway_dir as direction\nfrom {{ source('db96', 'station_config') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__station_config.sql", "compiled": true, "compiled_code": "select\n    station_id,\n    station_type,\n    district_id as district,\n    county_id as county,\n    city_id as city,\n    freeway_id as freeway,\n    freeway_dir as direction\nfrom RAW_PRD.db96.station_config", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["station_id"], "time_spine": null}, "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log": {"database": "ANALYTICS_PRD", "schema": "db96", "name": "stg_db96__detector_config_log", "resource_type": "model", "package_name": "caldata_mdsa_caltrans_pems", "path": "staging/db96/stg_db96__detector_config_log.sql", "original_file_path": "models/staging/db96/stg_db96__detector_config_log.sql", "unique_id": "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "stg_db96__detector_config_log"], "alias": "stg_db96__detector_config_log", "checksum": {"name": "sha256", "checksum": "96099d61c4d19a689aa82cba1d5b57d8044ffd19b13e40b7c37b25820d67faa2"}, "config": {"enabled": true, "alias": null, "schema": "db96", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "A log table showing updates to the detector config. This can be joined\nwith the `detector_config` table to get a full history of detector metadata.\n", "columns": {"detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the detector metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "The ID of the station to which the detector is connected", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "The lane number of the detector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "slot": {"name": "slot", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_flag": {"name": "volume_flag", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "logical_position": {"name": "logical_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://models/staging/db96/_db96.yml", "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}", "materialized": "view", "schema": "db96"}, "created_at": 1755632024.437831, "relation_name": "ANALYTICS_PRD.db96.stg_db96__detector_config_log", "raw_code": "select\n    detector_id,\n    time_id,\n    station_id,\n    status,\n    lane::int as lane,\n    slot,\n    volume_flag,\n    logical_position\nfrom {{ source('db96', 'detector_config_log') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config_log"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/stg_db96__detector_config_log.sql", "compiled": true, "compiled_code": "select\n    detector_id,\n    time_id,\n    station_id,\n    status,\n    lane::int as lane,\n    slot,\n    volume_flag,\n    logical_position\nfrom RAW_PRD.db96.detector_config_log", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.caldata_mdsa_caltrans_pems.states": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "states", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "states.csv", "original_file_path": "seeds/states.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.states", "fqn": ["caldata_mdsa_caltrans_pems", "states"], "alias": "states", "checksum": {"name": "sha256", "checksum": "714dd632b9cfb21007360cd2c40ac4166d606b1a0b2880404d861b55c0eaaef5"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "The states seed file contains the FIPS code and other associated location information\nabout the state of California used in PeMS\n", "columns": {"STATE_ID": {"name": "STATE_ID", "description": "The California FIPS code which is 6", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NATIVE_ID": {"name": "NATIVE_ID", "description": "Two chracter abbreviation for California", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_NAME": {"name": "STATE_NAME", "description": "The state name for California", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_LATITUDE": {"name": "STATE_LATITUDE", "description": "The latitude of California used in PeMS  (Standard projection of NAD 83)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_LONGITUDE": {"name": "STATE_LONGITUDE", "description": "The longitude of California used in PeMS (Standard projection of NAD 83)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://seeds/properties.yml", "build_path": null, "unrendered_config": {"schema": "clearinghouse"}, "created_at": 1755632023.5109937, "relation_name": "ANALYTICS_PRD.clearinghouse.states", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "diagnostic_threshold_values", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "diagnostic_threshold_values.csv", "original_file_path": "seeds/diagnostic_threshold_values.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values", "fqn": ["caldata_mdsa_caltrans_pems", "diagnostic_threshold_values"], "alias": "diagnostic_threshold_values", "checksum": {"name": "sha256", "checksum": "b653c7d15a61a080e3d0a87fa2b1eeea9972350060620947d73773f6c59059e6"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "PeMS uses 30-second or 5-minute data to calculate performance measures.\n59 static records that contain diagnostic threshold values by diagnostic threshold set and detector type.\n\nReference:\n  - [Detector Diagnostics](https://pems.dot.ca.gov/?dnode=Help&content=help_calc#diag)\n  - [PEMS User Guide](https://pems.dot.ca.gov/Papers/PeMS_Intro_User_Guide_v6.pdf)\n  - PeMSSampleReports.docx\n", "columns": {"DT_SET_ID": {"name": "DT_SET_ID", "description": "Detector Threshold Set assigned to Station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DT_METHOD": {"name": "DT_METHOD", "description": "Detector deployment location in the field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DT_NAME": {"name": "DT_NAME", "description": "Name of the diagnostic test condition associated with the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DT_VALUE": {"name": "DT_VALUE", "description": "Threshold value associated with the diagnostic test condition", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://seeds/properties.yml", "build_path": null, "unrendered_config": {"schema": "diagnostics"}, "created_at": 1755632023.5016491, "relation_name": "ANALYTICS_PRD.diagnostics.diagnostic_threshold_values", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "seed.caldata_mdsa_caltrans_pems.districts": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "districts", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "districts.csv", "original_file_path": "seeds/districts.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.districts", "fqn": ["caldata_mdsa_caltrans_pems", "districts"], "alias": "districts", "checksum": {"name": "sha256", "checksum": "8417631a40044f360dad84ee99d8e5bb7b0709c1c68c80312969d5160a05a64b"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "The districts seed file contains the 12 Caltrans Districts in California. The\nDistrict boundary definitions are primarily based on the California county\nboundaries.\n", "columns": {"DISTRICT_ID": {"name": "DISTRICT_ID", "description": "The Caltrans district code associated with a region. Values are 1 - 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_NAME": {"name": "DISTRICT_NAME", "description": "The district name associated with the district code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_ID": {"name": "STATE_ID", "description": "The California FIPS code which is 6", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_LATITUDE": {"name": "DISTRICT_LATITUDE", "description": "The latitude of a district used in PeMS associated with the approximate\nmid point of the district (Standard projection of NAD 83)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_LONGITUDE": {"name": "DISTRICT_LONGITUDE", "description": "The longitude of a district used in PeMS associated with the approximate\nmid point of the district (Standard projection of NAD 83)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://seeds/properties.yml", "build_path": null, "unrendered_config": {"schema": "clearinghouse"}, "created_at": 1755632023.5053246, "relation_name": "ANALYTICS_PRD.clearinghouse.districts", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "seed.caldata_mdsa_caltrans_pems.counties": {"database": "ANALYTICS_PRD", "schema": "clearinghouse", "name": "counties", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "counties.csv", "original_file_path": "seeds/counties.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.counties", "fqn": ["caldata_mdsa_caltrans_pems", "counties"], "alias": "counties", "checksum": {"name": "sha256", "checksum": "456dc3438e2ee7642e74b4c33521b8cf807275fec07dc8873c4e3a84ccbfcab5"}, "config": {"enabled": true, "alias": null, "schema": "clearinghouse", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "The counties seed file contains the relationships between counties and their associated\nCaltrans Districts. The file also contains full county names and abbreviated naming\nconvention used in Caltrans. Additional information regarding FIPS codes can be found at:\nhttps://www.census.gov/library/reference/code-lists/ansi.html\n", "columns": {"COUNTY_ID": {"name": "COUNTY_ID", "description": "FIPS numeric code associated with a county", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_ID": {"name": "DISTRICT_ID", "description": "The Caltrans district that the county is located in (values are 1-12)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY_NAME": {"name": "COUNTY_NAME", "description": "The full name of the county", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NATIVE_ID": {"name": "NATIVE_ID", "description": "The 2-3 character abbreviation for the County used in Caltrans", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://seeds/properties.yml", "build_path": null, "unrendered_config": {"schema": "clearinghouse"}, "created_at": 1755632023.5080748, "relation_name": "ANALYTICS_PRD.clearinghouse.counties", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "seed.caldata_mdsa_caltrans_pems.detector_station_types": {"database": "ANALYTICS_PRD", "schema": "diagnostics", "name": "detector_station_types", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "detector_station_types.csv", "original_file_path": "seeds/detector_station_types.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.detector_station_types", "fqn": ["caldata_mdsa_caltrans_pems", "detector_station_types"], "alias": "detector_station_types", "checksum": {"name": "sha256", "checksum": "ea600746a12d986565570c3b525ff712c8333f4661e22636e705213d9468099b"}, "config": {"enabled": true, "alias": null, "schema": "diagnostics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "Data comes from the district metadata file.\n24 static records on detector and station type combinations and their descriptions.\nReference: PeMSSampleReports.docx\n", "columns": {"DETECTOR_TYPE": {"name": "DETECTOR_TYPE", "description": "A two character code indicating the type of detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATION_TYPE": {"name": "STATION_TYPE", "description": "A two character code indicating the type of station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "The full name of the detector and station codes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://seeds/properties.yml", "build_path": null, "unrendered_config": {"schema": "diagnostics"}, "created_at": 1755632023.4982738, "relation_name": "ANALYTICS_PRD.diagnostics.detector_station_types", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "seed.caldata_mdsa_caltrans_pems.cities": {"database": "ANALYTICS_PRD", "schema": "analytics", "name": "cities", "resource_type": "seed", "package_name": "caldata_mdsa_caltrans_pems", "path": "cities.csv", "original_file_path": "seeds/cities.csv", "unique_id": "seed.caldata_mdsa_caltrans_pems.cities", "fqn": ["caldata_mdsa_caltrans_pems", "cities"], "alias": "cities", "checksum": {"name": "sha256", "checksum": "2dc8350183d5c98ad944954fdb775b672c32cb92c2e1e8bb32181840034fb0a7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632023.2651858, "relation_name": "ANALYTICS_PRD.analytics.cities", "raw_code": "", "doc_blocks": [], "root_path": "transform", "depends_on": {"macros": []}}, "operation.caldata_mdsa_caltrans_pems.caldata_mdsa_caltrans_pems-on-run-start-0": {"database": "ANALYTICS_PRD", "schema": "analytics", "name": "caldata_mdsa_caltrans_pems-on-run-start-0", "resource_type": "operation", "package_name": "caldata_mdsa_caltrans_pems", "path": "hooks/caldata_mdsa_caltrans_pems-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.caldata_mdsa_caltrans_pems.caldata_mdsa_caltrans_pems-on-run-start-0", "fqn": ["caldata_mdsa_caltrans_pems", "hooks", "caldata_mdsa_caltrans_pems-on-run-start-0"], "alias": "caldata_mdsa_caltrans_pems-on-run-start-0", "checksum": {"name": "sha256", "checksum": "ef5bd45ee9df839391f875d4b8e391d34ccd29ab9217a5d4d0fe2fb535b7e102"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"full_refresh": "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}"}, "created_at": 1755632023.4052043, "relation_name": null, "raw_code": "{{create_udfs()}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.create_udfs"], "nodes": []}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/./dbt_project.yml/hooks/caldata_mdsa_caltrans_pems-on-run-start-0.sql", "compiled": true, "compiled_code": "\n\n    \n\nCREATE OR REPLACE FUNCTION ANALYTICS_PRD.public.exponential_smooth(\"VALUE\" FLOAT, \"FACTOR\" FLOAT)\nRETURNS TABLE (\"VALUE_SMOOTHED\" FLOAT)\nLANGUAGE PYTHON\nRUNTIME_VERSION = '3.11'\nHANDLER = 'Smoother'\nAS $$\nclass Smoother:\n    def __init__(self):\n        self.previous_value = None\n\n    def process(self, value, factor):\n        if value is None or factor is None:\n            yield_value = None\n        else:\n            # If previous value was null, substitute current value.\n            previous_value = self.previous_value if self.previous_value is not None else value\n            yield_value = value * factor + (1-factor) * previous_value\n\n        self.previous_value = yield_value\n        yield (yield_value,)\n$$\n\n;\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_DETECTOR_ID.5142929aaa": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_imputation__detector_summary_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_imputation__detector_summary_DETECTOR_ID.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_DETECTOR_ID.5142929aaa", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "not_null_imputation__detector_summary_DETECTOR_ID"], "alias": "not_null_imputation__detector_summary_DETECTOR_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0387988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/not_null_imputation__detector_summary_DETECTOR_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.imputation.imputation__detector_summary\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.imputation__detector_summary", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('imputation__detector_summary')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_SAMPLE_DATE.4bb2a39e43": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_imputation__detector_summary_SAMPLE_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_imputation__detector_summary_SAMPLE_DATE.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_SAMPLE_DATE.4bb2a39e43", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "not_null_imputation__detector_summary_SAMPLE_DATE"], "alias": "not_null_imputation__detector_summary_SAMPLE_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0407643, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/not_null_imputation__detector_summary_SAMPLE_DATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_DATE\nfrom ANALYTICS_PRD.imputation.imputation__detector_summary\nwhere SAMPLE_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_DATE", "file_key_name": "models.imputation__detector_summary", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_summary", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_DATE", "model": "{{ get_where_subquery(ref('imputation__detector_summary')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID.3345fe8e87": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID.3345fe8e87", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID"], "alias": "dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687'))"}, "created_at": 1755632024.0423946, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/dbt_utils_unique_combination_o_ba9cba473d1f5b32d87e6bdd3b60b687.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        SAMPLE_DATE, DETECTOR_ID\n    from ANALYTICS_PRD.imputation.imputation__detector_summary\n    group by SAMPLE_DATE, DETECTOR_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.imputation__detector_summary", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_summary", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SAMPLE_DATE", "DETECTOR_ID"], "model": "{{ get_where_subquery(ref('imputation__detector_summary')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.a9425d1e13": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.a9425d1e13", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID"], "alias": "not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865"}, "created_at": 1755632024.0634847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/not_null_imputation__detector__30c4f401ae925ec881a1df159b95c865.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.imputation.imputation__detector_imputed_agg_five_minutes\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.imputation__detector_imputed_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('imputation__detector_imputed_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.8c9047e291": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_imputation__detector_imputed_agg_five_minutes_COUNTY", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.8c9047e291", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "not_null_imputation__detector_imputed_agg_five_minutes_COUNTY"], "alias": "not_null_imputation__detector_imputed_agg_five_minutes_COUNTY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0650477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COUNTY\nfrom ANALYTICS_PRD.imputation.imputation__detector_imputed_agg_five_minutes\nwhere COUNTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTY", "file_key_name": "models.imputation__detector_imputed_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTY", "model": "{{ get_where_subquery(ref('imputation__detector_imputed_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.bef7636b70": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac.sql", "original_file_path": "models/marts/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.bef7636b70", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "imputation", "not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP"], "alias": "not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac"}, "created_at": 1755632024.066893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/imputation/_imputation.yml/not_null_imputation__detector__ee6da680c7e8594bdd9f00eec9942aac.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.imputation.imputation__detector_imputed_agg_five_minutes\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.imputation__detector_imputed_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('imputation__detector_imputed_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_station_id.f9d82989ac": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_daily_detail_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_daily_detail_station_id.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_station_id.f9d82989ac", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_daily_detail_station_id"], "alias": "not_null_diagnostics__detector_daily_detail_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0850234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_daily_detail_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_detail\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.diagnostics__detector_daily_detail", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('diagnostics__detector_daily_detail')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_status.b36d972576": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_daily_detail_status", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_daily_detail_status.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_status.b36d972576", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_daily_detail_status"], "alias": "not_null_diagnostics__detector_daily_detail_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0870676, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_daily_detail_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_detail\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.diagnostics__detector_daily_detail", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('diagnostics__detector_daily_detail')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_sample_date.1fb8da6fc8": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_daily_detail_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_daily_detail_sample_date.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_sample_date.1fb8da6fc8", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_daily_detail_sample_date"], "alias": "not_null_diagnostics__detector_daily_detail_sample_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0889328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_daily_detail_sample_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_detail\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.diagnostics__detector_daily_detail", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('diagnostics__detector_daily_detail')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_station_id.27c37be2ad": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_daily_by_station_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_daily_by_station_station_id.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_station_id.27c37be2ad", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_daily_by_station_station_id"], "alias": "not_null_diagnostics__detector_daily_by_station_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0907478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_by_station", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_daily_by_station_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_by_station\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.diagnostics__detector_daily_by_station", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('diagnostics__detector_daily_by_station')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_sample_date.b39b495de5": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_daily_by_station_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_daily_by_station_sample_date.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_sample_date.b39b495de5", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_daily_by_station_sample_date"], "alias": "not_null_diagnostics__detector_daily_by_station_sample_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0924625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_daily_by_station", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_daily_by_station_sample_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_daily_by_station\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.diagnostics__detector_daily_by_station", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('diagnostics__detector_daily_by_station')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_station_id.f981d3d0da": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_monthly_by_station_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_monthly_by_station_station_id.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_station_id.f981d3d0da", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_monthly_by_station_station_id"], "alias": "not_null_diagnostics__detector_monthly_by_station_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0942442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_monthly_by_station", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_monthly_by_station_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_monthly_by_station\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.diagnostics__detector_monthly_by_station", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('diagnostics__detector_monthly_by_station')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_sample_month.65c0e266da": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_diagnostics__detector_monthly_by_station_sample_month", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_diagnostics__detector_monthly_by_station_sample_month.sql", "original_file_path": "models/marts/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_sample_month.65c0e266da", "fqn": ["caldata_mdsa_caltrans_pems", "marts", "diagnostics", "not_null_diagnostics__detector_monthly_by_station_sample_month"], "alias": "not_null_diagnostics__detector_monthly_by_station_sample_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.0958498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "diagnostics__detector_monthly_by_station", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/marts/diagnostics/_diagnostics.yml/not_null_diagnostics__detector_monthly_by_station_sample_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_month\nfrom ANALYTICS_PRD.diagnostics.diagnostics__detector_monthly_by_station\nwhere sample_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_month", "file_key_name": "models.diagnostics__detector_monthly_by_station", "attached_node": "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_month", "model": "{{ get_where_subquery(ref('diagnostics__detector_monthly_by_station')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_STATION_ID.148096e504": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__station_aadt_with_K_value_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__station_aadt_with_K_value_STATION_ID.sql", "original_file_path": "models/intermediate/performance/_other.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_STATION_ID.148096e504", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__station_aadt_with_K_value_STATION_ID"], "alias": "not_null_int_performance__station_aadt_with_K_value_STATION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.1390436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_aadt_with_K_value", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_other.yml/not_null_int_performance__station_aadt_with_K_value_STATION_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ID\nfrom ANALYTICS_PRD.performance.int_performance__station_aadt_with_K_value\nwhere STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_ID", "file_key_name": "models.int_performance__station_aadt_with_K_value", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ID", "model": "{{ get_where_subquery(ref('int_performance__station_aadt_with_K_value')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.cf3f5fc885": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.sql", "original_file_path": "models/intermediate/performance/_other.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.cf3f5fc885", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR"], "alias": "not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.140681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__station_aadt_with_K_value", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_other.yml/not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_YEAR\nfrom ANALYTICS_PRD.performance.int_performance__station_aadt_with_K_value\nwhere SAMPLE_YEAR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_YEAR", "file_key_name": "models.int_performance__station_aadt_with_K_value", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_YEAR", "model": "{{ get_where_subquery(ref('int_performance__station_aadt_with_K_value')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_date.731be9516c": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__detector_metrics_agg_five_minutes_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a.sql", "original_file_path": "models/intermediate/performance/_detector_metrics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_date.731be9516c", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__detector_metrics_agg_five_minutes_sample_date"], "alias": "not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a"}, "created_at": 1755632024.1548169, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_detector_metrics.yml/not_null_int_performance__dete_a61060efdcdac119608765a5401d8a7a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.int_performance__detector_metrics_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('int_performance__detector_metrics_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp.cc991dd3f8": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075.sql", "original_file_path": "models/intermediate/performance/_detector_metrics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp.cc991dd3f8", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp"], "alias": "not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075"}, "created_at": 1755632024.1564426, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_detector_metrics.yml/not_null_int_performance__dete_0facfb64fd4531dc3b8ed4a9e30dd075.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_timestamp\nfrom ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\nwhere sample_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_timestamp", "file_key_name": "models.int_performance__detector_metrics_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_timestamp", "model": "{{ get_where_subquery(ref('int_performance__detector_metrics_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_detector_id.b69f9c6ce1": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__detector_metrics_agg_five_minutes_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661.sql", "original_file_path": "models/intermediate/performance/_detector_metrics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_detector_id.b69f9c6ce1", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__detector_metrics_agg_five_minutes_detector_id"], "alias": "not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661"}, "created_at": 1755632024.1580403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_detector_metrics.yml/not_null_int_performance__dete_2a6cbbc876bb4c4df40f891619283661.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_performance__detector_metrics_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_performance__detector_metrics_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_station_id.4c5c10799a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_performance__detector_metrics_agg_five_minutes_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3.sql", "original_file_path": "models/intermediate/performance/_detector_metrics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_station_id.4c5c10799a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "performance", "not_null_int_performance__detector_metrics_agg_five_minutes_station_id"], "alias": "not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3"}, "created_at": 1755632024.159605, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_performance__detector_metrics_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/performance/_detector_metrics.yml/not_null_int_performance__dete_2920ca3de0d243afd55f0210a04fa3f3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.performance.int_performance__detector_metrics_agg_five_minutes\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_performance__detector_metrics_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_performance__detector_metrics_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_META_DATE.a86396f7b0": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__station_meta_META_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__station_meta_META_DATE.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_META_DATE.a86396f7b0", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__station_meta_META_DATE"], "alias": "not_null_int_clearinghouse__station_meta_META_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.1821833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__station_meta_META_DATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect META_DATE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_meta\nwhere META_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "META_DATE", "file_key_name": "models.int_clearinghouse__station_meta", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "META_DATE", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_meta')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_ID.24794e5a3f": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__station_meta_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__station_meta_ID.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_ID.24794e5a3f", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__station_meta_ID"], "alias": "not_null_int_clearinghouse__station_meta_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.1838386, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__station_meta_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_meta\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ID", "file_key_name": "models.int_clearinghouse__station_meta", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_meta')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w.e55615f4f4": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w.e55615f4f4", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w"], "alias": "accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4'))"}, "created_at": 1755632024.1854377, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_4ceac03048e0bb83a68d6f6b438c4cd4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        DIRECTION as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_meta\n    group by DIRECTION\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'N','E','S','W','n','e','s','w'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIRECTION", "file_key_name": "models.int_clearinghouse__station_meta", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["N", "E", "S", "W", "n", "e", "s", "w"], "column_name": "DIRECTION", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_meta')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_.2eb8658b67": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_.2eb8658b67", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_"], "alias": "accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7'))"}, "created_at": 1755632024.1968765, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_295000b4df6563083193e0f89d8b4fd7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        DISTRICT as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_meta\n    group by DISTRICT\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DISTRICT", "file_key_name": "models.int_clearinghouse__station_meta", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "DISTRICT", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_meta')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_META_DATE.4f088cd5af": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__station_status_META_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__station_status_META_DATE.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_META_DATE.4f088cd5af", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__station_status_META_DATE"], "alias": "not_null_int_clearinghouse__station_status_META_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2018085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__station_status_META_DATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect META_DATE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status\nwhere META_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "META_DATE", "file_key_name": "models.int_clearinghouse__station_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "META_DATE", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_STATION_ID.374fb2576e": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__station_status_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__station_status_STATION_ID.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_STATION_ID.374fb2576e", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__station_status_STATION_ID"], "alias": "not_null_int_clearinghouse__station_status_STATION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2035928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__station_status_STATION_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status\nwhere STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_ID", "file_key_name": "models.int_clearinghouse__station_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_DETECTOR_ID.532974a9c9": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__station_status_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__station_status_DETECTOR_ID.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_DETECTOR_ID.532974a9c9", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__station_status_DETECTOR_ID"], "alias": "not_null_int_clearinghouse__station_status_DETECTOR_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2051198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__station_status_DETECTOR_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_clearinghouse__station_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_.cc346c7114": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_.cc346c7114", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_"], "alias": "accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d'))"}, "created_at": 1755632024.2066846, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_8dcf2543267eefae47860ba9a9bbf42d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        DISTRICT as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status\n    group by DISTRICT\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DISTRICT", "file_key_name": "models.int_clearinghouse__station_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "DISTRICT", "model": "{{ get_where_subquery(ref('int_clearinghouse__station_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID.18b89f5a20": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID.18b89f5a20", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID"], "alias": "dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0'))"}, "created_at": 1755632024.2116876, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__station_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/dbt_utils_unique_combination_o_fe617f40c3508b80c20458816c7d77f0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        META_DATE, DETECTOR_ID\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__station_status\n    group by META_DATE, DETECTOR_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_clearinghouse__station_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["META_DATE", "DETECTOR_ID"], "model": "{{ get_where_subquery(ref('int_clearinghouse__station_status')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID.3ab981641a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID.3ab981641a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID"], "alias": "not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c"}, "created_at": 1755632024.2159202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_f5f02e28cff42260e1f0ab928b4c937c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\nwhere STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_ID", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_detector_id.01e6cf6ac3": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_detector_id.01e6cf6ac3", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_detector_id"], "alias": "not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945"}, "created_at": 1755632024.217462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_39c7a4808e421bbd0b58889985b2c945.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE.e5acaa3738": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE.e5acaa3738", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE"], "alias": "not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2"}, "created_at": 1755632024.2191505, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_342e5a6501e56ce9e56c7b8edcda5bb2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_DATE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\nwhere SAMPLE_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_DATE", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_DATE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP.e1c1dfbfcf": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP.e1c1dfbfcf", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP"], "alias": "not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc"}, "created_at": 1755632024.2206883, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_26745cd0da1ff36ca17c1b09cbbba5dc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE.dbdd66a6fb": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE.dbdd66a6fb", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE"], "alias": "not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93"}, "created_at": 1755632024.2221808, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_8cbb02f13b01ad088114b7716417ff93.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_TYPE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\nwhere STATION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_TYPE", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_TYPE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_.4eb65ef421": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_.4eb65ef421", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_"], "alias": "accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2'))"}, "created_at": 1755632024.2237165, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_306b1c4f9fd147c73722bb127caaacf2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        district as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    group by district\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "district", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "district", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w.54beb6c9cb": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w.54beb6c9cb", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w"], "alias": "accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf'))"}, "created_at": 1755632024.2287061, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_6b450ea791e920c7c5a3fdee5f6812cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        DIRECTION as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes\n    group by DIRECTION\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'N','E','S','W','n','e','s','w'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIRECTION", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["N", "E", "S", "W", "n", "e", "s", "w"], "column_name": "DIRECTION", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID.a53f2c9f78": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID.a53f2c9f78", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID"], "alias": "not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c"}, "created_at": 1755632024.2329142, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_a5915afc5f34074dc8630d9ac0e9ca6c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE.4d03e0dbd9": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE.4d03e0dbd9", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE"], "alias": "not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021"}, "created_at": 1755632024.2346427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_07f38b8417e2b937ef85db67ad179021.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_DATE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\nwhere SAMPLE_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_DATE", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_DATE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP.510fb18280": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP.510fb18280", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP"], "alias": "not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2"}, "created_at": 1755632024.2361605, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_a704e85e3f04290b0c4fc79d495a49a2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE.538b044f46": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE.538b044f46", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE"], "alias": "not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206"}, "created_at": 1755632024.237684, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_9615587c6906cff78d7e6e6e7e543206.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_TYPE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\nwhere STATION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_TYPE", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_TYPE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID.2d79e2598b": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID.2d79e2598b", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID"], "alias": "not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55"}, "created_at": 1755632024.239177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_8061053da152ffcd2a5cb4dfb6a2ef55.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\nwhere STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_ID", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w.c7d6de60bf": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w.c7d6de60bf", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w"], "alias": "accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e'))"}, "created_at": 1755632024.2407284, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_9725b2ebddd06732f6e29ff2ba40223e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        DIRECTION as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    group by DIRECTION\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'N','E','S','W','n','e','s','w'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIRECTION", "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["N", "E", "S", "W", "n", "e", "s", "w"], "column_name": "DIRECTION", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date.d97c07d228": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date.d97c07d228", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date"], "alias": "five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369'))"}, "created_at": 1755632024.2450666, "relation_name": null, "raw_code": "{{ test_five_minute_daily_count(**_dbt_generic_test_kwargs) }}{{ config(alias=\"five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_five_minute_daily_count", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/five_minute_daily_count_int_cl_98815e5d3c8687b304af8b2e914b9369.sql", "compiled": true, "compiled_code": "\nwith\nvalidation_errors as (\n    select detector_id,sample_date\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_agg_five_minutes_with_missing_rows\n    group by detector_id,sample_date\n    having count(*) != 288\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test_metadata": {"name": "five_minute_daily_count", "kwargs": {"group_by_columns": ["detector_id", "sample_date"], "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_agg_five_minutes_with_missing_rows')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID.e6f27fc3ea": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID.e6f27fc3ea", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID"], "alias": "not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0"}, "created_at": 1755632024.2507086, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_c08a95de0d0f1016f59032e9226c81d0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE.ab07a36bce": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE.ab07a36bce", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE"], "alias": "not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561"}, "created_at": 1755632024.2522178, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_82cf5cc0fae13ccf4ec7c7b8efb40561.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_DATE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere SAMPLE_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_DATE", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_DATE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP.3d332d0f16": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP.3d332d0f16", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP"], "alias": "not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89"}, "created_at": 1755632024.2537303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_70b844e403479589a22306c88c56fd89.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE.08902fbf35": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE.08902fbf35", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE"], "alias": "not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed"}, "created_at": 1755632024.255218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_933abea686d985e8fc5ee6ba7aa81bed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_TYPE\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere STATION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_TYPE", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_TYPE", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR.98dd4d6f90": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR.98dd4d6f90", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR"], "alias": "not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24"}, "created_at": 1755632024.256814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_ce3ff032bf303bb7d98fe803d0da2d24.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect G_FACTOR\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere G_FACTOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "G_FACTOR", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "G_FACTOR", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID.f8c7c79bff": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID.f8c7c79bff", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID"], "alias": "not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b"}, "created_at": 1755632024.2582917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_g_factor_based_speed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_c93aa9515e7a62cd3586a9bfb1a5b27b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ID\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_g_factor_based_speed\nwhere STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATION_ID", "file_key_name": "models.int_clearinghouse__detector_g_factor_based_speed", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ID", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_g_factor_based_speed')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id.00b390acfa": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id.00b390acfa", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id"], "alias": "not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60"}, "created_at": 1755632024.2599123, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_outlier_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/not_null_int_clearinghouse__de_e4d9c203201f58248105bc66f9f7ac60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_outlier_agg_five_minutes\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_clearinghouse__detector_outlier_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_outlier_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w.657666a48a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b.sql", "original_file_path": "models/intermediate/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w.657666a48a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "clearinghouse", "accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w"], "alias": "accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b'))"}, "created_at": 1755632024.2614245, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_clearinghouse__detector_outlier_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/clearinghouse/_clearinghouse.yml/accepted_values_int_clearingho_f8b150da6bafd38aaef28509e1229e7b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        direction as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.clearinghouse.int_clearinghouse__detector_outlier_agg_five_minutes\n    group by direction\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'N','E','S','W','n','e','s','w'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "direction", "file_key_name": "models.int_clearinghouse__detector_outlier_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["N", "E", "S", "W", "n", "e", "s", "w"], "column_name": "direction", "model": "{{ get_where_subquery(ref('int_clearinghouse__detector_outlier_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.aaf4638c12": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.aaf4638c12", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID"], "alias": "not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2810194, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.imputation.int_imputation__detector_agg_five_minutes\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_imputation__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_imputation__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.a7f33cd064": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.a7f33cd064", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE"], "alias": "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2825778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_DATE\nfrom ANALYTICS_PRD.imputation.int_imputation__detector_agg_five_minutes\nwhere SAMPLE_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_DATE", "file_key_name": "models.int_imputation__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_DATE", "model": "{{ get_where_subquery(ref('int_imputation__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP.0db4de7197": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__detec_b219044171bcee8734379696dd818c12.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP.0db4de7197", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP"], "alias": "not_null_int_imputation__detec_b219044171bcee8734379696dd818c12", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_imputation__detec_b219044171bcee8734379696dd818c12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_imputation__detec_b219044171bcee8734379696dd818c12"}, "created_at": 1755632024.284091, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_imputation__detec_b219044171bcee8734379696dd818c12\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__detec_b219044171bcee8734379696dd818c12.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.imputation.int_imputation__detector_agg_five_minutes\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.int_imputation__detector_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('int_imputation__detector_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.0d89789d52": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.0d89789d52", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID"], "alias": "not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201"}, "created_at": 1755632024.2856104, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__detec_2f94e97dd5ac460e942bd8818bd2b201.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_imputation__detector_imputed_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_imputation__detector_imputed_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.90fedfff93": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.90fedfff93", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP"], "alias": "not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d"}, "created_at": 1755632024.2870884, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__detector_imputed_agg_five_minutes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__detec_bac2f08075306b36f1c87b758ba5f70d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.imputation.int_imputation__detector_imputed_agg_five_minutes\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.int_imputation__detector_imputed_agg_five_minutes", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('int_imputation__detector_imputed_agg_five_minutes')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_DETECTOR_ID.d40559e09a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__global_coefficients_DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__global_coefficients_DETECTOR_ID.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_DETECTOR_ID.d40559e09a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__global_coefficients_DETECTOR_ID"], "alias": "not_null_int_imputation__global_coefficients_DETECTOR_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2886672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__global_coefficients", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__global_coefficients_DETECTOR_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DETECTOR_ID\nfrom ANALYTICS_PRD.imputation.int_imputation__global_coefficients\nwhere DETECTOR_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DETECTOR_ID", "file_key_name": "models.int_imputation__global_coefficients", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DETECTOR_ID", "model": "{{ get_where_subquery(ref('int_imputation__global_coefficients')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_REGRESSION_DATE.d22c3c3b6c": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_imputation__global_coefficients_REGRESSION_DATE", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_imputation__global_coefficients_REGRESSION_DATE.sql", "original_file_path": "models/intermediate/imputation/_imputation.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_REGRESSION_DATE.d22c3c3b6c", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "imputation", "not_null_int_imputation__global_coefficients_REGRESSION_DATE"], "alias": "not_null_int_imputation__global_coefficients_REGRESSION_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.2901433, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_imputation__global_coefficients", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/imputation/_imputation.yml/not_null_int_imputation__global_coefficients_REGRESSION_DATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGRESSION_DATE\nfrom ANALYTICS_PRD.imputation.int_imputation__global_coefficients\nwhere REGRESSION_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REGRESSION_DATE", "file_key_name": "models.int_imputation__global_coefficients", "attached_node": "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGRESSION_DATE", "model": "{{ get_where_subquery(ref('int_imputation__global_coefficients')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_id.4e5cf4e6c2": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__det_diag_set_assignment_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__det_diag_set_assignment_station_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_id.4e5cf4e6c2", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__det_diag_set_assignment_station_id"], "alias": "not_null_int_diagnostics__det_diag_set_assignment_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3020236, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__det_diag_set_assignment_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_active_date.ee11dc3c47": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__det_diag_set_assignment_active_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__det_diag_set_assignment_active_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_active_date.ee11dc3c47", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__det_diag_set_assignment_active_date"], "alias": "not_null_int_diagnostics__det_diag_set_assignment_active_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3035786, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__det_diag_set_assignment_active_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\nwhere active_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "active_date", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_date", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_.e3cb85a5b4": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_.e3cb85a5b4", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_"], "alias": "accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529'))"}, "created_at": 1755632024.3050833, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/accepted_values_int_diagnostic_88655b8207cc2a480fe2e4f5d3ba3529.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        district as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\n    group by district\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "district", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "district", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_type.df83d5a819": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__det_diag_set_assignment_station_type", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__det_diag_set_assignment_station_type.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_type.df83d5a819", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__det_diag_set_assignment_station_type"], "alias": "not_null_int_diagnostics__det_diag_set_assignment_station_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.310067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__det_diag_set_assignment_station_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_type\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\nwhere station_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_type", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_type", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id.2f3c1108ec": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id.2f3c1108ec", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id"], "alias": "not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da"}, "created_at": 1755632024.3116279, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__det__3b2191378ee0b9737ebdbdb51a44d0da.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_diagnostic_set_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\nwhere station_diagnostic_set_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_diagnostic_set_id", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_diagnostic_set_id", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id.2c1f45d42a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id.2c1f45d42a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id"], "alias": "not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8"}, "created_at": 1755632024.3131423, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__det_diag_set_assignment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__det__f20b0181fee3480bc59f1a7cc0a7a3f8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_diagnostic_method_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__det_diag_set_assignment\nwhere station_diagnostic_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_diagnostic_method_id", "file_key_name": "models.int_diagnostics__det_diag_set_assignment", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_diagnostic_method_id", "model": "{{ get_where_subquery(ref('int_diagnostics__det_diag_set_assignment')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_sample_date.a5debcc904": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__samples_per_detector_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__samples_per_detector_sample_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_sample_date.a5debcc904", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__samples_per_detector_sample_date"], "alias": "not_null_int_diagnostics__samples_per_detector_sample_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3146384, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__samples_per_detector_sample_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__samples_per_detector_district___var_districts_.f16e5ab328": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_diagnostics__samples_per_detector_district___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__samples_per_detector_district___var_districts_.f16e5ab328", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "accepted_values_int_diagnostics__samples_per_detector_district___var_districts_"], "alias": "accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13'))"}, "created_at": 1755632024.316292, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/accepted_values_int_diagnostic_f0e4c60e2d744ec73a5735e11372bd13.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        district as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\n    group by district\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "district", "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "district", "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_station_id.bbda3aa060": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__samples_per_detector_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__samples_per_detector_station_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_station_id.bbda3aa060", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__samples_per_detector_station_id"], "alias": "not_null_int_diagnostics__samples_per_detector_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3210478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__samples_per_detector_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_detector_id.931e1196f3": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__samples_per_detector_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__samples_per_detector_detector_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_detector_id.931e1196f3", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__samples_per_detector_detector_id"], "alias": "not_null_int_diagnostics__samples_per_detector_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.322574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__samples_per_detector_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_lane.dfaf85c7c1": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__samples_per_detector_lane", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__samples_per_detector_lane.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_lane.dfaf85c7c1", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__samples_per_detector_lane"], "alias": "not_null_int_diagnostics__samples_per_detector_lane", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.324343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__samples_per_detector_lane.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lane\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\nwhere lane is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "lane", "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lane", "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID.285471e8ba": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID.285471e8ba", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID"], "alias": "dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828'))"}, "created_at": 1755632024.325887, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__samples_per_detector", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/dbt_utils_unique_combination_o_d78d31f38c2d091fd469d333f2bb0828.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        SAMPLE_DATE, DETECTOR_ID\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__samples_per_detector\n    group by SAMPLE_DATE, DETECTOR_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_diagnostics__samples_per_detector", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SAMPLE_DATE", "DETECTOR_ID"], "model": "{{ get_where_subquery(ref('int_diagnostics__samples_per_detector')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_active_date.5786c23639": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_active_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_active_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_active_date.5786c23639", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_active_date"], "alias": "not_null_int_diagnostics__detector_status_active_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.330203, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_active_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere active_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "active_date", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_date", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_sample_date.b485240d73": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_sample_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_sample_date.b485240d73", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_sample_date"], "alias": "not_null_int_diagnostics__detector_status_sample_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.331973, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_sample_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_id.59dc345670": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_station_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_id.59dc345670", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_station_id"], "alias": "not_null_int_diagnostics__detector_status_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3334756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_detector_id.89a8ed788a": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_detector_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_detector_id.89a8ed788a", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_detector_id"], "alias": "not_null_int_diagnostics__detector_status_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3349547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_status.e5917f66af": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_status", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_status.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_status.e5917f66af", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_status"], "alias": "not_null_int_diagnostics__detector_status_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3364465, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_type.4e21d76782": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_station_type", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_station_type.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_type.4e21d76782", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_station_type"], "alias": "not_null_int_diagnostics__detector_status_station_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3379297, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_station_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_type\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere station_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_type", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_type", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_lane.14b76d7583": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_lane", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__detector_status_lane.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_lane.14b76d7583", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_lane"], "alias": "not_null_int_diagnostics__detector_status_lane", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3395393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__detector_status_lane.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lane\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere lane is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "lane", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "lane", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__detector_status_district___var_districts_.8e1a4f4570": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_diagnostics__detector_status_district___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__detector_status_district___var_districts_.8e1a4f4570", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "accepted_values_int_diagnostics__detector_status_district___var_districts_"], "alias": "accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c'))"}, "created_at": 1755632024.3410513, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/accepted_values_int_diagnostic_8154d15ecb9defdabd6e111b6710839c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        district as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    group by district\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "district", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "district", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_diagnostic_method_id.d155d64beb": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__detector_status_station_diagnostic_method_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_diagnostic_method_id.d155d64beb", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__detector_status_station_diagnostic_method_id"], "alias": "not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d"}, "created_at": 1755632024.3458943, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__dete_e78c27c4eef8a1a33fa987f995eaf69d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_diagnostic_method_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\nwhere station_diagnostic_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_diagnostic_method_id", "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_diagnostic_method_id", "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID.e726e8f900": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID.e726e8f900", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID"], "alias": "dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6'))"}, "created_at": 1755632024.3476157, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__detector_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/dbt_utils_unique_combination_o_6e590e5234526f363f231c3198190db6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        SAMPLE_DATE, DETECTOR_ID\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__detector_status\n    group by SAMPLE_DATE, DETECTOR_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_diagnostics__detector_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SAMPLE_DATE", "DETECTOR_ID"], "model": "{{ get_where_subquery(ref('int_diagnostics__detector_status')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_detector_id.358b0c76a8": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__constant_occupancy_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__constant_occupancy_detector_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_detector_id.358b0c76a8", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__constant_occupancy_detector_id"], "alias": "not_null_int_diagnostics__constant_occupancy_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3517904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__constant_occupancy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__constant_occupancy_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__constant_occupancy\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_diagnostics__constant_occupancy", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_diagnostics__constant_occupancy')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_sample_date.5f54be703f": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__constant_occupancy_sample_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__constant_occupancy_sample_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_sample_date.5f54be703f", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__constant_occupancy_sample_date"], "alias": "not_null_int_diagnostics__constant_occupancy_sample_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3532934, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__constant_occupancy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__constant_occupancy_sample_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sample_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__constant_occupancy\nwhere sample_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sample_date", "file_key_name": "models.int_diagnostics__constant_occupancy", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sample_date", "model": "{{ get_where_subquery(ref('int_diagnostics__constant_occupancy')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_active_date.74e12d58d6": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__no_data_status_active_date", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__no_data_status_active_date.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_active_date.74e12d58d6", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__no_data_status_active_date"], "alias": "not_null_int_diagnostics__no_data_status_active_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3553674, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__no_data_status_active_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_date\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status\nwhere active_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "active_date", "file_key_name": "models.int_diagnostics__no_data_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "active_date", "model": "{{ get_where_subquery(ref('int_diagnostics__no_data_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__no_data_status_district___var_districts_.70e36d9aa7": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "accepted_values_int_diagnostics__no_data_status_district___var_districts_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__no_data_status_district___var_districts_.70e36d9aa7", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "accepted_values_int_diagnostics__no_data_status_district___var_districts_"], "alias": "accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c'))"}, "created_at": 1755632024.3569052, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/accepted_values_int_diagnostic_71adc7071bc365389ee6cd2a881eb78c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        district as value_field,\n        count(*) as n_records\n\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status\n    group by district\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','2','3','4','5','6','7','8','9','10','11','12'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "district", "file_key_name": "models.int_diagnostics__no_data_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var('districts') }}", "column_name": "district", "model": "{{ get_where_subquery(ref('int_diagnostics__no_data_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_station_id.4763214a01": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__no_data_status_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__no_data_status_station_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_station_id.4763214a01", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__no_data_status_station_id"], "alias": "not_null_int_diagnostics__no_data_status_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3616571, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__no_data_status_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_diagnostics__no_data_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_diagnostics__no_data_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_detector_id.da89c83682": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_diagnostics__no_data_status_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_diagnostics__no_data_status_detector_id.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_detector_id.da89c83682", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "not_null_int_diagnostics__no_data_status_detector_id"], "alias": "not_null_int_diagnostics__no_data_status_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.363384, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/not_null_int_diagnostics__no_data_status_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_diagnostics__no_data_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_diagnostics__no_data_status')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID.6021199b99": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d.sql", "original_file_path": "models/intermediate/diagnostics/_diagnostics.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID.6021199b99", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "diagnostics", "dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID"], "alias": "dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d'))"}, "created_at": 1755632024.364921, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_diagnostics__no_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/diagnostics/_diagnostics.yml/dbt_utils_unique_combination_o_ea720e7cccd331e257f105e8fcd1d69d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ACTIVE_DATE, DETECTOR_ID\n    from ANALYTICS_PRD.diagnostics.int_diagnostics__no_data_status\n    group by ACTIVE_DATE, DETECTOR_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_diagnostics__no_data_status", "attached_node": "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ACTIVE_DATE", "DETECTOR_ID"], "model": "{{ get_where_subquery(ref('int_diagnostics__no_data_status')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config_controller_id.b389c43d70": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__controller_config_controller_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__controller_config_controller_id.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config_controller_id.b389c43d70", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__controller_config_controller_id"], "alias": "not_null_int_vds__controller_config_controller_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3829212, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__controller_config_controller_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect controller_id\nfrom ANALYTICS_PRD.vds.int_vds__controller_config\nwhere controller_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "controller_id", "file_key_name": "models.int_vds__controller_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "controller_id", "model": "{{ get_where_subquery(ref('int_vds__controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config__valid_from.c3d32ffb6e": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__controller_config__valid_from", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__controller_config__valid_from.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config__valid_from.c3d32ffb6e", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__controller_config__valid_from"], "alias": "not_null_int_vds__controller_config__valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3845658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__controller_config__valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _valid_from\nfrom ANALYTICS_PRD.vds.int_vds__controller_config\nwhere _valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_valid_from", "file_key_name": "models.int_vds__controller_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_valid_from", "model": "{{ get_where_subquery(ref('int_vds__controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO.891389041c": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO.891389041c", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO"], "alias": "dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d'))"}, "created_at": 1755632024.386137, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/dbt_utils_unique_combination_o_83d5d379ec8ab3380c5d313f0aa2193d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTROLLER_ID, _VALID_TO\n    from ANALYTICS_PRD.vds.int_vds__controller_config\n    group by CONTROLLER_ID, _VALID_TO\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_vds__controller_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTROLLER_ID", "_VALID_TO"], "model": "{{ get_where_subquery(ref('int_vds__controller_config')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config_station_id.d834fe2c05": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__station_config_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__station_config_station_id.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config_station_id.d834fe2c05", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__station_config_station_id"], "alias": "not_null_int_vds__station_config_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3906758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__station_config_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.vds.int_vds__station_config\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_vds__station_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_vds__station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config__valid_from.367ed1e9b5": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__station_config__valid_from", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__station_config__valid_from.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config__valid_from.367ed1e9b5", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__station_config__valid_from"], "alias": "not_null_int_vds__station_config__valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3922002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__station_config__valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _valid_from\nfrom ANALYTICS_PRD.vds.int_vds__station_config\nwhere _valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_valid_from", "file_key_name": "models.int_vds__station_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_valid_from", "model": "{{ get_where_subquery(ref('int_vds__station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO.6a789d00e0": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO.6a789d00e0", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO"], "alias": "dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8'))"}, "created_at": 1755632024.393749, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/dbt_utils_unique_combination_o_02632aa571c9cd7b2cafecef15f18ff8.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        STATION_ID, _VALID_TO\n    from ANALYTICS_PRD.vds.int_vds__station_config\n    group by STATION_ID, _VALID_TO\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_vds__station_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["STATION_ID", "_VALID_TO"], "model": "{{ get_where_subquery(ref('int_vds__station_config')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config_detector_id.4d9c7cae39": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__detector_config_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__detector_config_detector_id.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config_detector_id.4d9c7cae39", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__detector_config_detector_id"], "alias": "not_null_int_vds__detector_config_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3981557, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__detector_config_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.vds.int_vds__detector_config\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.int_vds__detector_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('int_vds__detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config__valid_from.5c4ca5caaf": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__detector_config__valid_from", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__detector_config__valid_from.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config__valid_from.5c4ca5caaf", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__detector_config__valid_from"], "alias": "not_null_int_vds__detector_config__valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.3996978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__detector_config__valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _valid_from\nfrom ANALYTICS_PRD.vds.int_vds__detector_config\nwhere _valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_valid_from", "file_key_name": "models.int_vds__detector_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_valid_from", "model": "{{ get_where_subquery(ref('int_vds__detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO.3a9e44b39e": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO.3a9e44b39e", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO"], "alias": "dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2'))"}, "created_at": 1755632024.4012172, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/dbt_utils_unique_combination_o_54cf8f000fe69c1cdfb0c7445ca23fb2.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DETECTOR_ID, _VALID_TO\n    from ANALYTICS_PRD.vds.int_vds__detector_config\n    group by DETECTOR_ID, _VALID_TO\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_vds__detector_config", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DETECTOR_ID", "_VALID_TO"], "model": "{{ get_where_subquery(ref('int_vds__detector_config')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_station_id.1cac9af910": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__nearby_stations_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__nearby_stations_station_id.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_station_id.1cac9af910", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__nearby_stations_station_id"], "alias": "not_null_int_vds__nearby_stations_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4056118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__nearby_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__nearby_stations_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.vds.int_vds__nearby_stations\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.int_vds__nearby_stations", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('int_vds__nearby_stations')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations__valid_from.9ce32994d4": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__nearby_stations__valid_from", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__nearby_stations__valid_from.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations__valid_from.9ce32994d4", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__nearby_stations__valid_from"], "alias": "not_null_int_vds__nearby_stations__valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4071174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__nearby_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__nearby_stations__valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _valid_from\nfrom ANALYTICS_PRD.vds.int_vds__nearby_stations\nwhere _valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_valid_from", "file_key_name": "models.int_vds__nearby_stations", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_valid_from", "model": "{{ get_where_subquery(ref('int_vds__nearby_stations')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_OTHER_STATION_ID.35b161098c": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_int_vds__nearby_stations_OTHER_STATION_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_int_vds__nearby_stations_OTHER_STATION_ID.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_OTHER_STATION_ID.35b161098c", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "not_null_int_vds__nearby_stations_OTHER_STATION_ID"], "alias": "not_null_int_vds__nearby_stations_OTHER_STATION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4086325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__nearby_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/not_null_int_vds__nearby_stations_OTHER_STATION_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OTHER_STATION_ID\nfrom ANALYTICS_PRD.vds.int_vds__nearby_stations\nwhere OTHER_STATION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OTHER_STATION_ID", "file_key_name": "models.int_vds__nearby_stations", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OTHER_STATION_ID", "model": "{{ get_where_subquery(ref('int_vds__nearby_stations')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO.d6fedbcfc4": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720.sql", "original_file_path": "models/intermediate/vds/_vds.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO.d6fedbcfc4", "fqn": ["caldata_mdsa_caltrans_pems", "intermediate", "vds", "dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO"], "alias": "dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720'))"}, "created_at": 1755632024.410186, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_vds__nearby_stations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/intermediate/vds/_vds.yml/dbt_utils_unique_combination_o_f19ec1b6c4bc05eafbd0fb07fa9ac720.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        STATION_ID, OTHER_STATION_ID, _VALID_TO\n    from ANALYTICS_PRD.vds.int_vds__nearby_stations\n    group by STATION_ID, OTHER_STATION_ID, _VALID_TO\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_vds__nearby_stations", "attached_node": "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["STATION_ID", "OTHER_STATION_ID", "_VALID_TO"], "model": "{{ get_where_subquery(ref('int_vds__nearby_stations')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_meta_ID.8bb6e726cd": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_clearinghouse__station_meta_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_clearinghouse__station_meta_ID.sql", "original_file_path": "models/staging/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_meta_ID.8bb6e726cd", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "not_null_stg_clearinghouse__station_meta_ID"], "alias": "not_null_stg_clearinghouse__station_meta_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.428053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_meta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/_clearinghouse.yml/not_null_stg_clearinghouse__station_meta_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ID\nfrom ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_meta\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ID", "file_key_name": "models.stg_clearinghouse__station_meta", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('stg_clearinghouse__station_meta')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_ID.8fdaf0ebd1": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_clearinghouse__station_raw_ID", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_clearinghouse__station_raw_ID.sql", "original_file_path": "models/staging/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_ID.8fdaf0ebd1", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "not_null_stg_clearinghouse__station_raw_ID"], "alias": "not_null_stg_clearinghouse__station_raw_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4296613, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_raw", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/_clearinghouse.yml/not_null_stg_clearinghouse__station_raw_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ID\nfrom ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_raw\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ID", "file_key_name": "models.stg_clearinghouse__station_raw", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('stg_clearinghouse__station_raw')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.ab5501c249": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.sql", "original_file_path": "models/staging/clearinghouse/_clearinghouse.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.ab5501c249", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "clearinghouse", "not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP"], "alias": "not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4312422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_clearinghouse__station_raw", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/clearinghouse/_clearinghouse.yml/not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SAMPLE_TIMESTAMP\nfrom ANALYTICS_PRD.clearinghouse.stg_clearinghouse__station_raw\nwhere SAMPLE_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SAMPLE_TIMESTAMP", "file_key_name": "models.stg_clearinghouse__station_raw", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SAMPLE_TIMESTAMP", "model": "{{ get_where_subquery(ref('stg_clearinghouse__station_raw')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_controller_id.305a718762": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__controller_config_controller_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__controller_config_controller_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_controller_id.305a718762", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__controller_config_controller_id"], "alias": "not_null_stg_db96__controller_config_controller_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.454011, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__controller_config_controller_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect controller_id\nfrom ANALYTICS_PRD.db96.stg_db96__controller_config\nwhere controller_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "controller_id", "file_key_name": "models.stg_db96__controller_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "controller_id", "model": "{{ get_where_subquery(ref('stg_db96__controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.unique_stg_db96__controller_config_controller_id.e076f51952": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "unique_stg_db96__controller_config_controller_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "unique_stg_db96__controller_config_controller_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.unique_stg_db96__controller_config_controller_id.e076f51952", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "unique_stg_db96__controller_config_controller_id"], "alias": "unique_stg_db96__controller_config_controller_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4556062, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__controller_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/unique_stg_db96__controller_config_controller_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    controller_id as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS_PRD.db96.stg_db96__controller_config\nwhere controller_id is not null\ngroup by controller_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "controller_id", "file_key_name": "models.stg_db96__controller_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config", "test_metadata": {"name": "unique", "kwargs": {"column_name": "controller_id", "model": "{{ get_where_subquery(ref('stg_db96__controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_log_controller_id.fd4291b6dc": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__controller_config_log_controller_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__controller_config_log_controller_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_log_controller_id.fd4291b6dc", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__controller_config_log_controller_id"], "alias": "not_null_stg_db96__controller_config_log_controller_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.457123, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__controller_config_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__controller_config_log_controller_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect controller_id\nfrom ANALYTICS_PRD.db96.stg_db96__controller_config_log\nwhere controller_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "controller_id", "file_key_name": "models.stg_db96__controller_config_log", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "controller_id", "model": "{{ get_where_subquery(ref('stg_db96__controller_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_station_id.4cf48b71ea": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__station_config_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__station_config_station_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_station_id.4cf48b71ea", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__station_config_station_id"], "alias": "not_null_stg_db96__station_config_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4586387, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__station_config_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.db96.stg_db96__station_config\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.stg_db96__station_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__station_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('stg_db96__station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.unique_stg_db96__station_config_station_id.d0d27cec9b": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "unique_stg_db96__station_config_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "unique_stg_db96__station_config_station_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.unique_stg_db96__station_config_station_id.d0d27cec9b", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "unique_stg_db96__station_config_station_id"], "alias": "unique_stg_db96__station_config_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.460122, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__station_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/unique_stg_db96__station_config_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    station_id as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS_PRD.db96.stg_db96__station_config\nwhere station_id is not null\ngroup by station_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.stg_db96__station_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__station_config", "test_metadata": {"name": "unique", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('stg_db96__station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_log_station_id.97d2183445": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__station_config_log_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__station_config_log_station_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_log_station_id.97d2183445", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__station_config_log_station_id"], "alias": "not_null_stg_db96__station_config_log_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4616144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__station_config_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__station_config_log_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect station_id\nfrom ANALYTICS_PRD.db96.stg_db96__station_config_log\nwhere station_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "station_id", "file_key_name": "models.stg_db96__station_config_log", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(ref('stg_db96__station_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_detector_id.4b1b87d07c": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__detector_config_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__detector_config_detector_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_detector_id.4b1b87d07c", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__detector_config_detector_id"], "alias": "not_null_stg_db96__detector_config_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4631882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__detector_config_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.db96.stg_db96__detector_config\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.stg_db96__detector_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('stg_db96__detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.unique_stg_db96__detector_config_detector_id.94c6915b93": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "unique_stg_db96__detector_config_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "unique_stg_db96__detector_config_detector_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.unique_stg_db96__detector_config_detector_id.94c6915b93", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "unique_stg_db96__detector_config_detector_id"], "alias": "unique_stg_db96__detector_config_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4646714, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__detector_config", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/unique_stg_db96__detector_config_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    detector_id as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS_PRD.db96.stg_db96__detector_config\nwhere detector_id is not null\ngroup by detector_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.stg_db96__detector_config", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "test_metadata": {"name": "unique", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('stg_db96__detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_log_detector_id.c96cf05de1": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "not_null_stg_db96__detector_config_log_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "not_null_stg_db96__detector_config_log_detector_id.sql", "original_file_path": "models/staging/db96/_db96.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_log_detector_id.c96cf05de1", "fqn": ["caldata_mdsa_caltrans_pems", "staging", "db96", "not_null_stg_db96__detector_config_log_detector_id"], "alias": "not_null_stg_db96__detector_config_log_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.466144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_db96__detector_config_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/staging/db96/_db96.yml/not_null_stg_db96__detector_config_log_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect detector_id\nfrom ANALYTICS_PRD.db96.stg_db96__detector_config_log\nwhere detector_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "detector_id", "file_key_name": "models.stg_db96__detector_config_log", "attached_node": "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(ref('stg_db96__detector_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_.0d08a5e84f": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_controller_config_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_controller_config_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_.0d08a5e84f", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_controller_config_"], "alias": "source_not_empty_db96_controller_config_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.4987886, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_controller_config_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.controller_config\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_unique_db96_controller_config_controller_id.cd75d813b7": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_unique_db96_controller_config_controller_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_unique_db96_controller_config_controller_id.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_unique_db96_controller_config_controller_id.cd75d813b7", "fqn": ["caldata_mdsa_caltrans_pems", "source_unique_db96_controller_config_controller_id"], "alias": "source_unique_db96_controller_config_controller_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.5036616, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_unique_db96_controller_config_controller_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    controller_id as unique_field,\n    count(*) as n_records\n\nfrom RAW_PRD.db96.controller_config\nwhere controller_id is not null\ngroup by controller_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "controller_id", "model": "{{ get_where_subquery(source('db96', 'controller_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_log_.9a685f5015": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_controller_config_log_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_controller_config_log_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_log_.9a685f5015", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_controller_config_log_"], "alias": "source_not_empty_db96_controller_config_log_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.5058398, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_controller_config_log_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.controller_config_log\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'controller_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id.8e887df6cf": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id.8e887df6cf", "fqn": ["caldata_mdsa_caltrans_pems", "dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id"], "alias": "dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c'))"}, "created_at": 1755632024.509637, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "controller_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/dbt_utils_source_unique_combin_6575d311bb057bbbfc0ba12c18cff78c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        controller_id, time_id\n    from RAW_PRD.db96.controller_config_log\n    group by controller_id, time_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["controller_id", "time_id"], "model": "{{ get_where_subquery(source('db96', 'controller_config_log')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_.31b0f54c1e": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_station_config_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_station_config_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_.31b0f54c1e", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_station_config_"], "alias": "source_not_empty_db96_station_config_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.5156147, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_station_config_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.station_config\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_unique_db96_station_config_station_id.f6ea518fb5": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_unique_db96_station_config_station_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_unique_db96_station_config_station_id.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_unique_db96_station_config_station_id.f6ea518fb5", "fqn": ["caldata_mdsa_caltrans_pems", "source_unique_db96_station_config_station_id"], "alias": "source_unique_db96_station_config_station_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.519186, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_unique_db96_station_config_station_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    station_id as unique_field,\n    count(*) as n_records\n\nfrom RAW_PRD.db96.station_config\nwhere station_id is not null\ngroup by station_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "station_id", "model": "{{ get_where_subquery(source('db96', 'station_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_log_.4844ae5c4e": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_station_config_log_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_station_config_log_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_log_.4844ae5c4e", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_station_config_log_"], "alias": "source_not_empty_db96_station_config_log_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.5213666, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_station_config_log_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.station_config_log\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'station_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id.6157a011ae": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id.6157a011ae", "fqn": ["caldata_mdsa_caltrans_pems", "dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id"], "alias": "dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c'))"}, "created_at": 1755632024.5251596, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "station_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/dbt_utils_source_unique_combin_e8af29b2f4a970cee1fae22b0621544c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        station_id, time_id\n    from RAW_PRD.db96.station_config_log\n    group by station_id, time_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["station_id", "time_id"], "model": "{{ get_where_subquery(source('db96', 'station_config_log')) }}"}, "namespace": "dbt_utils"}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_.37c2ba5fb6": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_detector_config_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_detector_config_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_.37c2ba5fb6", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_detector_config_"], "alias": "source_not_empty_db96_detector_config_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.5305383, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_detector_config_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.detector_config\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_unique_db96_detector_config_detector_id.c1a0cde27d": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_unique_db96_detector_config_detector_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_unique_db96_detector_config_detector_id.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_unique_db96_detector_config_detector_id.c1a0cde27d", "fqn": ["caldata_mdsa_caltrans_pems", "source_unique_db96_detector_config_detector_id"], "alias": "source_unique_db96_detector_config_detector_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.534182, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_unique_db96_detector_config_detector_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    detector_id as unique_field,\n    count(*) as n_records\n\nfrom RAW_PRD.db96.detector_config\nwhere detector_id is not null\ngroup by detector_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "detector_id", "model": "{{ get_where_subquery(source('db96', 'detector_config')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_log_.2de5555832": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "source_not_empty_db96_detector_config_log_", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "source_not_empty_db96_detector_config_log_.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_log_.2de5555832", "fqn": ["caldata_mdsa_caltrans_pems", "source_not_empty_db96_detector_config_log_"], "alias": "source_not_empty_db96_detector_config_log_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1755632024.536544, "relation_name": null, "raw_code": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/source_not_empty_db96_detector_config_log_.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n   select count(0) as num_rows\n   from RAW_PRD.db96.detector_config_log\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(source('db96', 'detector_config_log')) }}"}, "namespace": null}}, "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id.3dc584c5d3": {"database": "ANALYTICS_PRD", "schema": "dbt_test__audit", "name": "dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id", "resource_type": "test", "package_name": "caldata_mdsa_caltrans_pems", "path": "dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106.sql", "original_file_path": "models/_sources.yml", "unique_id": "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id.3dc584c5d3", "fqn": ["caldata_mdsa_caltrans_pems", "dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id"], "alias": "dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "Keyword(key='alias', value=Const(value='dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106'))"}, "created_at": 1755632024.5401337, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["db96", "detector_config_log"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"]}, "compiled_path": "target/compiled/caldata_mdsa_caltrans_pems/models/_sources.yml/dbt_utils_source_unique_combin_b06d66822573f035bdd05cf3de468106.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        detector_id, time_id\n    from RAW_PRD.db96.detector_config_log\n    group by detector_id, time_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.db96", "attached_node": null, "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["detector_id", "time_id"], "model": "{{ get_where_subquery(source('db96', 'detector_config_log')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta": {"database": "RAW_PRD", "schema": "clearinghouse", "name": "station_meta", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta", "fqn": ["caldata_mdsa_caltrans_pems", "clearinghouse", "station_meta"], "source_name": "clearinghouse", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained from the PeMS clearinghouse", "loader": "", "identifier": "station_meta", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains Vehicle Detector Station (VDS) metadata related to a specific VDS\nwhich are also typically referred to as Stations.\n", "columns": {"ABS_PM": {"name": "ABS_PM", "description": "Absolute postmile value along a partilcuar state route where the VDS is located", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CITY": {"name": "CITY", "description": "The city number where the VDS is located, if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTY": {"name": "COUNTY", "description": "The unique number that identifies the county that contains a specific VDS within PeMS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DIR": {"name": "DIR", "description": "A string indicating the freeway direction of a specific VDS. Directions are N, E, S or W.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the VDS is located. Values are 1-12", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FILENAME": {"name": "FILENAME", "description": "The name of the file in the clearinghouse where the metdata was obtained from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FWY": {"name": "FWY", "description": "The freeway where the VDS is located", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ID": {"name": "ID", "description": "An integer value that uniquely indenties the Station Metadata.\nUse this value to 'join' other clearinghouse files that contain Station Metadata\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LANES": {"name": "LANES", "description": "Total number of lanes for a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LATITUDE": {"name": "LATITUDE", "description": "Latitude of a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LENGTH": {"name": "LENGTH", "description": "The length associated with a VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "Longitude of a specific VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME": {"name": "NAME", "description": "A descriptive name assocaited with a VDS", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_PM": {"name": "STATE_PM", "description": "State Postmile value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "TYPE": {"name": "TYPE", "description": "Two character string identify the VDS type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_1": {"name": "USER_ID_1", "description": "User-entered string identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_2": {"name": "USER_ID_2", "description": "User-entered string identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_3": {"name": "USER_ID_3", "description": "User-entered string identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_4": {"name": "USER_ID_4", "description": "User-entered string identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.clearinghouse.station_meta", "created_at": 1755632024.4877896, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "clearinghouse", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw": {"database": "RAW_PRD", "schema": "clearinghouse", "name": "station_raw", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw", "fqn": ["caldata_mdsa_caltrans_pems", "clearinghouse", "station_raw"], "source_name": "clearinghouse", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained from the PeMS clearinghouse", "loader": "", "identifier": "station_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "SAMPLE_TIMESTAMP", "loaded_at_query": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "external": null, "description": "Raw detector data as reported every 30 seconds by the district.\nEach line contains the sample timestamp and Station ID followed by flow,\noccupancy and speed for each lane. Note that occupancy and/or speed may be empty\ndepending on the measurement capabilities of the detectors.\n", "columns": {"FILENAME": {"name": "FILENAME", "description": "The name of the file in the clearinghouse where the data was obtained from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ID": {"name": "ID", "description": "Unique VDS (station identifier) value. Use this value to cross-reference with Metadata files.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "30 second raw data sample time as reported by the field element as YYYY/MM/DD.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIMESTAMP": {"name": "SAMPLE_TIMESTAMP", "description": "30 second raw data sample time as reported by the field element as YYYY/MM/DD HH24:MI:SS.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_1": {"name": "FLOW_1", "description": "Number of vehicle that passed over the detector during the sample period for lane 1.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_2": {"name": "FLOW_2", "description": "Number of vehicle that passed over the detector during the sample period for lane 2.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_3": {"name": "FLOW_3", "description": "Number of vehicle that passed over the detector during the sample period for lane 3.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_4": {"name": "FLOW_4", "description": "Number of vehicle that passed over the detector during the sample period for lane 4.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_5": {"name": "FLOW_5", "description": "Number of vehicle that passed over the detector during the sample period for lane 5.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_6": {"name": "FLOW_6", "description": "Number of vehicle that passed over the detector during the sample period for lane 6.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_7": {"name": "FLOW_7", "description": "Number of vehicle that passed over the detector during the sample period for lane 7.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "FLOW_8": {"name": "FLOW_8", "description": "Number of vehicle that passed over the detector during the sample period for lane 8.\nUnits are Vehicles/sample period.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_1": {"name": "OCCUPANCY_1", "description": "Occupancy of the lane 1 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_2": {"name": "OCCUPANCY_2", "description": "Occupancy of the lane 2 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_3": {"name": "OCCUPANCY_3", "description": "Occupancy of the lane 3 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_4": {"name": "OCCUPANCY_4", "description": "Occupancy of the lane 4 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_5": {"name": "OCCUPANCY_5", "description": "Occupancy of the lane 5 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_6": {"name": "OCCUPANCY_6", "description": "Occupancy of the lane 6 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_7": {"name": "OCCUPANCY_7", "description": "Occupancy of the lane 7 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_8": {"name": "OCCUPANCY_8", "description": "Occupancy of the lane 8 during the sample period expressed as a decimal number between 0 and 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_1": {"name": "SPEED_1", "description": "Speed in lane 1 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_2": {"name": "SPEED_2", "description": "Speed in lane 2 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_3": {"name": "SPEED_3", "description": "Speed in lane 3 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_4": {"name": "SPEED_4", "description": "Speed in lane 4 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_5": {"name": "SPEED_5", "description": "Speed in lane 5 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_6": {"name": "SPEED_6", "description": "Speed in lane 6 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_7": {"name": "SPEED_7", "description": "Speed in lane 7 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_8": {"name": "SPEED_8", "description": "Speed in lane 8 as measured by the detector in miles/hour.\nEmpty if the detector does not report speed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "loaded_at_field": "SAMPLE_TIMESTAMP", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 2, "period": "day"}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "loaded_at_field": "SAMPLE_TIMESTAMP", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.clearinghouse.station_raw", "created_at": 1755632024.4906244, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "clearinghouse", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.clearinghouse.station_status": {"database": "RAW_PRD", "schema": "clearinghouse", "name": "station_status", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.clearinghouse.station_status", "fqn": ["caldata_mdsa_caltrans_pems", "clearinghouse", "station_status"], "source_name": "clearinghouse", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained from the PeMS clearinghouse", "loader": "", "identifier": "station_status", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "XML Status data from the [PeMS Clearinghouse Feeds](https://pems.dot.ca.gov/feeds/clhouse/).\nAn example is [here](https://pems.dot.ca.gov/feeds/clhouse/d07/2022/07/meta/d07_tmdd_meta_2022_07_15.xml).\n", "columns": {"FILENAME": {"name": "FILENAME", "description": "The name of the file in the clearinghouse where the metdata was obtained from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CONTENT": {"name": "CONTENT", "description": "The XML content of the status metadata file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.clearinghouse.station_status", "created_at": 1755632024.4912372, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "clearinghouse", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.vds30sec": {"database": "RAW_PRD", "schema": "db96", "name": "vds30sec", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.vds30sec", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "vds30sec"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "vds30sec", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "SAMPLE_TIME", "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "30-second resolution VDS data from DB96, a legacy Oracle database within Caltrans'\non-premise network.\n", "columns": {"FILENAME": {"name": "FILENAME", "description": "The name of the parquet file uploaded to S3 and loaded to Snowflake via Snowpipe.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "META": {"name": "META", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "RECV_TIME": {"name": "RECV_TIME", "description": "TODO", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_DATE": {"name": "SAMPLE_DATE", "description": "The date on which this data was collected (in America/Los_Angeles timezone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SAMPLE_TIME": {"name": "SAMPLE_TIME", "description": "The timestamp for the 30-second resolution data. This is a timezone-naive timestamp,\nas it is also that in the source system. However, it seems to be in America/Los_Angeles.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VDS_ID": {"name": "VDS_ID", "description": "The ID for the VDS station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_1": {"name": "VOLUME_1", "description": "Flow volume for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_2": {"name": "VOLUME_2", "description": "Flow volume for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_3": {"name": "VOLUME_3", "description": "Flow volume for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_4": {"name": "VOLUME_4", "description": "Flow volume for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_5": {"name": "VOLUME_5", "description": "Flow volume for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_6": {"name": "VOLUME_6", "description": "Flow volume for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_7": {"name": "VOLUME_7", "description": "Flow volume for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_8": {"name": "VOLUME_8", "description": "Flow volume for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_9": {"name": "VOLUME_9", "description": "Flow volume for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_10": {"name": "VOLUME_10", "description": "Flow volume for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_11": {"name": "VOLUME_11", "description": "Flow volume for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_12": {"name": "VOLUME_12", "description": "Flow volume for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_13": {"name": "VOLUME_13", "description": "Flow volume for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "VOLUME_14": {"name": "VOLUME_14", "description": "Flow volume for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_1": {"name": "OCCUPANCY_1", "description": "Flow occupancy for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_2": {"name": "OCCUPANCY_2", "description": "Flow occupancy for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_3": {"name": "OCCUPANCY_3", "description": "Flow occupancy for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_4": {"name": "OCCUPANCY_4", "description": "Flow occupancy for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_5": {"name": "OCCUPANCY_5", "description": "Flow occupancy for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_6": {"name": "OCCUPANCY_6", "description": "Flow occupancy for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_7": {"name": "OCCUPANCY_7", "description": "Flow occupancy for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_8": {"name": "OCCUPANCY_8", "description": "Flow occupancy for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_9": {"name": "OCCUPANCY_9", "description": "Flow occupancy for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_10": {"name": "OCCUPANCY_10", "description": "Flow occupancy for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_11": {"name": "OCCUPANCY_11", "description": "Flow occupancy for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_12": {"name": "OCCUPANCY_12", "description": "Flow occupancy for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_13": {"name": "OCCUPANCY_13", "description": "Flow occupancy for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OCCUPANCY_14": {"name": "OCCUPANCY_14", "description": "Flow occupancy for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_1": {"name": "SPEED_1", "description": "Flow speed for lane 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_2": {"name": "SPEED_2", "description": "Flow speed for lane 2.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_3": {"name": "SPEED_3", "description": "Flow speed for lane 3.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_4": {"name": "SPEED_4", "description": "Flow speed for lane 4.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_5": {"name": "SPEED_5", "description": "Flow speed for lane 5.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_6": {"name": "SPEED_6", "description": "Flow speed for lane 6.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_7": {"name": "SPEED_7", "description": "Flow speed for lane 7.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_8": {"name": "SPEED_8", "description": "Flow speed for lane 8.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_9": {"name": "SPEED_9", "description": "Flow speed for lane 9.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_10": {"name": "SPEED_10", "description": "Flow speed for lane 10.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_11": {"name": "SPEED_11", "description": "Flow speed for lane 11.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_12": {"name": "SPEED_12", "description": "Flow speed for lane 12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_13": {"name": "SPEED_13", "description": "Flow speed for lane 13.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "SPEED_14": {"name": "SPEED_14", "description": "Flow speed for lane 14.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": "SAMPLE_TIME", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": "SAMPLE_TIME", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.vds30sec", "created_at": 1755632024.4921358, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.controller_config": {"database": "RAW_PRD", "schema": "db96", "name": "controller_config", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.controller_config", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "controller_config"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "controller_config", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Configuration metadata for VDS controllers. There may be multiple\nstations hooked up to a single controller. For example, the same\ncontroller might have a station for the mainline as well as a station\nfor an onramp.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The unique ID of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_type": {"name": "controller_type", "description": "The type of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district_id": {"name": "district_id", "description": "The Caltrans district for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_id": {"name": "county_id", "description": "The county FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_id": {"name": "city_id", "description": "The city FIPS code in which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway_id": {"name": "freeway_id", "description": "The freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway_dir": {"name": "freeway_dir", "description": "The direction of travel for the freeway on which the controller is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGIN_SET": {"name": "ORIGIN_SET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.controller_config", "created_at": 1755632024.5048459, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.controller_config_log": {"database": "RAW_PRD", "schema": "db96", "name": "controller_config_log", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.controller_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "controller_config_log"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "controller_config_log", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "freshness": {"warn_after": {"count": 30, "period": "day"}, "error_after": {"count": 60, "period": "day"}, "filter": null}, "external": null, "description": "A log table showing updates to the controller config. This can be joined\nwith the `controller_config` table to get a full history of controller metadata.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "equipment_set": {"name": "equipment_set", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The unique ID of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the controller metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "abs_postmile": {"name": "abs_postmile", "description": "The absolute postmile for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_num": {"name": "line_num", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stn_address": {"name": "stn_address", "description": "An address for the controller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "eqp_owner_id": {"name": "eqp_owner_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_1": {"name": "USER_ID_1", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_2": {"name": "USER_ID_2", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_3": {"name": "USER_ID_3", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_4": {"name": "USER_ID_4", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 30, "period": "day"}, "error_after": {"count": 60, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 30, "period": "day"}, "error_after": {"count": 60, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.controller_config_log", "created_at": 1755632024.5135806, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.station_config": {"database": "RAW_PRD", "schema": "db96", "name": "station_config", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.station_config", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "station_config"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "station_config", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Metadata for a single VDS station. Multiple stations may be connected to\na single controller, and multiple detectors may be connected to a single station.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_type": {"name": "station_type", "description": "The type of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "district_id": {"name": "district_id", "description": "The Caltrans district for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "county_id": {"name": "county_id", "description": "The county FIPS code in which the station installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "city_id": {"name": "city_id", "description": "The city FIPS code in which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway_id": {"name": "freeway_id", "description": "The freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "freeway_dir": {"name": "freeway_dir", "description": "The direction of travel for the freeway on which the station is installed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGIN_SET": {"name": "ORIGIN_SET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.station_config", "created_at": 1755632024.5203855, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.station_config_log": {"database": "RAW_PRD", "schema": "db96", "name": "station_config_log", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.station_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "station_config_log"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "station_config_log", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "external": null, "description": "A log table showing updates to the station config. This can be joined\nwith the `station_config` table to get a full history of station metadata.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "equipment_set": {"name": "equipment_set", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "The unique ID of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the station metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "physical_lanes": {"name": "physical_lanes", "description": "The number of lanes in the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "use_speed": {"name": "use_speed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dt_set_id": {"name": "dt_set_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "state_postmile": {"name": "state_postmile", "description": "The State postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "abs_postmile": {"name": "abs_postmile", "description": "The absolute postmile for the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "latitude": {"name": "latitude", "description": "The latitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "longitude": {"name": "longitude", "description": "The longitude of the station.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "angle": {"name": "angle", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "seg_start": {"name": "seg_start", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "seg_end": {"name": "seg_end", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_1": {"name": "USER_ID_1", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_2": {"name": "USER_ID_2", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_3": {"name": "USER_ID_3", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "USER_ID_4": {"name": "USER_ID_4", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "controller_id": {"name": "controller_id", "description": "The ID of the controller to which the station is attached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.station_config_log", "created_at": 1755632024.5295236, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.detector_config": {"database": "RAW_PRD", "schema": "db96", "name": "detector_config", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.detector_config", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "detector_config"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "detector_config", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Metadata for a single loop detector. This is the device that actually records\nflow, occupancy, and speed, and is typically installed in a single lane.\nMultiple detectors across a set of lanes constitute a station.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_type": {"name": "detector_type", "description": "The type of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ORIGIN_SET": {"name": "ORIGIN_SET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.detector_config", "created_at": 1755632024.5355566, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.db96.detector_config_log": {"database": "RAW_PRD", "schema": "db96", "name": "detector_config_log", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.db96.detector_config_log", "fqn": ["caldata_mdsa_caltrans_pems", "db96", "detector_config_log"], "source_name": "db96", "source_description": "Vehicle Detector Station (VDS) (aka Station) related data obtained via data relay from\ndb96 within the Caltrans network.\n", "loader": "", "identifier": "detector_config_log", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "external": null, "description": "A log table showing updates to the detector config. This can be joined\nwith the `detector_config` table to get a full history of detector metadata.\n", "columns": {"meta": {"name": "meta", "description": "Metadata from the data relay scripts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "equipment_set": {"name": "equipment_set", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "detector_id": {"name": "detector_id", "description": "The unique ID of the detector.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "time_id": {"name": "time_id", "description": "The update timestamp for the detector metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "station_id": {"name": "station_id", "description": "The ID of the station to which the controller is connected", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lane": {"name": "lane", "description": "The lane number of the detector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "slot": {"name": "slot", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "volume_flag": {"name": "volume_flag", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "logical_position": {"name": "logical_position", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"freshness": {"warn_after": {"count": 15, "period": "day"}, "error_after": {"count": 30, "period": "day"}, "filter": null}, "loaded_at_field": "time_id", "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.db96.detector_config_log", "created_at": 1755632024.5441806, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "db96", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries": {"database": "RAW_PRD", "schema": "geo_reference", "name": "county_boundaries", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries", "fqn": ["caldata_mdsa_caltrans_pems", "geo_reference", "county_boundaries"], "source_name": "geo_reference", "source_description": "Geographic tables to be used in creating maps and other GIS-related visualizations.", "loader": "", "identifier": "county_boundaries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This polygon feature class represents the California county boundaries. Based on TIGER/Line 2010 county\nfiles, the Caltrans districts and California county name abbreviation were added to this layer for\nCaltrans internal GIS application. [Data\nsource](https://gisdata-caltrans.opendata.arcgis.com/datasets/111030d0d67e49d789080c47d9e4e618_0/about)\n", "columns": {"OBJECTID": {"name": "OBJECTID", "description": "Unique identifier for the county boundary feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "COUNTYFP10": {"name": "COUNTYFP10", "description": "2020 Census county FIPS code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "GEOID10": {"name": "GEOID10", "description": "2020 Census state and county FIPS codes concatenated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "NAME10": {"name": "NAME10", "description": "The County's name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ALAND10": {"name": "ALAND10", "description": "unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AWATER10": {"name": "AWATER10", "description": "unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "INTPTLAT10": {"name": "INTPTLAT10", "description": "The latitude of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "INTPTLON10": {"name": "INTPTLON10", "description": "The longitude of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "CO_CODE": {"name": "CO_CODE", "description": "Three chracter county code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT": {"name": "DISTRICT", "description": "The district in which the county boundary is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Shape__Area": {"name": "Shape__Area", "description": "The area of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Shape__Length": {"name": "Shape__Length", "description": "The length of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "geometry": {"name": "geometry", "description": "The geometry of the county boundary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.geo_reference.county_boundaries", "created_at": 1755632024.544806, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "geo_reference", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.geo_reference.districts": {"database": "RAW_PRD", "schema": "geo_reference", "name": "districts", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.geo_reference.districts", "fqn": ["caldata_mdsa_caltrans_pems", "geo_reference", "districts"], "source_name": "geo_reference", "source_description": "Geographic tables to be used in creating maps and other GIS-related visualizations.", "loader": "", "identifier": "districts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The District feature class is a polygon coverage representing the California Department of Transportation\n(Caltrans) district boundaries. There are 12 Caltrans Districts in California. Caltrans also has Regions\nas higher level management areas. The names of Caltrans Regions are included in the layer attribute table.\n\nThe District boundary definitions are primarily based on the California county boundaries. The Board of\nEqualization (BOE) County and City Boundary web service is the authoritative source of County boundaries\nand this was used to digitize the district boundaries based on the data from March 2023. This data is\nsolely for informational purposes. District 9 has been operating independent of the Central Region since\nNovember 1, 2015. Kern County remains the only split county in the state, between Districts 6 and 9\nrespectively. The BOE data was also used to create the district boundary layers along the coastline.\n[Data source](https://gisdata-caltrans.opendata.arcgis.com/datasets/0144574f750f4ccc88749004aca6eb0c_0/about)\n", "columns": {"DISTRICT": {"name": "DISTRICT", "description": "The territorial division (as for administrative or electoral purposes). Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Region": {"name": "Region", "description": "The administrative area of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Shape__Area": {"name": "Shape__Area", "description": "The area of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Shape__Length": {"name": "Shape__Length", "description": "The length of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "geometry": {"name": "geometry", "description": "The geometry of the district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_ID": {"name": "DISTRICT_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_NAME": {"name": "DISTRICT_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "STATE_ID": {"name": "STATE_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_LONGITUDE": {"name": "DISTRICT_LONGITUDE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "DISTRICT_LATITUDE": {"name": "DISTRICT_LATITUDE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OBJECTID": {"name": "OBJECTID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.geo_reference.districts", "created_at": 1755632024.5453875, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "geo_reference", "doc_blocks": []}, "source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines": {"database": "RAW_PRD", "schema": "geo_reference", "name": "shn_lines", "resource_type": "source", "package_name": "caldata_mdsa_caltrans_pems", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines", "fqn": ["caldata_mdsa_caltrans_pems", "geo_reference", "shn_lines"], "source_name": "geo_reference", "source_description": "Geographic tables to be used in creating maps and other GIS-related visualizations.", "loader": "", "identifier": "shn_lines", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "StateHighways are state highways based upon the Caltrans Linear Referencing System. Each record in this\nlayer represents a highway segment where the county, route, postmile prefix, and postmile suffix are the\nsame. Each segment has a begin and end postmile. This geometry is based upon the extraction from TSN on\n10 October 2022.\n\nEach segment is coded with the district, county, route, postmile prefix (if any), begin postmile, end\npostmile, and postmile suffix (if any). One additional field - AlignCode - should be understood by the\nuser for effective use of this data set (refer to the Entity and Attribute Information section of this\nmetadata).\n\nAlignCode indicates if the state highway segment is on a Right alignment, Left alignment, Right side of\nan independent alignment or Left side of an independent alignment. Where TSN (Transportation System\nNetwork - the source database) considers most state highways to have just a centerline, the underlying\nLRS (Linear Referencing System) linework that these segments are based upon has a line for each direction.\n\nOn undivided highways the right and left lines are identical. On divided highways the right and left are\nseparated, but TSN treats the segment as a single centerline. In the last case where highways are not only\ndivided but also have different lengths (where the right and left carriageway diverge around physical\nobstacles or are separated onto different one-way streets) the underlying linework has dual carriageways,\nand TSN treats the segment as an \"independent alignment\".  In some cases (especially for small-scale\nmapping), it may be appropriate to display linework for just one alignment (e.g. Right alignment), and\nonly for the other side where TSN indicates independent right and left alignments. In other cases (e.g.\nlarge-scale mapping), it may be appropriate to display postmiles for both alignments, regardless of how\nTSN treats the segment.\n\nThe bOdometer and eOdometer fields represent the actual distance in miles from the start of the highway\nto the beginning and end of each highway section.  This is in contrast to the begin and end postmile\nvalues, which no longer represent these values as each highway is realigned (and made longer or shorter)\nover time. [Data\nsource](https://gisdata-caltrans.opendata.arcgis.com/datasets/77f2d7ba94e040a78bfbe36feb6279da_0/about)\n", "columns": {"RouteS": {"name": "RouteS", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PMRouteID": {"name": "PMRouteID", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "County": {"name": "County", "description": "Three chracter county code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "District": {"name": "District", "description": "The district in which the highway is located. Values are 1-12.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PMPrefix": {"name": "PMPrefix", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bPM": {"name": "bPM", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ePM": {"name": "ePM", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "PMSuffix": {"name": "PMSuffix", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bPMc": {"name": "bPMc", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ePMc": {"name": "ePMc", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bOdometer": {"name": "bOdometer", "description": "Represents the distance in miles from the start of the highway to\nthe beginning and end of each highway section.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "eOdometer": {"name": "eOdometer", "description": "Represents the distance in miles from the start of the highway to\nthe beginning and end of each highway section.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "AlignCode": {"name": "AlignCode", "description": "Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "RouteType": {"name": "RouteType", "description": "The type of route of the highway. Values are State, US, and Interstate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Direction": {"name": "Direction", "description": "The direction of the highway.\nValues are NB, SB, EB, and WB (north-, south-, east-, and west-bound).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "Shape__Length": {"name": "Shape__Length", "description": "The length of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "geometry": {"name": "geometry", "description": "The geometry of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "OBJECTID": {"name": "OBJECTID", "description": "Unique identifier for the state highway feature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ROUTE": {"name": "ROUTE", "description": "The route number of the state highway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "RTESUFFIX": {"name": "RTESUFFIX", "description": "The route suffix of the state highway, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "RAW_PRD.geo_reference.shn_lines", "created_at": 1755632024.545972, "unrendered_database": "{{ env_var('DBT_RAW_DB', 'RAW_PRD') }}", "unrendered_schema": "geo_reference", "doc_blocks": []}}, "macros": {"macro.caldata_mdsa_caltrans_pems.unload_relation_as_geojson": {"name": "unload_relation_as_geojson", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/unload_relation_as_geojson.sql", "original_file_path": "macros/unload_relation_as_geojson.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.unload_relation_as_geojson", "macro_sql": "{% macro unload_relation_as_geojson(strip_leading_words=1) %}\n  {% if target.name == 'prd' %}\n    {% set suffix = 'PRD' %}\n  {% else %}\n    {% set suffix = 'DEV' %}\n  {% endif %}\n  {% set stage = '@ANALYTICS_' ~ suffix ~ '.PUBLIC.PEMS_MARTS_' ~ suffix %}\n  {% set database = \"ANALYTICS_\" ~ suffix %}\n  {% set name = model.name.split('_')[strip_leading_words:] | reject(\"eq\", \"\") | join(\"_\") %}\n      /* Note the unusual quoting of the arguments to the stored procedure.\n         This is because it is passed as strings to the Python session.\n         The dbt docs say never to construct a relation this way, but I'm not\n         sure whether it's possible to do it using the adapter.get_relation() macro...\n         */\n      call {{ database }}.public.unload_as_geojson(\n          '{{ this.database ~ \".\" ~ this.schema ~ \".\" ~ this.table }}',\n          '{{ name }}',\n          '{{ stage ~ '/' ~ this.schema }}'\n      );\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632020.9973972, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems._get_all_table_columns": {"name": "_get_all_table_columns", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/validate_all_schemas.sql", "original_file_path": "macros/validate_all_schemas.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems._get_all_table_columns", "macro_sql": "\n\n{%- macro _get_all_table_columns() -%}\n  {%- if not graph or not graph.nodes -%}\n    {{ return({}) }}\n  {%- endif -%}\n\n  {%- set table_info = [] -%}\n\n  -- Add models to the list\n  {%- for node_id, node in graph.nodes.items() -%}\n    {%- if node.resource_type == 'model' -%}\n      {%- do table_info.append({\n        'name': node.name,\n        'schema': node.schema,\n        'database': node.database,\n        'type': 'model'\n      }) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  -- Add sources to the list\n  {%- for source_id, source in graph.sources.items() -%}\n    {%- do table_info.append({\n      'name': source.name,\n      'schema': source.schema,\n      'database': source.database,\n      'type': 'source'\n    }) -%}\n  {%- endfor -%}\n\n  {%- if table_info | length == 0 -%}\n    {{ return({}) }}\n  {%- endif -%}\n\n  -- Group tables by database to handle multiple databases\n  {%- set databases = {} -%}\n  {%- for table in table_info -%}\n    {%- if table.database not in databases -%}\n      {%- do databases.update({table.database: []}) -%}\n    {%- endif -%}\n    {%- do databases[table.database].append(table) -%}\n  {%- endfor -%}\n\n  {%- set all_columns_data = [] -%}\n\n  -- Query each database separately, filtering only by schemas (much more efficient)\n  {%- for database, tables in databases.items() -%}\n    {%- set schema_names = [] -%}\n    {%- for table in tables -%}\n      {%- if table.schema not in schema_names -%}\n        {%- do schema_names.append(table.schema) -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n    {%- set quoted_schema_names = [] -%}\n    {%- for schema in schema_names -%}\n      {%- do quoted_schema_names.append(\"'\" ~ schema.upper() ~ \"'\") -%}\n    {%- endfor -%}\n\n    {%- set database_columns_query -%}\n      select\n        upper(table_catalog) as table_database,\n        upper(table_schema) as table_schema,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        ordinal_position\n      from {{ database }}.information_schema.columns\n      where upper(table_schema) in ({{ quoted_schema_names | join(', ') }})\n      order by table_catalog, table_schema, table_name, ordinal_position\n    {%- endset -%}\n\n    {%- set database_columns_result = run_query(database_columns_query) -%}\n    {%- if database_columns_result.columns | length > 0 -%}\n      {%- set databases_list = database_columns_result.columns[0].values() -%}\n      {%- set schemas_list = database_columns_result.columns[1].values() -%}\n      {%- set table_names_list = database_columns_result.columns[2].values() -%}\n      {%- set column_names_list = database_columns_result.columns[3].values() -%}\n\n      {%- for i in range(table_names_list | length) -%}\n        {%- do all_columns_data.append({\n          'database': databases_list[i],\n          'schema': schemas_list[i],\n          'table_name': table_names_list[i],\n          'column_name': column_names_list[i]\n        }) -%}\n      {%- endfor -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  -- Process all the collected column data\n  {%- set table_columns = {} -%}\n  {%- for row in all_columns_data -%}\n    {%- set table_key = row.table_name -%}\n    {%- if table_key not in table_columns -%}\n      {%- do table_columns.update({table_key: {'columns': []}}) -%}\n    {%- endif -%}\n    {%- do table_columns[table_key]['columns'].append(row.column_name) -%}\n  {%- endfor -%}\n\n  {{ return(table_columns) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0056918, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems._validate_single_table_schema": {"name": "_validate_single_table_schema", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/validate_all_schemas.sql", "original_file_path": "macros/validate_all_schemas.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems._validate_single_table_schema", "macro_sql": "\n\n{%- macro _validate_single_table_schema(node, table_columns_info, resource_type) -%}\n\n  -- Get actual columns from the pre-fetched data\n  {%- set table_key = node.name.upper() -%}\n  {%- if table_key in table_columns_info -%}\n    {%- set actual_columns = table_columns_info[table_key]['columns'] -%}\n  {%- else -%}\n    {%- set actual_columns = [] -%}\n  {%- endif -%}\n\n  -- If no columns were found, the table doesn't exist in the database\n  {%- if actual_columns | length == 0 -%}\n    {%- set result = {\n      'table_name': node.name,\n      'table_schema': node.schema,\n      'table_database': node.database,\n      'resource_type': resource_type,\n      'validation_issues': ['TABLE_NOT_FOUND'],\n      'documented_but_missing_columns': [],\n      'undocumented_columns': []\n    } -%}\n    {{ return(result) }}\n  {%- endif -%}\n\n  -- Get documented columns\n  {%- set documented_columns = [] -%}\n  {%- if node.columns -%}\n    {%- for column_name, column_info in node.columns.items() -%}\n      {%- do documented_columns.append(column_name.upper()) -%}\n    {%- endfor -%}\n  {%- endif -%}\n\n  -- Find missing and undocumented columns\n  {%- set documented_but_missing_columns = [] -%}\n  {%- for col in documented_columns -%}\n    {%- if col not in actual_columns -%}\n      {%- do documented_but_missing_columns.append(col) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  {%- set undocumented_columns = [] -%}\n  {%- for col in actual_columns -%}\n    {%- if col not in documented_columns -%}\n      {%- do undocumented_columns.append(col) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  -- Determine validation issues as a list\n  {%- set validation_issues = [] -%}\n\n  {%- if documented_but_missing_columns | length > 0 -%}\n    {%- do validation_issues.append('DOCUMENTED_BUT_MISSING_COLUMNS') -%}\n  {%- endif -%}\n\n  {%- if undocumented_columns | length > 0 -%}\n    {%- do validation_issues.append('UNDOCUMENTED_COLUMNS') -%}\n  {%- endif -%}\n\n  {%- set result = {\n    'table_name': node.name,\n    'table_schema': node.schema,\n    'table_database': node.database,\n    'resource_type': resource_type,\n    'validation_issues': validation_issues,\n    'documented_but_missing_columns': documented_but_missing_columns,\n    'undocumented_columns': undocumented_columns\n  } -%}\n\n  {{ return(result) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0092213, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.validate_all_schemas": {"name": "validate_all_schemas", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/validate_all_schemas.sql", "original_file_path": "macros/validate_all_schemas.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.validate_all_schemas", "macro_sql": "\n\n{%- macro validate_all_schemas(errors_only=false, undocumented_columns_as_errors=true) -%}\n\n  {%- if not graph or not graph.nodes -%}\n    {{ exceptions.raise_compiler_error(\"Error: This macro requires access to the dbt graph. Use 'dbt run-operation validate_all_schemas' instead of calling it from a model or analysis.\") }}\n  {%- endif -%}\n\n  -- Define error issues based on the flag once at the top\n  {%- set error_issues = ['DOCUMENTED_BUT_MISSING_COLUMNS', 'TABLE_NOT_FOUND'] -%}\n  {%- if undocumented_columns_as_errors -%}\n    {%- do error_issues.append('UNDOCUMENTED_COLUMNS') -%}\n  {%- endif -%}\n\n  -- Get all table column information in a single query\n  {%- set table_columns_info = _get_all_table_columns() -%}\n\n  {%- set validation_results = [] -%}\n  {%- set failed_tables_list = [] -%}\n\n  -- Validate models\n  {%- for node_id, node in graph.nodes.items() -%}\n    {%- if node.resource_type == 'model' -%}\n      {%- set result = _validate_single_table_schema(node, table_columns_info, 'model') -%}\n      {%- do validation_results.append(result) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  -- Validate sources\n  {%- for source_id, source in graph.sources.items() -%}\n    {%- set result = _validate_single_table_schema(source, table_columns_info, 'source') -%}\n    {%- do validation_results.append(result) -%}\n  {%- endfor -%}\n\n  -- Process all validation results\n  {%- for result in validation_results -%}\n    {%- set resource_type = result.resource_type -%}\n\n    -- Check if this table has any error issues\n    {%- set has_errors = false -%}\n    {%- for issue in result.validation_issues -%}\n      {%- if issue in error_issues -%}\n        {%- if not has_errors -%}\n          {%- do failed_tables_list.append(result.table_name) -%}\n          {%- set has_errors = true -%}\n        {%- endif -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n    -- Log the result based on errors_only flag\n    {%- if result.validation_issues | length == 0 -%}\n      {%- if not errors_only -%}\n        {{ log('\u2705 ' ~ resource_type | title ~ ' ' ~ result.table_name ~ ': Schema matches documentation', info=True) }}\n      {%- endif -%}\n    {%- elif 'TABLE_NOT_FOUND' in result.validation_issues -%}\n      {%- if resource_type == 'model' -%}\n        {{ log('\u274c Model ' ~ result.table_name ~ ': Model not found in database (may not be built yet)', info=True) }}\n      {%- else -%}\n        {{ log('\u274c Source ' ~ result.table_name ~ ': Source not found in database', info=True) }}\n      {%- endif -%}\n    {%- elif result.validation_issues == ['UNDOCUMENTED_COLUMNS'] and not undocumented_columns_as_errors -%}\n      {%- if not errors_only -%}\n        {{ log('\u2705 ' ~ resource_type | title ~ ' ' ~ result.table_name ~ ': Schema matches documentation', info=True) }}\n        {{ log('   \u26a0\ufe0f  Undocumented columns (not treated as errors): ' ~ result.undocumented_columns | join(', '), info=True) }}\n      {%- endif -%}\n    {%- else -%}\n      {{ log('\u274c ' ~ resource_type | title ~ ' ' ~ result.table_name ~ ':', info=True) }}\n      {%- if 'DOCUMENTED_BUT_MISSING_COLUMNS' in result.validation_issues -%}\n        {{ log('   \u2022 Documented but missing columns: ' ~ result.documented_but_missing_columns | join(', '), info=True) }}\n      {%- endif -%}\n      {%- if 'UNDOCUMENTED_COLUMNS' in result.validation_issues -%}\n        {%- if undocumented_columns_as_errors -%}\n          {{ log('   \u2022 Undocumented columns: ' ~ result.undocumented_columns | join(', '), info=True) }}\n        {%- else -%}\n          {{ log('   \u26a0\ufe0f  Undocumented columns (not treated as errors): ' ~ result.undocumented_columns | join(', '), info=True) }}\n        {%- endif -%}\n      {%- endif -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n  {%- set total_tables = validation_results | length -%}\n  {%- set models_count = validation_results | selectattr('resource_type', '==', 'model') | list | length -%}\n  {%- set sources_count = validation_results | selectattr('resource_type', '==', 'source') | list | length -%}\n\n  -- Calculate counts using the failed_tables_list built during the first loop\n  {%- set failed_tables_count = failed_tables_list | length -%}\n  {%- set matching_tables_count = total_tables - failed_tables_count -%}\n\n  -- Show summary unless errors_only is true and there are no errors\n  {%- if not errors_only or failed_tables_list | length > 0 -%}\n    {{ log('', info=True) }}\n    {{ log('\ud83d\udcca Schema Validation Summary:', info=True) }}\n    {{ log('   Total tables validated: ' ~ total_tables ~ ' (' ~ models_count ~ ' models, ' ~ sources_count ~ ' sources)', info=True) }}\n    {%- if not errors_only -%}\n      {{ log('   Tables with matching schemas: ' ~ matching_tables_count, info=True) }}\n      {{ log('   Tables with schema issues: ' ~ failed_tables_count, info=True) }}\n    {%- else -%}\n      {{ log('   Tables with schema issues: ' ~ failed_tables_count, info=True) }}\n    {%- endif -%}\n  {%- endif -%}\n\n  -- Handle validation errors - always fail if errors are found\n  {%- if failed_tables_list | length > 0 -%}\n    {{ exceptions.raise_compiler_error('Schema validation failed! ' ~ failed_tables_list | length ~ ' tables have validation errors.') }}\n  {%- elif errors_only -%}\n    {{ log('\u2705 No schema validation errors found!', info=True) }}\n  {%- endif -%}\n\n  {{ return('') }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems._get_all_table_columns", "macro.caldata_mdsa_caltrans_pems._validate_single_table_schema"]}, "description": "Macro to validate all model and source schemas in the project against\ntheir documentation.\n\nThis macro creates a comprehensive report of schema validation issues\nacross all models and sources in the project. It compares the documented\ncolumns in dbt YAML files with the actual columns in the database\ntables/views.\n\nThe macro will always raise an error if validation issues are found, making\nit suitable for use in CI/CD pipelines to enforce schema documentation\nstandards.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "errors_only", "type": "boolean", "description": "If true, only shows tables with validation errors. If false, shows all\nvalidation results including successful matches. Defaults to false.\n"}, {"name": "undocumented_columns_as_errors", "type": "boolean", "description": "If true, treats undocumented columns as validation errors. If false,\nundocumented columns are reported as warnings but don't cause failure.\nDefaults to true.\n"}], "created_at": 1755632023.4644284, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.create_exponential_smoothing_function": {"name": "create_exponential_smoothing_function", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/exponential_smoothing.sql", "original_file_path": "macros/exponential_smoothing.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.create_exponential_smoothing_function", "macro_sql": "{% macro create_exponential_smoothing_function() %}\n\nCREATE OR REPLACE FUNCTION {{ target.database }}.public.exponential_smooth(\"VALUE\" FLOAT, \"FACTOR\" FLOAT)\nRETURNS TABLE (\"VALUE_SMOOTHED\" FLOAT)\nLANGUAGE PYTHON\nRUNTIME_VERSION = '3.11'\nHANDLER = 'Smoother'\nAS $$\nclass Smoother:\n    def __init__(self):\n        self.previous_value = None\n\n    def process(self, value, factor):\n        if value is None or factor is None:\n            yield_value = None\n        else:\n            # If previous value was null, substitute current value.\n            previous_value = self.previous_value if self.previous_value is not None else value\n            yield_value = value * factor + (1-factor) * previous_value\n\n        self.previous_value = yield_value\n        yield (yield_value,)\n$$\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.017148, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.get_snowflake_warehouse": {"name": "get_snowflake_warehouse", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_snowflake_warehouse.sql", "original_file_path": "macros/get_snowflake_warehouse.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.get_snowflake_warehouse", "macro_sql": "{% macro get_snowflake_warehouse(size=\"XS\") %}\n  {% if target.name == 'prd' %}\n    {% set suffix = 'PRD' %}\n  {% else %}\n    {% set suffix = 'DEV' %}\n  {% endif %}\n  {% set warehouse = 'TRANSFORMING_' ~ size ~ '_' ~ suffix %}\n  {{ return(warehouse) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns the name of a Snowflake warehouse, given an input size. The dbt target\n(i.e. 'dev' or 'prd') is taken into account when returning a warehouse.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "size", "type": "string", "description": "Snowflake warehouse size (default is 'XS')\n"}], "created_at": 1755632023.4570782, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n    {{ create_exponential_smoothing_function() }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.caldata_mdsa_caltrans_pems.create_exponential_smoothing_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.018287, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n{#\n        Definitions:\n            - custom_schema_name: schema provided via dbt_project.yml or model config\n            - target.name: name of the target (dev for local development, prod for production, etc.)\n            - target.schema: schema provided by the target defined in profiles.yml\n\n        Rather than write to a schema prefixed with target.schema, we instead just write\n        to the actual schema name, and get safety by separating dev and prod databases.\n        Dev databases keep the default schema-prefixing behavior to prevent developers from\n        stepping on each others' toes.\n#}\n    {%- if custom_schema_name is none -%} {{ target.schema.lower() | trim }}\n\n{%- elif target.name == 'prd' -%} {{ custom_schema_name.lower() | trim }}\n\n{%- else -%} {{ target.schema.lower() | trim }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Returns the name of a schema in which a model should land in Snowflake.\n\nFor production models, the value from `dbt_project.yml` will be used, or any\ncustom name provided in the model's config block.\n\nFor development models, the schema from `profiles.yml` will be prepended\nto the custom value found in `dbt_project.yml` or the model's config block.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "custom_schema_name", "type": "string", "description": "The schema provided via `dbt_project.yml` or model config\n"}, {"name": "node", "type": "string", "description": "The node that is currently being processed by dbt\n"}], "created_at": 1755632023.4560874, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.drop_schemas_with_prefix": {"name": "drop_schemas_with_prefix", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/drop_schemas_with_prefix.sql", "original_file_path": "macros/drop_schemas_with_prefix.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.drop_schemas_with_prefix", "macro_sql": "{% macro drop_schemas_with_prefix(database_name=none, prefix=none) %}\n\n{#\n  This macro drops all schemas in a specified Snowflake database that\n  start with a given prefix. It is useful for cleaning up personal\n  development and PR schemas. The variables `database_name` and `prefix`\n  that are needed for this macro are set in `dbt_project.yml`.\n\n  Arguments:\n    - database_name (string, optional): The name of the database where schemas should be dropped.\n                                        Defaults to `target.database` if not provided.\n    - prefix (string, optional): The prefix that schemas must start with to be considered for dropping.\n                                 Defaults to `target.schema` if not provided.\n                                 A safety check ensures this default prefix starts with 'DBT_'.\n  Invocation examples:\n    - Cleanup for your database and dbt schema (uses target.database and target.schema, with safety check):\n      dbt run-operation drop_schemas_with_prefix\n    - Cleanup for a specific database and/or prefix:\n      dbt run-operation drop_schemas_with_prefix --args '{database_name: ANALYTICS_DEV, prefix: DBT_CLOUD_PR...}'\n#}\n\n{# Ensure the macro only runs during execution and not parsing #}\n{% if execute %}\n  {# Determine the effective database name #}\n  {% set effective_database_name = database_name %}\n  {% if effective_database_name is none %}\n    {% set effective_database_name = target.database.upper() %}\n  {% endif %}\n\n  {# Determine the effective prefix #}\n  {% set effective_prefix = prefix %}\n  {% if effective_prefix is none %}\n    {% set effective_prefix = target.schema.upper() %}\n    {# Safety check to ensure prefix starts with 'DBT_' #}\n    {% if not effective_prefix.startswith('DBT_') %}\n      {{ exceptions.raise_compiler_error(\n        \"Error: when 'prefix' is not explicitly provided, it defaults to your target schema (\" ~ effective_prefix ~ \").\"\n        \"This default is only allowed however if your target schema starts with 'DBT_' \"\n        \"Please either provide an explicit 'prefix' argument (e.g. --args '{prefix: DBT_...}') or ensure your target schema is prefixed with 'DBT_'.\"\n      )}}\n    {% endif %}\n  {% endif %}\n\n{{ log(\"Running schema cleanup for database: \" ~ effective_database_name ~ \" with prefix: \" ~ effective_prefix, info=True) }}\n\n{#\n  Query Snowflake to get a list of matching schemas.\n#}\n{% set get_schemas %}\n  SHOW TERSE SCHEMAS IN DATABASE \"{{ effective_database_name }}\" STARTS WITH '{{ effective_prefix }}'\n{% endset %}\n\n{#\n  Run the query and store the list.\n  dbt's [`run_query` docs](https://docs.getdbt.com/reference/dbt-jinja-functions/run_query).\n#}\n{% set schemas_to_drop = run_query(get_schemas) %}\n\n{#\n  Iterate over each row in the results.\n  The schema name is the second column (index 1 or [1]).\n#}\n\n{% for row in schemas_to_drop %}\n  {% set schema_name = row[1] %}\n\n  {{ log(\"Dropping schema: \" ~ schema_name ~ \" in database: \" ~ effective_database_name, info=True) }}\n\n  {# Use the adapter.drop_schema function #}\n  {% set schema_relation = api.Relation.create(database=effective_database_name, schema=schema_name) %}\n  {% do adapter.drop_schema(schema_relation) %}\n  {% endfor %}\n\n{# Check if any matching schemas were found. #}\n{% if schemas_to_drop | length == 0 %}\n  {{ log(\"No schemas found matching the prefix: \" ~ effective_prefix ~ \" in database: \" ~ effective_database_name ~ \".\", info=True) }}\n{% else %}\n  {{ log(\"Finished cleanup. Dropped \" ~ schemas_to_drop | length ~ \" schemas.\", info=True) }}\n{% endif %}\n\n{% else %}\n{# Print a message during parsing phase. #}\n{{ log(\"This macro is being parsed. \", info=True) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "Macro to drop a schema in the database with a specified prefix.\n\nThis macro constructs the schema name using the provided prefix and drops\nit if it exists.\nUseful for cleaning up test or temporary schemas in CI/CD workflows.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "prefix", "type": "string", "description": "The prefix to use when constructing the schema name to drop.\n"}, {"name": "database", "type": "string", "description": "The database in which the schema resides. Optional; defaults to the target database."}], "created_at": 1755632023.4656096, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.get_scd_2_data": {"name": "get_scd_2_data", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_scd_2_data.sql", "original_file_path": "macros/get_scd_2_data.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.get_scd_2_data", "macro_sql": "{% macro get_scd_2_data(active_date,_valid_from,_valid_to) %}\r\n\r\n    {{ active_date }} >= {{ _valid_from }}\r\n    and ( {{ active_date }} < {{ _valid_to }} or {{ _valid_to }} is null)\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0234544, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse": {"name": "get_snowflake_refresh_warehouse", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_snowflake_refresh_warehouse.sql", "original_file_path": "macros/get_snowflake_refresh_warehouse.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.get_snowflake_refresh_warehouse", "macro_sql": "{% macro get_snowflake_refresh_warehouse(big=\"XL\", small=\"XS\") %}\n  {% if target.name == 'prd' %}\n    {% set suffix = 'PRD' %}\n  {% else %}\n    {% set suffix = 'DEV' %}\n  {% endif %}\n  {% if flags.FULL_REFRESH %}\n    {% set size = big %}\n  {% else %}\n    {% set size = small %}\n  {% endif %}\n  {% set warehouse = 'TRANSFORMING_' ~ size ~ '_' ~ suffix %}\n  {{ return(warehouse) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Full refreshes of incremental models sometimes need a little bit of\nextra firepower. This returns an appropriate (i.e. 4XL) warehouse\nfor that case. Use it with caution! This returns large if either of\nthe following conditions are met:\n\n* The target table doesn't exist (i.e., hasn't been built yet)\n* The `--full-refresh` flag is set via the CLI.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "small", "type": "string", "description": "Snowflake warehouse size to use when *not* performing a full-refresh\n"}, {"name": "big", "type": "string", "description": "Snowflake warehouse size to use when performing a full-refresh\n"}], "created_at": 1755632023.458352, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.get_county_name": {"name": "get_county_name", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_county_name.sql", "original_file_path": "macros/get_county_name.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.get_county_name", "macro_sql": "{% macro get_county_name(table_with_county_id) %}\r\n    with county as (\r\n        select\r\n            county_id,\r\n            lower(county_name) as county_name,\r\n            native_id as county_abb\r\n        from {{ ref('counties') }}\r\n    ),\r\n    station_with_county as (\r\n        select\r\n            {{ table_with_county_id }}.*,\r\n            c.county_name,\r\n            c.county_abb\r\n        from {{ table_with_county_id }}\r\n        inner join county as c\r\n        on {{ table_with_county_id }}.county = c.county_id\r\n    )\r\n\r\n    select * from station_with_county\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0252385, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.timestamp_spine": {"name": "timestamp_spine", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/timestamp_spine.sql", "original_file_path": "macros/timestamp_spine.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.timestamp_spine", "macro_sql": "{% macro timestamp_spine(start_date, end_date, second_increment=60*60*24) %}\n\n  {# Do not allow increments of less than 1 or longer than a full day #}\n  {% if second_increment <= 0 or second_increment > 60*60*24 %}\n    {% set second_increment = 60*60*24 %}\n  {% endif %}\n\n  with date_spine as (\n    {{ dbt_utils.date_spine(datepart=\"day\", start_date=start_date, end_date=end_date) }}\n  ),\n\n  series as (\n    {{ dbt_utils.generate_series(60*60*24 / second_increment) }}\n  )\n\n  select DATEADD(s, (generated_number - 1) * {{ second_increment }}, date_day) as timestamp_column\n  from date_spine\n  cross join series\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_utils.generate_series"]}, "description": "Generates a table with 1 column; a list of timestamps from a start date to an end date. The\nuser can choose a constant spacing between the timestamps (the default is a whole day). The\nspine will include the `start_date`, but not the `end_date`.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "start_date", "type": "string", "description": "Beginning date for timestamp spine. The day will start at 00:00:00.\n"}, {"name": "end_date", "type": "string", "description": "End date for timestamp spine. Note that this date is not included in the output\nspine, only days up until it.\n"}, {"name": "second_increment", "type": "integer", "description": "Number of seconds between each timestamp in the spine. Invalid values will result in\nthe default value being selected.\n"}, {"name": "get_county_name", "type": "string", "description": "This function replace the county numeric code to county full name. The county name was made lower case\nto make it insensitive for kibana search option.\n"}], "created_at": 1755632023.4629009, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.get_city_name": {"name": "get_city_name", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/get_city_name.sql", "original_file_path": "macros/get_city_name.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.get_city_name", "macro_sql": "{% macro get_city_name(table_with_city_id) %}\r\n    with city as (\r\n        select\r\n            city_id,\r\n            city_name,\r\n            native_id\r\n        from {{ ref('cities') }}\r\n    ),\r\n    station_with_city_id as (\r\n        select\r\n            st.*,\r\n            c.city_name,\r\n            c.native_id as city_abb\r\n        from {{ table_with_city_id }} as st\r\n        inner join city as c\r\n        on st.city = c.city_id\r\n    )\r\n\r\n    select * from station_with_city_id\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.026796, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.make_model_incremental": {"name": "make_model_incremental", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/make_model_incremental.sql", "original_file_path": "macros/make_model_incremental.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.make_model_incremental", "macro_sql": "{% macro make_model_incremental(date_col) -%}\n\n{% if is_incremental() %}\n        -- Look back to account for any late-arriving data\n            {{ date_col }} > (\n                select\n                    dateadd(\n                        day,\n                        {{ var(\"incremental_model_look_back\") }},\n                        max({{ date_col }})\n                    )\n                from {{ this }}\n            )\n            {% if target.name != 'prd' %}\n                and {{ date_col }} >= (\n                    dateadd(\n                        day,\n                        {{ var(\"dev_model_look_back\") }},\n                        current_date()\n                    )\n                )\n            {% endif %}\n    {% elif target.name != 'prd' %}\n        {{ date_col }} >= dateadd(day, {{ var(\"dev_model_look_back\") }}, current_date())\n\n    {% else %}\n    1=1\n    {% endif %}\n\n    {%- endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "This allows for the implementation of complex incremental model\nlogic in one line and one place. Check out [dbt's docs on incremental\nmodels](https://docs.getdbt.com/docs/build/incremental-models-overview).\n\nIn addition to incrementality, it implements the variable\n\"dev_model_look_back\", which limits the amount of data selected in dev.\nTwo things to note:\n  1. Users implement their own date column\n  2. This macro does not include a \"where\" keyword, but does include\n  \"and\". Users are expected to use a \"where\" clause when implementing this.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "date_col", "type": "string", "description": "Name of date column to use for limiting selected data\n"}], "created_at": 1755632023.4591885, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.unload_relation": {"name": "unload_relation", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "macros/unload_relation.sql", "original_file_path": "macros/unload_relation.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.unload_relation", "macro_sql": "{% macro unload_relation(strip_leading_words=1, unload_partitioning=none) %}\n  {% if target.name == 'prd' %}\n    {% set suffix = 'PRD' %}\n  {% else %}\n    {% set suffix = 'DEV' %}\n  {% endif %}\n  {% set partitioning = unload_partitioning or config.get('unload_partitioning', none) %}\n  {% set stage = '@ANALYTICS_' ~ suffix ~ '.PUBLIC.PEMS_MARTS_' ~ suffix %}\n  {% set key = model.name.split('_')[strip_leading_words:] | reject(\"eq\", \"\") | join(\"_\")  %}\n  {% set key = key ~ ('' if partitioning else '.parquet') %}\n  {% set path = this.schema ~ '/' ~ key %}\n  {% set url = stage ~ '/' ~ path %}\n      remove {{ url }};\n      copy into {{ url }}\n      from {{ this }}\n      {% if partitioning %}\n          partition by {{ partitioning }}\n      {% endif %}\n      file_format = (type=parquet)\n      header = true\n      {% if partitioning %}\n          max_file_size = 134217728 -- 128 MiB\n      {% else %}\n          single = true\n          max_file_size = 536870912 -- 512 MiB\n      {% endif %}\n      ;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Unloads a table or view to the project public marts bucket. The resulting file\nwill be in a directory matching the schema name of the relation, and will be a\nparquet file with the same columns and data types as the table.\n\n### Usage notes:\n\n1. This is intended for unloading relatively small datasets. Right now,\n    it supports partitioning, but not incremental unloads.\n1. This macro is intended to be used as a dbt post-hook.\n1. The name of the external stage is hard-coded. Depending upon the context,\n    it will unload to either the prod or dev stage.\n1. The `unload_partitioning` argument can also be provided as a parameter\n    in the dbt model config block. This is so that unload partitioning can\n    be independently configured for a suite of models that all have the same\n    post-hook configured in the `dbt_project.yml`.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "caldata_mdsa_caltrans_pems://macros/_macros.yml", "arguments": [{"name": "strip_leading_words", "type": "integer", "description": "How many leading words to remove from the table name when constructing the\nparquet file name. This defaults to one, but for some tables other values\nmight be appropriate. For instance, if the table is named\n`performance__station_agg_daily`, then the resulting parquet file will be\nnamed `station_agg_daily`.\n"}, {"name": "unload_partitioning", "type": "string", "description": "If this is set, then the expression in the string will be used as a partitioning\ncolumn for the unloading, and multiple parquet files will be uploaded as a result.\nEach value for the partitioning string will be in the file path for the files,\nso it is a good idea to construct the expression with that in mind. For more documentation,\nsee [here](https://docs.snowflake.com/en/sql-reference/sql/copy-into-location)\n"}], "created_at": 1755632023.4607468, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.test_five_minute_daily_count": {"name": "test_five_minute_daily_count", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "tests/generic/five_minute_daily_count.sql", "original_file_path": "tests/generic/five_minute_daily_count.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.test_five_minute_daily_count", "macro_sql": "{% test five_minute_daily_count(model, group_by_columns) %}\r\nwith\r\nvalidation_errors as (\r\n    select {{ group_by_columns|join(',') }}\r\n    from {{ model }}\r\n    group by {{ group_by_columns|join(',') }}\r\n    having count(*) != 288\r\n)\r\n\r\nselect * from validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0307517, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.test_not_empty": {"name": "test_not_empty", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "tests/generic/not_empty.sql", "original_file_path": "tests/generic/not_empty.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.test_not_empty", "macro_sql": "{% test not_empty(model) %}\n\nwith validation as (\n   select count(0) as num_rows\n   from {{ model }}\n),\n\nvalidation_errors as (\n   select num_rows\n   from validation\n   where num_rows = 0\n)\n\nselect * from validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0310605, "supported_languages": null}, "macro.caldata_mdsa_caltrans_pems.test_copy_history_24h": {"name": "test_copy_history_24h", "resource_type": "macro", "package_name": "caldata_mdsa_caltrans_pems", "path": "tests/generic/copy_history_24h.sql", "original_file_path": "tests/generic/copy_history_24h.sql", "unique_id": "macro.caldata_mdsa_caltrans_pems.test_copy_history_24h", "macro_sql": "{% test copy_history_24h(model) %}\n\n/* This grabs the model's available copy history (past 14 days) from Snowflake\nsee: https://docs.snowflake.com/en/sql-reference/functions/copy_history\n*/\nwith validation as (\n   select LAST_LOAD_TIME\n   from table(\n    INFORMATION_SCHEMA.COPY_HISTORY(\n        table_name => '{{ model }}',\n        start_time=> DATEADD(days, -14, CURRENT_TIMESTAMP())\n        )\n    )\n),\n\n-- This checks if the last recorded load time was more than 24 hours ago\nvalidation_errors as (\n   select LAST_LOAD_TIME\n   from validation\n   where LAST_LOAD_TIME < DATEADD(days, -1, CURRENT_TIMESTAMP())\n)\n\nselect * from validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.031438, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.031917, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.032129, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0332007, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0346692, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0353558, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0357203, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0359476, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0361054, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.036434, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0370626, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0380929, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.041417, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0419183, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0433314, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0438855, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0448716, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0454638, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0460012, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0466506, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0478892, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.048213, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0485218, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.049366, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0496933, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0505683, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.05237, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0527685, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0532427, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__show_objects_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0564406, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0570583, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0580072, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0586624, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0592792, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0621753, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.062587, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0631003, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0659578, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0664983, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0701425, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.076802, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0771084, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0792685, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0815704, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0819685, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.082825, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.083337, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0841513, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0853543, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0872746, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0878148, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0882523, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0886295, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0907168, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.091115, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0914626, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.092654, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0929117, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.093243, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0939672, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0943496, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0946736, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.09487, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.095062, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0953007, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0961518, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.096973, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0974362, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0979514, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0984392, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0990183, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0996275, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.0999749, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1003785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1006339, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1039603, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1049693, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1077979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('storage_serialization_policy', catalog_relation.storage_serialization_policy, \"'\")}}\n    {{ optional('max_data_extension_time_in_days', catalog_relation.max_data_extension_time_in_days)}}\n    {{ optional('data_retention_time_in_days', catalog_relation.data_retention_time_in_days)}}\n    {{ optional('change_tracking', catalog_relation.change_tracking)}}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1110067, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1117702, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1134295, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n    {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1143355, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n    {{ optional('table_tag', dynamic_table.table_tag) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1154358, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set results = adapter.describe_dynamic_table(relation) -%}\n    {%- do return(results) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1158473, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1161008, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.117665, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1180286, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.119588, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n        {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1205063, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n        catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n        base_location = '{{ catalog_relation.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n        {{ optional('table_tag', dynamic_table.table_tag) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1216063, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1219358, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.122336, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1225889, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n  {%- set table_tag = config.get('table_tag', default=none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %}\n  {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n  {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.125419, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1256928, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1276066, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1293948, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1296222, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1299136, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1301203, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1307423, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.131089, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1313293, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1317258, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.132238, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1326494, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.133018, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1334267, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1346083, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1349378, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1353984, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1357934, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1377885, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1382737, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1386898, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1394107, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1397176, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.140068, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.140388, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.140844, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1416724, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1429932, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1434863, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.143831, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1442914, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1446435, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1449482, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1452603, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1457207, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.146073, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1467595, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1470869, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1473894, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1477034, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1479857, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1482697, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.148562, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1489184, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.149239, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1498055, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1501465, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1504545, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1507845, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1515346, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1522498, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1526628, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.153214, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1550727, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.155385, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1559224, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1565256, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.15691, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1572828, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1576462, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.159872, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1605074, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.160829, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1614454, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1618412, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1630034, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1634622, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1648726, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1655521, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1658757, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1662138, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1673615, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.167661, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1683524, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1688588, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1692817, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1698494, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.170162, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1705022, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1709182, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1718574, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1722498, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.172513, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1733203, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1735868, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1738713, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1746001, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.174925, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.175179, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1756423, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.175877, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1766424, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1769075, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1771626, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1773784, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1780903, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1784062, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1785522, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.178838, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1791422, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1796784, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.180208, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.180759, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1822321, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1825898, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1828485, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1831005, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1833732, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1874473, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1901133, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.19103, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.191594, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1919527, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1931226, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.193682, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.1943583, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2010972, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2046056, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.204908, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2053304, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2070198, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2073295, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.207648, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.210083, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2130768, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2162995, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2168953, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2171865, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2173715, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2176323, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2178416, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2181861, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2186208, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.225888, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2262647, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2271974, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2279637, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.229012, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.229783, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2302778, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2309108, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2319322, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2323265, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2327025, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2334256, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2348623, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2391093, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2406373, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2422068, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.242631, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2435098, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2438412, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2440848, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.24435, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.244563, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2448387, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2450442, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2458737, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2461903, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2485113, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2520847, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2547216, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.255423, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.255873, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2581525, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2585754, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2597067, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2632375, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.26427, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2659948, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2690394, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2695117, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2707782, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2712317, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.272377, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2737548, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2747247, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2759533, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2763808, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2776403, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2787044, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2791042, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.279452, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2801383, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.28049, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.280978, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.281301, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2817643, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2820816, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.282361, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2826803, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2829685, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2834775, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.285447, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2875435, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2896652, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2911398, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2985058, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2989752, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.2991989, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3035102, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3040435, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3043756, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3085878, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3096013, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3116133, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3119905, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3121755, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3128207, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3132846, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3139231, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3145993, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3153522, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3158526, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3163912, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3169029, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3173025, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3178287, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3187573, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3199127, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3201914, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3220642, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3228014, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.323845, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3246906, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.324831, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3252575, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3255737, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3261118, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3266666, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3271945, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3275108, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3279896, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3282363, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3287742, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.329226, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3295002, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3300176, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.330335, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3311276, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3321729, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3325906, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3332233, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.333679, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3339674, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3343747, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3345215, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3349743, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.335209, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3358393, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3364644, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3372135, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3379622, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3385894, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3388927, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3393, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.339805, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.340055, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3404858, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3406773, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.341085, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3412755, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3419933, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3427477, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3430738, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3440042, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3444583, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3446534, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3451097, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3453836, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.345795, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3460207, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3465054, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3467577, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3472831, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3478088, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.348495, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3488052, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3492823, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.349539, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3499568, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3501527, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3506215, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3508635, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.35198, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3522456, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.352543, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3528051, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.35308, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3533585, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3536391, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3539386, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3542192, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.354514, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3547988, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3550515, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3553438, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3556023, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3560998, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3563676, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3567526, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3568952, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3578045, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3601496, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3606448, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.361027, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3618052, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3625858, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3629434, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3634903, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.364216, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3649209, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.365236, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.365609, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3659565, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3665504, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3669848, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3675375, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.367901, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.368425, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.36879, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.369428, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.370187, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3707292, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.371192, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.371653, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3719232, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3724306, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.372883, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3737113, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3742166, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3755155, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3759265, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.37665, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3769808, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3775487, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3778021, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.37826, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.378564, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3790126, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3792872, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.379771, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3800337, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3804762, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3807104, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3817222, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3820508, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3828478, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.384095, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.384937, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.385268, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.385621, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3868473, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.387064, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3880355, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3884926, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.388739, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3909395, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.391619, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3922067, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3930745, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3933582, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3952284, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3955936, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3960028, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3964684, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3967338, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.397138, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3973758, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3979945, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.398275, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3986156, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.3994427, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.401605, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4025917, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.40309, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4043343, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4065716, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.40786, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4082623, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4090126, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4094615, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4099813, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4105048, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4109745, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4112182, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4120631, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4124684, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4128172, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4131584, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4134803, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4137938, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.414381, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4154286, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4160998, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4174118, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4185915, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4213912, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.422193, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4232123, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4236212, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4242377, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4247851, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4250472, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4252975, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4260414, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4266412, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4270556, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.427585, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4281883, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.42866, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4291003, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4302623, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4327428, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4334917, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4342837, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4346402, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4352627, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4357667, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4368284, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4374874, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4387639, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4396915, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4402392, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4411845, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4418657, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4431314, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4436977, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4446502, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4458134, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4485884, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4493508, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4500809, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.450426, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4513469, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4518437, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4524498, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4541292, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4599228, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4607453, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.462149, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4628701, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4633424, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.464299, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4657195, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4663446, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4674594, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4687624, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4702282, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.471022, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4724543, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4729574, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.473518, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4740634, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4753036, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4758277, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4766972, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.477515, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4783528, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4790072, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4798203, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4804842, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.481076, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4818351, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4832041, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.484126, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4859471, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4866943, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4881024, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.488804, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4895096, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4904573, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.492349, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4931734, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4947517, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4953926, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4959266, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.496786, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.498394, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.4991112, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5002599, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5016017, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5043223, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5049663, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5056345, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5065382, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5081074, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.508902, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5095108, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5099406, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.510228, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.510664, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.510963, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5121782, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5126605, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5129974, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5140536, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755632021.5148134, "supported_languages": null}}, "docs": {"doc.caldata_mdsa_caltrans_pems.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "caldata_mdsa_caltrans_pems", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.caldata_mdsa_caltrans_pems.__overview__", "block_contents": "# Traffic Operations PeMS Modernization dbt Documentation\n\nWelcome to Traffic Operations's Traffic Operations PeMS Modernization `dbt` docs.\nTo go back to the top-level docs, follow [this link](../)\n\n## Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models in your project.\n\n### Project Tab\n\nThe Project tab mirrors the directory structure of your dbt project.\nIn this tab, you can see all of the models defined in your dbt project, as well as models imported from dbt packages.\n\n### Database Tab\n\nThe Database tab also exposes your models, but in a format that looks more like a database explorer.\nThis view shows relations (tables and views) grouped into database schemas.\nNote that ephemeral models are not shown in this interface, as they do not exist in the database.\n\n## Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring.\nBy clicking the Expand button at the top-right of this lineage pane,\nyou'll be able to see all of the models that are used to build, or are built from,\nthe model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the models in the graph.\nFor more information on model selection, check out the [dbt docs](https://docs.getdbt.com/reference/node-selection/syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly", "model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__unpivot_agg_yearly_freeway_type_direction": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_district": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.cities"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily": ["model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.quality__row_count_summary": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.quality_imputation_daily_sample_count": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.geo__current_stations": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.geo__current_detectors": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.imputation__detector_summary": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "seed.caldata_mdsa_caltrans_pems.cities", "seed.caldata_mdsa_caltrans_pems.counties"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment": ["model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "model.caldata_mdsa_caltrans_pems.int_vds__station_config", "seed.caldata_mdsa_caltrans_pems.districts"], "model.caldata_mdsa_caltrans_pems.int_db96__detector_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec"], "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"], "model.caldata_mdsa_caltrans_pems.int_vds__detector_config": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config", "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log"], "model.caldata_mdsa_caltrans_pems.int_vds__station_config": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config", "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log"], "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "model.caldata_mdsa_caltrans_pems.int_vds__controller_config": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config", "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log"], "model.caldata_mdsa_caltrans_pems.int_vds__active_stations": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__county_boundaries": ["source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries"], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__shn_lines": ["source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines"], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__districts": ["source.caldata_mdsa_caltrans_pems.geo_reference.districts"], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_status"], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta"], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw": ["source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw"], "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"], "model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec": ["source.caldata_mdsa_caltrans_pems.db96.vds30sec"], "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"], "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"], "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"], "model.caldata_mdsa_caltrans_pems.stg_db96__station_config": ["source.caldata_mdsa_caltrans_pems.db96.station_config"], "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"], "seed.caldata_mdsa_caltrans_pems.states": [], "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values": [], "seed.caldata_mdsa_caltrans_pems.districts": [], "seed.caldata_mdsa_caltrans_pems.counties": [], "seed.caldata_mdsa_caltrans_pems.detector_station_types": [], "seed.caldata_mdsa_caltrans_pems.cities": [], "operation.caldata_mdsa_caltrans_pems.caldata_mdsa_caltrans_pems-on-run-start-0": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_DETECTOR_ID.5142929aaa": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_SAMPLE_DATE.4bb2a39e43": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID.3345fe8e87": ["model.caldata_mdsa_caltrans_pems.imputation__detector_summary"], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.a9425d1e13": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.8c9047e291": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.bef7636b70": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_station_id.f9d82989ac": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_status.b36d972576": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_sample_date.1fb8da6fc8": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_station_id.27c37be2ad": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_sample_date.b39b495de5": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_station_id.f981d3d0da": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station"], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_sample_month.65c0e266da": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_STATION_ID.148096e504": ["model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.cf3f5fc885": ["model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_date.731be9516c": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp.cc991dd3f8": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_detector_id.b69f9c6ce1": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_station_id.4c5c10799a": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_META_DATE.a86396f7b0": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_ID.24794e5a3f": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w.e55615f4f4": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_.2eb8658b67": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_META_DATE.4f088cd5af": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_STATION_ID.374fb2576e": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_DETECTOR_ID.532974a9c9": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_.cc346c7114": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID.18b89f5a20": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID.3ab981641a": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_detector_id.01e6cf6ac3": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE.e5acaa3738": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP.e1c1dfbfcf": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE.dbdd66a6fb": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_.4eb65ef421": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w.54beb6c9cb": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID.a53f2c9f78": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE.4d03e0dbd9": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP.510fb18280": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE.538b044f46": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID.2d79e2598b": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w.c7d6de60bf": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date.d97c07d228": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID.e6f27fc3ea": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE.ab07a36bce": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP.3d332d0f16": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE.08902fbf35": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR.98dd4d6f90": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID.f8c7c79bff": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed"], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id.00b390acfa": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w.657666a48a": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.aaf4638c12": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.a7f33cd064": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP.0db4de7197": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.0d89789d52": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.90fedfff93": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_DETECTOR_ID.d40559e09a": ["model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients"], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_REGRESSION_DATE.d22c3c3b6c": ["model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_id.4e5cf4e6c2": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_active_date.ee11dc3c47": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_.e3cb85a5b4": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_type.df83d5a819": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id.2f3c1108ec": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id.2c1f45d42a": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_sample_date.a5debcc904": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__samples_per_detector_district___var_districts_.f16e5ab328": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_station_id.bbda3aa060": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_detector_id.931e1196f3": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_lane.dfaf85c7c1": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID.285471e8ba": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_active_date.5786c23639": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_sample_date.b485240d73": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_id.59dc345670": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_detector_id.89a8ed788a": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_status.e5917f66af": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_type.4e21d76782": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_lane.14b76d7583": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__detector_status_district___var_districts_.8e1a4f4570": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_diagnostic_method_id.d155d64beb": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID.e726e8f900": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_detector_id.358b0c76a8": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_sample_date.5f54be703f": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_active_date.74e12d58d6": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__no_data_status_district___var_districts_.70e36d9aa7": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_station_id.4763214a01": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_detector_id.da89c83682": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID.6021199b99": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config_controller_id.b389c43d70": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config__valid_from.c3d32ffb6e": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO.891389041c": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config_station_id.d834fe2c05": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config__valid_from.367ed1e9b5": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO.6a789d00e0": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config_detector_id.4d9c7cae39": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config__valid_from.5c4ca5caaf": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO.3a9e44b39e": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_station_id.1cac9af910": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations__valid_from.9ce32994d4": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_OTHER_STATION_ID.35b161098c": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO.d6fedbcfc4": ["model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations"], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_meta_ID.8bb6e726cd": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta"], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_ID.8fdaf0ebd1": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.ab5501c249": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_controller_id.305a718762": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config"], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__controller_config_controller_id.e076f51952": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_log_controller_id.fd4291b6dc": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_station_id.4cf48b71ea": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config"], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__station_config_station_id.d0d27cec9b": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_log_station_id.97d2183445": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_detector_id.4b1b87d07c": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config"], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__detector_config_detector_id.94c6915b93": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config"], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_log_detector_id.c96cf05de1": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_.0d08a5e84f": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"], "test.caldata_mdsa_caltrans_pems.source_unique_db96_controller_config_controller_id.cd75d813b7": ["source.caldata_mdsa_caltrans_pems.db96.controller_config"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_log_.9a685f5015": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id.8e887df6cf": ["source.caldata_mdsa_caltrans_pems.db96.controller_config_log"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_.31b0f54c1e": ["source.caldata_mdsa_caltrans_pems.db96.station_config"], "test.caldata_mdsa_caltrans_pems.source_unique_db96_station_config_station_id.f6ea518fb5": ["source.caldata_mdsa_caltrans_pems.db96.station_config"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_log_.4844ae5c4e": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id.6157a011ae": ["source.caldata_mdsa_caltrans_pems.db96.station_config_log"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_.37c2ba5fb6": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"], "test.caldata_mdsa_caltrans_pems.source_unique_db96_detector_config_detector_id.c1a0cde27d": ["source.caldata_mdsa_caltrans_pems.db96.detector_config"], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_log_.2de5555832": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id.3dc584c5d3": ["source.caldata_mdsa_caltrans_pems.db96.detector_config_log"], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta": [], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw": [], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_status": [], "source.caldata_mdsa_caltrans_pems.db96.vds30sec": [], "source.caldata_mdsa_caltrans_pems.db96.controller_config": [], "source.caldata_mdsa_caltrans_pems.db96.controller_config_log": [], "source.caldata_mdsa_caltrans_pems.db96.station_config": [], "source.caldata_mdsa_caltrans_pems.db96.station_config_log": [], "source.caldata_mdsa_caltrans_pems.db96.detector_config": [], "source.caldata_mdsa_caltrans_pems.db96.detector_config_log": [], "source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries": [], "source.caldata_mdsa_caltrans_pems.geo_reference.districts": [], "source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines": []}, "child_map": {"model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily": [], "model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly": [], "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily": [], "model.caldata_mdsa_caltrans_pems.performance__unpivot_agg_yearly_freeway_type_direction": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_district": [], "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly": [], "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily": [], "model.caldata_mdsa_caltrans_pems.quality__row_count_summary": [], "model.caldata_mdsa_caltrans_pems.quality_imputation_daily_sample_count": [], "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary": [], "model.caldata_mdsa_caltrans_pems.geo__current_stations": ["model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly"], "model.caldata_mdsa_caltrans_pems.geo__current_detectors": [], "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes": ["test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.8c9047e291", "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.a9425d1e13", "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.bef7636b70"], "model.caldata_mdsa_caltrans_pems.imputation__detector_summary": ["test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID.3345fe8e87", "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_DETECTOR_ID.5142929aaa", "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_SAMPLE_DATE.4bb2a39e43"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station", "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_sample_date.b39b495de5", "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_station_id.27c37be2ad"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_monthly_by_station": ["test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_sample_month.65c0e266da", "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_station_id.f981d3d0da"], "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail": ["test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_sample_date.1fb8da6fc8", "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_station_id.f9d82989ac", "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_status.b36d972576"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly", "model.caldata_mdsa_caltrans_pems.quality__row_count_summary", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_detector_id.b69f9c6ce1", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_date.731be9516c", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp.cc991dd3f8", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_station_id.4c5c10799a"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_district", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_district"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_district", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_district"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_monthly": [], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_weekly": [], "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_district", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_district"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_yearly": ["model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_district", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_district", "model.caldata_mdsa_caltrans_pems.performance__unpivot_agg_yearly_freeway_type_direction"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_monthly": ["model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly"], "model.caldata_mdsa_caltrans_pems.int_performance__station_metrics_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary"], "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_daily": ["model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_hourly": ["model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_daily"], "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value": ["model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.cf3f5fc885", "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_STATION_ID.148096e504"], "model.caldata_mdsa_caltrans_pems.int_performance__bottleneck_delay_metrics_agg_weekly": ["model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed", "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w.657666a48a", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id.00b390acfa"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status": ["test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_.cc346c7114", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID.18b89f5a20", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_DETECTOR_ID.532974a9c9", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_META_DATE.4f088cd5af", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_STATION_ID.374fb2576e"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy", "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector", "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w.54beb6c9cb", "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_.4eb65ef421", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE.e5acaa3738", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP.e1c1dfbfcf", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID.3ab981641a", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE.dbdd66a6fb", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_detector_id.01e6cf6ac3"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta": ["test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w.e55615f4f4", "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_.2eb8658b67", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_ID.24794e5a3f", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_META_DATE.a86396f7b0"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_g_factor_based_speed": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID.e6f27fc3ea", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR.98dd4d6f90", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE.ab07a36bce", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP.3d332d0f16", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID.f8c7c79bff", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE.08902fbf35"], "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.quality__row_count_summary", "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary", "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w.c7d6de60bf", "test.caldata_mdsa_caltrans_pems.five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date.d97c07d228", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID.a53f2c9f78", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE.4d03e0dbd9", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP.510fb18280", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID.2d79e2598b", "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE.538b044f46"], "model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.imputation__detector_summary", "model.caldata_mdsa_caltrans_pems.int_performance__detector_metrics_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.quality__row_count_summary", "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary", "model.caldata_mdsa_caltrans_pems.quality_imputation_daily_sample_count", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.0d89789d52", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.90fedfff93"], "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_imputed_agg_five_minutes", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.aaf4638c12", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.a7f33cd064", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP.0db4de7197"], "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_DETECTOR_ID.d40559e09a", "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_REGRESSION_DATE.d22c3c3b6c"], "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_.e3cb85a5b4", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_active_date.ee11dc3c47", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id.2c1f45d42a", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id.2f3c1108ec", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_id.4e5cf4e6c2", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_type.df83d5a819"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_outlier_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_imputation__global_coefficients", "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "model.caldata_mdsa_caltrans_pems.int_performance__station_aadt_with_K_value", "model.caldata_mdsa_caltrans_pems.quality__row_count_summary", "model.caldata_mdsa_caltrans_pems.quality__station_row_count_summary", "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__detector_status_district___var_districts_.8e1a4f4570", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID.e726e8f900", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_active_date.5786c23639", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_detector_id.89a8ed788a", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_lane.14b76d7583", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_sample_date.b485240d73", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_diagnostic_method_id.d155d64beb", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_id.59dc345670", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_type.4e21d76782", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_status.e5917f66af"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__constant_occupancy": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_detector_id.358b0c76a8", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_sample_date.5f54be703f"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__samples_per_detector": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__samples_per_detector_district___var_districts_.f16e5ab328", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID.285471e8ba", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_detector_id.931e1196f3", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_lane.dfaf85c7c1", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_sample_date.a5debcc904", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_station_id.bbda3aa060"], "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__no_data_status_district___var_districts_.70e36d9aa7", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID.6021199b99", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_active_date.74e12d58d6", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_detector_id.da89c83682", "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_station_id.4763214a01"], "model.caldata_mdsa_caltrans_pems.int_db96__detector_agg_five_minutes": [], "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations": ["model.caldata_mdsa_caltrans_pems.int_imputation__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_imputation__local_regional_regression_coefficients", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO.d6fedbcfc4", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_OTHER_STATION_ID.35b161098c", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations__valid_from.9ce32994d4", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_station_id.1cac9af910"], "model.caldata_mdsa_caltrans_pems.int_vds__detector_config": ["model.caldata_mdsa_caltrans_pems.geo__current_detectors", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__detector_status", "model.caldata_mdsa_caltrans_pems.int_performance__max_capacity", "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO.3a9e44b39e", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config__valid_from.5c4ca5caaf", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config_detector_id.4d9c7cae39"], "model.caldata_mdsa_caltrans_pems.int_vds__station_config": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "model.caldata_mdsa_caltrans_pems.int_vds__active_stations", "model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "model.caldata_mdsa_caltrans_pems.int_vds__nearby_stations", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO.6a789d00e0", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config__valid_from.367ed1e9b5", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config_station_id.d834fe2c05"], "model.caldata_mdsa_caltrans_pems.int_vds__active_detectors": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes_with_missing_rows", "model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "model.caldata_mdsa_caltrans_pems.int_vds__controller_config": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status", "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO.891389041c", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config__valid_from.c3d32ffb6e", "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config_controller_id.b389c43d70"], "model.caldata_mdsa_caltrans_pems.int_vds__active_stations": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment", "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week"], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__county_boundaries": [], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__shn_lines": [], "model.caldata_mdsa_caltrans_pems.stg_geo_reference__districts": [], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_status"], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__station_meta", "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_meta_ID.8bb6e726cd"], "model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw": ["model.caldata_mdsa_caltrans_pems.int_clearinghouse__detector_agg_five_minutes", "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_ID.8fdaf0ebd1", "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.ab5501c249"], "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_log_controller_id.fd4291b6dc"], "model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec": ["model.caldata_mdsa_caltrans_pems.int_db96__detector_agg_five_minutes"], "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_detector_id.4b1b87d07c", "test.caldata_mdsa_caltrans_pems.unique_stg_db96__detector_config_detector_id.94c6915b93"], "model.caldata_mdsa_caltrans_pems.stg_db96__controller_config": ["model.caldata_mdsa_caltrans_pems.int_vds__controller_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_controller_id.305a718762", "test.caldata_mdsa_caltrans_pems.unique_stg_db96__controller_config_controller_id.e076f51952"], "model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_log_station_id.97d2183445"], "model.caldata_mdsa_caltrans_pems.stg_db96__station_config": ["model.caldata_mdsa_caltrans_pems.int_vds__station_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_station_id.4cf48b71ea", "test.caldata_mdsa_caltrans_pems.unique_stg_db96__station_config_station_id.d0d27cec9b"], "model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log": ["model.caldata_mdsa_caltrans_pems.int_vds__detector_config", "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_log_detector_id.c96cf05de1"], "seed.caldata_mdsa_caltrans_pems.states": [], "seed.caldata_mdsa_caltrans_pems.diagnostic_threshold_values": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__det_diag_set_assignment"], "seed.caldata_mdsa_caltrans_pems.districts": ["model.caldata_mdsa_caltrans_pems.int_diagnostics__no_data_status"], "seed.caldata_mdsa_caltrans_pems.counties": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "model.caldata_mdsa_caltrans_pems.geo__current_detectors", "model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.performance__station_aadt_k_value_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_agg_recent_one_week", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_bottleneck_unpivot_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_county", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_county"], "seed.caldata_mdsa_caltrans_pems.detector_station_types": [], "seed.caldata_mdsa_caltrans_pems.cities": ["model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_by_station", "model.caldata_mdsa_caltrans_pems.diagnostics__detector_daily_detail", "model.caldata_mdsa_caltrans_pems.geo__current_detectors", "model.caldata_mdsa_caltrans_pems.geo__current_stations", "model.caldata_mdsa_caltrans_pems.imputation__detector_imputed_agg_five_minutes", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_daily_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_monthly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_weekly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_agg_yearly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_daily_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_monthly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_weekly_city", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly", "model.caldata_mdsa_caltrans_pems.performance__station_metrics_unpivot_agg_yearly_city"], "operation.caldata_mdsa_caltrans_pems.caldata_mdsa_caltrans_pems-on-run-start-0": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_DETECTOR_ID.5142929aaa": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_summary_SAMPLE_DATE.4bb2a39e43": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_imputation__detector_summary_SAMPLE_DATE__DETECTOR_ID.3345fe8e87": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.a9425d1e13": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_COUNTY.8c9047e291": [], "test.caldata_mdsa_caltrans_pems.not_null_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.bef7636b70": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_station_id.f9d82989ac": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_status.b36d972576": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_detail_sample_date.1fb8da6fc8": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_station_id.27c37be2ad": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_daily_by_station_sample_date.b39b495de5": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_station_id.f981d3d0da": [], "test.caldata_mdsa_caltrans_pems.not_null_diagnostics__detector_monthly_by_station_sample_month.65c0e266da": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_STATION_ID.148096e504": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__station_aadt_with_K_value_SAMPLE_YEAR.cf3f5fc885": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_date.731be9516c": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_sample_timestamp.cc991dd3f8": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_detector_id.b69f9c6ce1": [], "test.caldata_mdsa_caltrans_pems.not_null_int_performance__detector_metrics_agg_five_minutes_station_id.4c5c10799a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_META_DATE.a86396f7b0": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_meta_ID.24794e5a3f": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DIRECTION__N__E__S__W__n__e__s__w.e55615f4f4": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_meta_DISTRICT___var_districts_.2eb8658b67": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_META_DATE.4f088cd5af": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_STATION_ID.374fb2576e": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__station_status_DETECTOR_ID.532974a9c9": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__station_status_DISTRICT___var_districts_.cc346c7114": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_clearinghouse__station_status_META_DATE__DETECTOR_ID.18b89f5a20": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_ID.3ab981641a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_detector_id.01e6cf6ac3": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_DATE.e5acaa3738": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_SAMPLE_TIMESTAMP.e1c1dfbfcf": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_STATION_TYPE.dbdd66a6fb": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_district___var_districts_.4eb65ef421": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_DIRECTION__N__E__S__W__n__e__s__w.54beb6c9cb": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DETECTOR_ID.a53f2c9f78": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_DATE.4d03e0dbd9": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_SAMPLE_TIMESTAMP.510fb18280": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_TYPE.538b044f46": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_STATION_ID.2d79e2598b": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_DIRECTION__N__E__S__W__n__e__s__w.c7d6de60bf": [], "test.caldata_mdsa_caltrans_pems.five_minute_daily_count_int_clearinghouse__detector_agg_five_minutes_with_missing_rows_detector_id__sample_date.d97c07d228": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_DETECTOR_ID.e6f27fc3ea": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_DATE.ab07a36bce": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_SAMPLE_TIMESTAMP.3d332d0f16": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_TYPE.08902fbf35": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_G_FACTOR.98dd4d6f90": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_g_factor_based_speed_STATION_ID.f8c7c79bff": [], "test.caldata_mdsa_caltrans_pems.not_null_int_clearinghouse__detector_outlier_agg_five_minutes_detector_id.00b390acfa": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_clearinghouse__detector_outlier_agg_five_minutes_direction__N__E__S__W__n__e__s__w.657666a48a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_DETECTOR_ID.aaf4638c12": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_DATE.a7f33cd064": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_agg_five_minutes_SAMPLE_TIMESTAMP.0db4de7197": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_DETECTOR_ID.0d89789d52": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__detector_imputed_agg_five_minutes_SAMPLE_TIMESTAMP.90fedfff93": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_DETECTOR_ID.d40559e09a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_imputation__global_coefficients_REGRESSION_DATE.d22c3c3b6c": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_id.4e5cf4e6c2": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_active_date.ee11dc3c47": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__det_diag_set_assignment_district___var_districts_.e3cb85a5b4": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_type.df83d5a819": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_set_id.2f3c1108ec": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__det_diag_set_assignment_station_diagnostic_method_id.2c1f45d42a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_sample_date.a5debcc904": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__samples_per_detector_district___var_districts_.f16e5ab328": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_station_id.bbda3aa060": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_detector_id.931e1196f3": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__samples_per_detector_lane.dfaf85c7c1": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__samples_per_detector_SAMPLE_DATE__DETECTOR_ID.285471e8ba": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_active_date.5786c23639": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_sample_date.b485240d73": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_id.59dc345670": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_detector_id.89a8ed788a": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_status.e5917f66af": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_type.4e21d76782": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_lane.14b76d7583": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__detector_status_district___var_districts_.8e1a4f4570": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__detector_status_station_diagnostic_method_id.d155d64beb": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__detector_status_SAMPLE_DATE__DETECTOR_ID.e726e8f900": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_detector_id.358b0c76a8": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__constant_occupancy_sample_date.5f54be703f": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_active_date.74e12d58d6": [], "test.caldata_mdsa_caltrans_pems.accepted_values_int_diagnostics__no_data_status_district___var_districts_.70e36d9aa7": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_station_id.4763214a01": [], "test.caldata_mdsa_caltrans_pems.not_null_int_diagnostics__no_data_status_detector_id.da89c83682": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_diagnostics__no_data_status_ACTIVE_DATE__DETECTOR_ID.6021199b99": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config_controller_id.b389c43d70": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__controller_config__valid_from.c3d32ffb6e": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__controller_config_CONTROLLER_ID___VALID_TO.891389041c": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config_station_id.d834fe2c05": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__station_config__valid_from.367ed1e9b5": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__station_config_STATION_ID___VALID_TO.6a789d00e0": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config_detector_id.4d9c7cae39": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__detector_config__valid_from.5c4ca5caaf": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__detector_config_DETECTOR_ID___VALID_TO.3a9e44b39e": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_station_id.1cac9af910": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations__valid_from.9ce32994d4": [], "test.caldata_mdsa_caltrans_pems.not_null_int_vds__nearby_stations_OTHER_STATION_ID.35b161098c": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_unique_combination_of_columns_int_vds__nearby_stations_STATION_ID__OTHER_STATION_ID___VALID_TO.d6fedbcfc4": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_meta_ID.8bb6e726cd": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_ID.8fdaf0ebd1": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_clearinghouse__station_raw_SAMPLE_TIMESTAMP.ab5501c249": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_controller_id.305a718762": [], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__controller_config_controller_id.e076f51952": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__controller_config_log_controller_id.fd4291b6dc": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_station_id.4cf48b71ea": [], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__station_config_station_id.d0d27cec9b": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__station_config_log_station_id.97d2183445": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_detector_id.4b1b87d07c": [], "test.caldata_mdsa_caltrans_pems.unique_stg_db96__detector_config_detector_id.94c6915b93": [], "test.caldata_mdsa_caltrans_pems.not_null_stg_db96__detector_config_log_detector_id.c96cf05de1": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_.0d08a5e84f": [], "test.caldata_mdsa_caltrans_pems.source_unique_db96_controller_config_controller_id.cd75d813b7": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_log_.9a685f5015": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id.8e887df6cf": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_.31b0f54c1e": [], "test.caldata_mdsa_caltrans_pems.source_unique_db96_station_config_station_id.f6ea518fb5": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_log_.4844ae5c4e": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id.6157a011ae": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_.37c2ba5fb6": [], "test.caldata_mdsa_caltrans_pems.source_unique_db96_detector_config_detector_id.c1a0cde27d": [], "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_log_.2de5555832": [], "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id.3dc584c5d3": [], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_meta": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_meta"], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_raw": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_raw"], "source.caldata_mdsa_caltrans_pems.clearinghouse.station_status": ["model.caldata_mdsa_caltrans_pems.stg_clearinghouse__station_status"], "source.caldata_mdsa_caltrans_pems.db96.vds30sec": ["model.caldata_mdsa_caltrans_pems.stg_db96__vds30sec"], "source.caldata_mdsa_caltrans_pems.db96.controller_config": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_.0d08a5e84f", "test.caldata_mdsa_caltrans_pems.source_unique_db96_controller_config_controller_id.cd75d813b7"], "source.caldata_mdsa_caltrans_pems.db96.controller_config_log": ["model.caldata_mdsa_caltrans_pems.stg_db96__controller_config_log", "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_controller_config_log_controller_id__time_id.8e887df6cf", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_controller_config_log_.9a685f5015"], "source.caldata_mdsa_caltrans_pems.db96.station_config": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_.31b0f54c1e", "test.caldata_mdsa_caltrans_pems.source_unique_db96_station_config_station_id.f6ea518fb5"], "source.caldata_mdsa_caltrans_pems.db96.station_config_log": ["model.caldata_mdsa_caltrans_pems.stg_db96__station_config_log", "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_station_config_log_station_id__time_id.6157a011ae", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_station_config_log_.4844ae5c4e"], "source.caldata_mdsa_caltrans_pems.db96.detector_config": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_.37c2ba5fb6", "test.caldata_mdsa_caltrans_pems.source_unique_db96_detector_config_detector_id.c1a0cde27d"], "source.caldata_mdsa_caltrans_pems.db96.detector_config_log": ["model.caldata_mdsa_caltrans_pems.stg_db96__detector_config_log", "test.caldata_mdsa_caltrans_pems.dbt_utils_source_unique_combination_of_columns_db96_detector_config_log_detector_id__time_id.3dc584c5d3", "test.caldata_mdsa_caltrans_pems.source_not_empty_db96_detector_config_log_.2de5555832"], "source.caldata_mdsa_caltrans_pems.geo_reference.county_boundaries": ["model.caldata_mdsa_caltrans_pems.stg_geo_reference__county_boundaries"], "source.caldata_mdsa_caltrans_pems.geo_reference.districts": ["model.caldata_mdsa_caltrans_pems.stg_geo_reference__districts"], "source.caldata_mdsa_caltrans_pems.geo_reference.shn_lines": ["model.caldata_mdsa_caltrans_pems.stg_geo_reference__shn_lines"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}
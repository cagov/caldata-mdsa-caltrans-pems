# Project settings
name: caldata_mdsa_caltrans_pems
version: "1.0.0"
config-version: 2

flags:
  send_anonymous_usage_stats: false
  use_colors: true
  warn_error: false

# This setting configures which "profile" dbt uses for this project.
profile: caltrans_pems

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: target # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - target
  - dbt_packages

vars:
  #max_value comes from the detector_status model.
  #max value is calculated by taking 2 samples per min * 60 mins/hr * 17 hrs in a day == 1224
  # conversion to get miles per hour (5280 ft / mile and 12 5-minute intervals in an hour)
  # 5280 / 12 = 440
  detector_status_max_sample_value: 2 * 60 * 17
  mph_conversion: 440
  high_volume_threshold: 20
  high_occupancy_threshold: 0.7
  incremental_model_look_back: -2
  dev_model_look_back: -7
  backward_routes: (71, 153, 282, 580, 780)
  day_start: "'05:00:00'"
  day_end: "'21:59:59'"
  V_t: [35, 40, 45, 50, 55, 60]
  pems_clearinghouse_start_date: "'2023-01-01'"
  linear_regression_time_window: 7
  am_peak_start: "'06:00:00'"
  am_peak_end: "'09:59:59'"
  day_off_peak_start: "'10:00:00'"
  day_off_peak_end: "'14:59:59'"
  pm_peak_start: "'15:00:00'"
  pm_peak_end: "'18:59:59'"
  night_off_peak_start: "'19:00:00'"
  night_off_peak_end: "'05:59:59'"
  am_shift_start: "'05:00:00'"
  am_shift_end: "'09:59:59'"
  noon_shift_start: "'10:00:00'"
  noon_shift_end: "'14:59:59'"
  pm_shift_start: "'15:00:00'"
  pm_shift_end: "'20:00:00'"
  vehicle_effective_length: 22
  p_factor_smoothing_constant: 50

models:
  caldata_mdsa_caltrans_pems:
    # This config is a bit of a hack: if the PRE_COMMIT environment variable
    # is set, we set the full_refresh flag globally on the project. This has
    # the effect of forcing is_incremental() to evaluate to `False` everywhere,
    # making the compiled SQL consistent regardless of whether a developer
    # has a table in their dev environment. This matches what is done in CI,
    # where is_incremental() also evaluates to `False`.
    +full_refresh: "{{ true if env_var('PRE_COMMIT', '0') == '1' else none }}"
    staging:
      +materialized: view
      clearinghouse:
        +schema: clearinghouse
      db96:
        +schema: db96
    intermediate:
      +materialized: view
      db96:
        +schema: db96
      clearinghouse:
        +schema: clearinghouse
      vds:
        +schema: vds
      diagnostics:
        +schema: diagnostics
      performance:
        +schema: performance
      imputation:
        +schema: imputation
    marts:
      +materialized: table
      +post-hook: "{{ unload_relation(strip_leading_words=1) }}"
      +database: "{{ env_var('DBT_ANALYTICS_DB', 'ANALYTICS_DEV') }}"
      performance:
        +schema: performance
      imputation:
        +schema: imputation
      diagnostics:
        +schema: diagnostics
      geo:
        +schema: geo
        +post-hook: "{{ unload_relation_as_geojson(strip_leading_words=1) }}"
      quality:
        +schema: quality

on-run-start:
  - "{{create_udfs()}}"
